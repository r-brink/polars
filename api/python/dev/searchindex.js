Search.setIndex({"alltitles": {"ABS": [[1422, "abs"]], "ACOS": [[1425, "acos"]], "ACOSD": [[1425, "acosd"]], "ARRAY_AGG": [[1418, "array-agg"]], "ARRAY_CONTAINS": [[1418, "array-contains"]], "ARRAY_GET": [[1418, "array-get"]], "ARRAY_LENGTH": [[1418, "array-length"]], "ARRAY_LOWER": [[1418, "array-lower"]], "ARRAY_MEAN": [[1418, "array-mean"]], "ARRAY_REVERSE": [[1418, "array-reverse"]], "ARRAY_SUM": [[1418, "array-sum"]], "ARRAY_TO_STRING": [[1418, "array-to-string"]], "ARRAY_UNIQUE": [[1418, "array-unique"]], "ARRAY_UPPER": [[1418, "array-upper"]], "ASIN": [[1425, "asin"]], "ASIND": [[1425, "asind"]], "ATAN": [[1425, "atan"]], "ATAN2": [[1425, "atan2"]], "ATAN2D": [[1425, "atan2d"]], "ATAND": [[1425, "atand"]], "AVG": [[1417, "avg"]], "Aggregate": [[1417, null]], "Aggregation": [[206, null], [376, null], [881, null], [994, null]], "Aliases": [[1417, null], [1417, null], [1417, null], [1422, null], [1422, null], [1423, null], [1423, null]], "Array": [[369, null], [859, null], [1392, null], [1418, null]], "Asserts": [[1431, "asserts"]], "Attributes": [[350, null], [982, null], [1393, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[880, "avro"]], "BIT_AND": [[1419, "bit-and"]], "BIT_COUNT": [[1419, "bit-count"]], "BIT_LENGTH": [[1423, "bit-length"]], "BIT_OR": [[1419, "bit-or"]], "BIT_XOR": [[1419, "bit-xor"]], "Binary": [[860, null], [873, "binary"], [1394, null]], "Bitwise": [[1419, null]], "Boolean": [[861, null], [1395, null]], "CAST": [[1426, "cast"]], "CBRT": [[1422, "cbrt"]], "CEIL": [[1422, "ceil"]], "COALESCE": [[1420, "coalesce"]], "CONCAT": [[1423, "concat"]], "CONCAT_WS": [[1423, "concat-ws"]], "CORR": [[1417, "corr"]], "COS": [[1425, "cos"]], "COSD": [[1425, "cosd"]], "COT": [[1425, "cot"]], "COTD": [[1425, "cotd"]], "COUNT": [[1417, "count"]], "CREATE TABLE": [[1430, "create-table"]], "CSV": [[880, "csv"]], "Catalog": [[203, null]], "Categories": [[862, null], [1396, null]], "Clipboard": [[880, "clipboard"]], "Cloud Credentials": [[880, "cloud-credentials"]], "Columns / names": [[864, null]], "Comparison": [[873, "comparison"], [1404, "comparison"]], "Computation": [[351, null], [865, null], [1397, null]], "Conditional": [[1420, null]], "Config": [[205, null]], "Config load, save, state": [[205, "config-load-save-state"]], "Config options": [[205, "config-options"]], "Conjunction": [[873, "conjunction"]], "Conversion": [[878, "conversion"]], "DATE": [[1423, "date"]], "DATE_PART": [[1424, "date-part"]], "DEGREES": [[1425, "degrees"]], "DELETE": [[1430, "delete"]], "DISTINCT": [[1416, "distinct"]], "DIV": [[1422, "div"]], "DROP TABLES": [[1430, "drop-tables"]], "Data types": [[374, null]], "DataFrame": [[355, null]], "DataType": [[374, "datatype"]], "DataType expressions": [[373, null]], "Database": [[880, "database"]], "Delta Lake": [[880, "delta-lake"]], "Descriptive": [[352, null], [983, null], [1398, null]], "Documentation": [[1428, null], [1428, null], [1428, null]], "ENDS_WITH": [[1423, "ends-with"]], "EXCEPT": [[1429, "except"]], "EXP": [[1422, "exp"]], "EXPLAIN": [[1430, "explain"]], "EXTRACT": [[1424, "extract"]], "Errors": [[375, "errors"]], "Examples": [[1, "examples"], [993, "examples"], [1431, "examples"]], "Excel / ODS": [[880, "excel-ods"]], "Exceptions": [[375, null]], "Export": [[353, null], [1399, null]], "Expression SQL": [[1428, "expression-sql"]], "Expression plugins": [[991, "expression-plugins"]], "Expressions": [[867, null]], "Extending the API": [[1, null]], "FIRST": [[1417, "first"]], "FLOOR": [[1422, "floor"]], "FROM": [[1416, "from"]], "Feather / IPC": [[880, "feather-ipc"]], "Frame SQL": [[1428, "frame-sql"]], "Functions": [[370, null], [866, null], [878, null], [993, "functions"]], "GPUEngine": [[984, null]], "GREATEST": [[1420, "greatest"]], "GROUP BY": [[1416, "group-by"]], "Global SQL": [[1428, "global-sql"]], "GroupBy": [[354, null], [985, null]], "HAVING": [[1416, "having"]], "IF": [[1420, "if"]], "IFNULL": [[1420, "ifnull"]], "INITCAP": [[1423, "initcap"]], "INTERSECT": [[1429, "intersect"]], "IO plugins": [[991, "io-plugins"]], "Iceberg": [[880, "iceberg"]], "Importing": [[993, "importing"]], "InProcessQuery": [[986, null]], "Index": [[0, null]], "Input/output": [[880, null]], "Introduction": [[1428, "introduction"]], "JOIN": [[1416, "join"]], "JSON": [[880, "json"]], "LAST": [[1417, "last"]], "LEAST": [[1420, "least"]], "LEFT": [[1423, "left"]], "LENGTH": [[1423, "length"]], "LIMIT": [[1416, "limit"]], "LN": [[1422, "ln"]], "LOG": [[1422, "log"]], "LOG10": [[1422, "log10"]], "LOG1P": [[1422, "log1p"]], "LOG2": [[1422, "log2"]], "LOWER": [[1423, "lower"]], "LTRIM": [[1423, "ltrim"]], "LazyFrame": [[987, null]], "List": [[371, null], [868, null], [1401, null]], "MAX": [[1417, "max"]], "MEDIAN": [[1417, "median"]], "MIN": [[1417, "min"]], "MOD": [[1422, "mod"]], "Manipulation/selection": [[357, null], [871, null], [989, null], [1403, null]], "Math": [[1422, null]], "Meta": [[869, null]], "Metadata": [[990, null]], "Methods": [[1428, "methods"]], "Miscellaneous": [[356, null], [870, null], [878, "miscellaneous"], [988, null], [1402, null]], "Multiple Config instances": [[205, "multiple-config-instances"]], "Multiple queries": [[878, "multiple-queries"]], "NORMALIZE": [[1423, "normalize"]], "NULLIF": [[1420, "nullif"]], "Name": [[872, null]], "Nested": [[374, "nested"]], "Numeric": [[374, "numeric"], [873, "numeric"], [1404, "numeric"]], "OCTET_LENGTH": [[1423, "octet-length"]], "OFFSET": [[1416, "offset"]], "ORDER BY": [[1416, "order-by"]], "Operators": [[873, null], [1404, null]], "Other": [[374, "other"]], "PI": [[1422, "pi"]], "POW": [[1422, "pow"]], "Panic": [[375, "panic"]], "Parametric testing": [[1431, "parametric-testing"]], "Parquet": [[880, "parquet"]], "Partition": [[880, "partition"]], "Plot": [[358, null], [1405, null]], "Plugins": [[991, null]], "Polars strategies": [[1431, "polars-strategies"]], "Profiles": [[1431, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[880, "pyarrow-datasets"]], "Python API": [[1428, null]], "Python API reference": [[879, null]], "QUANTILE_CONT": [[1417, "quantile-cont"]], "QUANTILE_DISC": [[1417, "quantile-disc"]], "Querying": [[1428, "querying"]], "RADIANS": [[1425, "radians"]], "REGEXP_LIKE": [[1423, "regexp-like"]], "REPLACE": [[1423, "replace"]], "REVERSE": [[1423, "reverse"]], "RIGHT": [[1423, "right"]], "ROUND": [[1422, "round"]], "RTRIM": [[1423, "rtrim"]], "Random": [[878, "random"]], "SELECT": [[1416, "select"]], "SHOW TABLES": [[1430, "show-tables"]], "SIGN": [[1422, "sign"]], "SIN": [[1425, "sin"]], "SIND": [[1425, "sind"]], "SPLIT_PART": [[1423, "split-part"]], "SQL Clauses": [[1416, null]], "SQL Functions": [[1421, null]], "SQL Interface": [[1427, null]], "SQLContext": [[1428, "sqlcontext"]], "SQRT": [[1422, "sqrt"]], "STARTS_WITH": [[1423, "starts-with"]], "STDDEV": [[1417, "stddev"]], "STRFTIME": [[1424, "strftime"]], "STRING_TO_ARRAY": [[1423, "string-to-array"]], "STRPOS": [[1423, "strpos"]], "STRPTIME": [[1423, "strptime"]], "SUBSTR": [[1423, "substr"]], "SUM": [[1417, "sum"]], "Scan Cast Options": [[880, "scan-cast-options"]], "Schema": [[992, null]], "Selectors": [[993, null]], "Serialization": [[356, "serialization"], [988, "serialization"]], "Series": [[1400, null]], "Set Operations": [[1429, null]], "Set operations": [[993, "set-operations"]], "Strategy helpers": [[1431, "strategy-helpers"]], "String": [[374, "string"], [874, null], [1406, null], [1423, null]], "StringCache": [[878, "stringcache"]], "Struct": [[372, null], [875, null], [1407, null]], "Style": [[359, null]], "TAN": [[1425, "tan"]], "TAND": [[1425, "tand"]], "TIMESTAMP": [[1423, "timestamp"]], "TRUNCATE": [[1430, "truncate"]], "TRY_CAST": [[1426, "try-cast"]], "Table Operations": [[1430, null]], "Temporal": [[374, "temporal"], [876, null], [1408, null], [1424, null]], "Testing": [[1431, null]], "Trigonometry": [[1425, null]], "Types": [[1426, null]], "UNION": [[1429, "union"]], "UNION ALL": [[1429, "union-all"]], "UNION BY NAME": [[1429, "union-by-name"]], "UNNEST": [[1418, "unnest"], [1430, "unnest"]], "UPPER": [[1423, "upper"]], "Unity Catalog": [[204, null]], "Use as a context manager": [[205, "use-as-a-context-manager"]], "Use as a decorator": [[205, "use-as-a-decorator"]], "VARIANCE": [[1417, "variance"]], "WHERE": [[1416, "where"]], "Warnings": [[375, "warnings"]], "Window": [[877, null]], "polars.Catalog": [[190, null]], "polars.Catalog.get_table_info": [[191, null]], "polars.Catalog.list_catalogs": [[192, null]], "polars.Catalog.list_namespaces": [[193, null]], "polars.Catalog.list_tables": [[194, null]], "polars.Catalog.scan_table": [[195, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[207, null]], "polars.DataFrame.__arrow_c_stream__": [[208, null]], "polars.DataFrame.__dataframe__": [[209, null]], "polars.DataFrame.__getitem__": [[210, null]], "polars.DataFrame.__setitem__": [[211, null]], "polars.DataFrame.approx_n_unique": [[212, null]], "polars.DataFrame.bottom_k": [[213, null]], "polars.DataFrame.cast": [[214, null]], "polars.DataFrame.clear": [[215, null]], "polars.DataFrame.clone": [[216, null]], "polars.DataFrame.collect_schema": [[217, null]], "polars.DataFrame.columns": [[218, null]], "polars.DataFrame.corr": [[219, null]], "polars.DataFrame.count": [[220, null]], "polars.DataFrame.describe": [[221, null]], "polars.DataFrame.deserialize": [[222, null]], "polars.DataFrame.drop": [[223, null]], "polars.DataFrame.drop_in_place": [[224, null]], "polars.DataFrame.drop_nans": [[225, null]], "polars.DataFrame.drop_nulls": [[226, null]], "polars.DataFrame.dtypes": [[227, null]], "polars.DataFrame.equals": [[228, null]], "polars.DataFrame.estimated_size": [[229, null]], "polars.DataFrame.explode": [[230, null]], "polars.DataFrame.extend": [[231, null]], "polars.DataFrame.fill_nan": [[232, null]], "polars.DataFrame.fill_null": [[233, null]], "polars.DataFrame.filter": [[234, null]], "polars.DataFrame.flags": [[235, null]], "polars.DataFrame.fold": [[236, null]], "polars.DataFrame.gather_every": [[237, null]], "polars.DataFrame.get_column": [[238, null]], "polars.DataFrame.get_column_index": [[239, null]], "polars.DataFrame.get_columns": [[240, null]], "polars.DataFrame.glimpse": [[241, null]], "polars.DataFrame.group_by": [[242, null]], "polars.DataFrame.group_by_dynamic": [[243, null]], "polars.DataFrame.hash_rows": [[244, null]], "polars.DataFrame.head": [[245, null]], "polars.DataFrame.height": [[246, null]], "polars.DataFrame.hstack": [[247, null]], "polars.DataFrame.insert_column": [[248, null]], "polars.DataFrame.interpolate": [[249, null]], "polars.DataFrame.is_duplicated": [[250, null]], "polars.DataFrame.is_empty": [[251, null]], "polars.DataFrame.is_unique": [[252, null]], "polars.DataFrame.item": [[253, null]], "polars.DataFrame.iter_columns": [[254, null]], "polars.DataFrame.iter_rows": [[255, null]], "polars.DataFrame.iter_slices": [[256, null]], "polars.DataFrame.join": [[257, null]], "polars.DataFrame.join_asof": [[258, null]], "polars.DataFrame.join_where": [[259, null]], "polars.DataFrame.lazy": [[260, null]], "polars.DataFrame.limit": [[261, null]], "polars.DataFrame.map_columns": [[262, null]], "polars.DataFrame.map_rows": [[263, null]], "polars.DataFrame.match_to_schema": [[264, null]], "polars.DataFrame.max": [[265, null]], "polars.DataFrame.max_horizontal": [[266, null]], "polars.DataFrame.mean": [[267, null]], "polars.DataFrame.mean_horizontal": [[268, null]], "polars.DataFrame.median": [[269, null]], "polars.DataFrame.melt": [[270, null]], "polars.DataFrame.merge_sorted": [[271, null]], "polars.DataFrame.min": [[272, null]], "polars.DataFrame.min_horizontal": [[273, null]], "polars.DataFrame.n_chunks": [[274, null]], "polars.DataFrame.n_unique": [[275, null]], "polars.DataFrame.null_count": [[276, null]], "polars.DataFrame.partition_by": [[277, null]], "polars.DataFrame.pipe": [[278, null]], "polars.DataFrame.pivot": [[279, null]], "polars.DataFrame.product": [[280, null]], "polars.DataFrame.quantile": [[281, null]], "polars.DataFrame.rechunk": [[282, null]], "polars.DataFrame.remove": [[283, null]], "polars.DataFrame.rename": [[284, null]], "polars.DataFrame.replace_column": [[285, null]], "polars.DataFrame.reverse": [[286, null]], "polars.DataFrame.rolling": [[287, null]], "polars.DataFrame.row": [[288, null]], "polars.DataFrame.rows": [[289, null]], "polars.DataFrame.rows_by_key": [[290, null]], "polars.DataFrame.sample": [[291, null]], "polars.DataFrame.schema": [[292, null]], "polars.DataFrame.select": [[293, null]], "polars.DataFrame.select_seq": [[294, null]], "polars.DataFrame.serialize": [[295, null]], "polars.DataFrame.set_sorted": [[296, null]], "polars.DataFrame.shape": [[297, null]], "polars.DataFrame.shift": [[298, null]], "polars.DataFrame.shrink_to_fit": [[299, null]], "polars.DataFrame.slice": [[300, null]], "polars.DataFrame.sort": [[301, null]], "polars.DataFrame.sql": [[302, null]], "polars.DataFrame.std": [[303, null]], "polars.DataFrame.sum": [[304, null]], "polars.DataFrame.sum_horizontal": [[305, null]], "polars.DataFrame.tail": [[306, null]], "polars.DataFrame.to_arrow": [[307, null]], "polars.DataFrame.to_dict": [[308, null]], "polars.DataFrame.to_dicts": [[309, null]], "polars.DataFrame.to_dummies": [[310, null]], "polars.DataFrame.to_init_repr": [[311, null]], "polars.DataFrame.to_jax": [[312, null]], "polars.DataFrame.to_numpy": [[313, null]], "polars.DataFrame.to_pandas": [[314, null]], "polars.DataFrame.to_series": [[315, null]], "polars.DataFrame.to_struct": [[316, null]], "polars.DataFrame.to_torch": [[317, null]], "polars.DataFrame.top_k": [[318, null]], "polars.DataFrame.transpose": [[319, null]], "polars.DataFrame.unique": [[320, null]], "polars.DataFrame.unnest": [[321, null]], "polars.DataFrame.unpivot": [[322, null]], "polars.DataFrame.unstack": [[323, null]], "polars.DataFrame.update": [[324, null]], "polars.DataFrame.upsample": [[325, null]], "polars.DataFrame.var": [[326, null]], "polars.DataFrame.vstack": [[327, null]], "polars.DataFrame.width": [[328, null]], "polars.DataFrame.with_columns": [[329, null]], "polars.DataFrame.with_columns_seq": [[330, null]], "polars.DataFrame.with_row_count": [[331, null]], "polars.DataFrame.with_row_index": [[332, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.DataType.to_dtype_expr": [[360, null]], "polars.DataTypeExpr.arr.inner_dtype": [[361, null]], "polars.DataTypeExpr.arr.shape": [[362, null]], "polars.DataTypeExpr.arr.width": [[363, null]], "polars.DataTypeExpr.list.inner_dtype": [[364, null]], "polars.DataTypeExpr.struct.field_dtype": [[365, null]], "polars.DataTypeExpr.struct.field_names": [[366, null]], "polars.Expr.abs": [[377, null]], "polars.Expr.add": [[378, null]], "polars.Expr.agg_groups": [[379, null]], "polars.Expr.alias": [[380, null]], "polars.Expr.all": [[381, null]], "polars.Expr.and_": [[382, null]], "polars.Expr.any": [[383, null]], "polars.Expr.append": [[384, null]], "polars.Expr.approx_n_unique": [[385, null]], "polars.Expr.arccos": [[386, null]], "polars.Expr.arccosh": [[387, null]], "polars.Expr.arcsin": [[388, null]], "polars.Expr.arcsinh": [[389, null]], "polars.Expr.arctan": [[390, null]], "polars.Expr.arctanh": [[391, null]], "polars.Expr.arg_max": [[392, null]], "polars.Expr.arg_min": [[393, null]], "polars.Expr.arg_sort": [[394, null]], "polars.Expr.arg_true": [[395, null]], "polars.Expr.arg_unique": [[396, null]], "polars.Expr.arr.all": [[397, null]], "polars.Expr.arr.any": [[398, null]], "polars.Expr.arr.arg_max": [[399, null]], "polars.Expr.arr.arg_min": [[400, null]], "polars.Expr.arr.contains": [[401, null]], "polars.Expr.arr.count_matches": [[402, null]], "polars.Expr.arr.explode": [[403, null]], "polars.Expr.arr.first": [[404, null]], "polars.Expr.arr.get": [[405, null]], "polars.Expr.arr.join": [[406, null]], "polars.Expr.arr.last": [[407, null]], "polars.Expr.arr.len": [[408, null]], "polars.Expr.arr.max": [[409, null]], "polars.Expr.arr.mean": [[410, null]], "polars.Expr.arr.median": [[411, null]], "polars.Expr.arr.min": [[412, null]], "polars.Expr.arr.n_unique": [[413, null]], "polars.Expr.arr.reverse": [[414, null]], "polars.Expr.arr.shift": [[415, null]], "polars.Expr.arr.sort": [[416, null]], "polars.Expr.arr.std": [[417, null]], "polars.Expr.arr.sum": [[418, null]], "polars.Expr.arr.to_list": [[419, null]], "polars.Expr.arr.to_struct": [[420, null]], "polars.Expr.arr.unique": [[421, null]], "polars.Expr.arr.var": [[422, null]], "polars.Expr.backward_fill": [[423, null]], "polars.Expr.bin.contains": [[424, null]], "polars.Expr.bin.decode": [[425, null]], "polars.Expr.bin.encode": [[426, null]], "polars.Expr.bin.ends_with": [[427, null]], "polars.Expr.bin.reinterpret": [[428, null]], "polars.Expr.bin.size": [[429, null]], "polars.Expr.bin.starts_with": [[430, null]], "polars.Expr.bitwise_and": [[431, null]], "polars.Expr.bitwise_count_ones": [[432, null]], "polars.Expr.bitwise_count_zeros": [[433, null]], "polars.Expr.bitwise_leading_ones": [[434, null]], "polars.Expr.bitwise_leading_zeros": [[435, null]], "polars.Expr.bitwise_or": [[436, null]], "polars.Expr.bitwise_trailing_ones": [[437, null]], "polars.Expr.bitwise_trailing_zeros": [[438, null]], "polars.Expr.bitwise_xor": [[439, null]], "polars.Expr.bottom_k": [[440, null]], "polars.Expr.bottom_k_by": [[441, null]], "polars.Expr.cast": [[442, null]], "polars.Expr.cat.ends_with": [[443, null]], "polars.Expr.cat.get_categories": [[444, null]], "polars.Expr.cat.len_bytes": [[445, null]], "polars.Expr.cat.len_chars": [[446, null]], "polars.Expr.cat.starts_with": [[447, null]], "polars.Expr.cbrt": [[448, null]], "polars.Expr.ceil": [[449, null]], "polars.Expr.clip": [[450, null]], "polars.Expr.cos": [[451, null]], "polars.Expr.cosh": [[452, null]], "polars.Expr.cot": [[453, null]], "polars.Expr.count": [[454, null]], "polars.Expr.cum_count": [[455, null]], "polars.Expr.cum_max": [[456, null]], "polars.Expr.cum_min": [[457, null]], "polars.Expr.cum_prod": [[458, null]], "polars.Expr.cum_sum": [[459, null]], "polars.Expr.cumulative_eval": [[460, null]], "polars.Expr.cut": [[461, null]], "polars.Expr.degrees": [[462, null]], "polars.Expr.deserialize": [[463, null]], "polars.Expr.diff": [[464, null]], "polars.Expr.dot": [[465, null]], "polars.Expr.drop_nans": [[466, null]], "polars.Expr.drop_nulls": [[467, null]], "polars.Expr.dt.add_business_days": [[468, null]], "polars.Expr.dt.base_utc_offset": [[469, null]], "polars.Expr.dt.cast_time_unit": [[470, null]], "polars.Expr.dt.century": [[471, null]], "polars.Expr.dt.combine": [[472, null]], "polars.Expr.dt.convert_time_zone": [[473, null]], "polars.Expr.dt.date": [[474, null]], "polars.Expr.dt.datetime": [[475, null]], "polars.Expr.dt.day": [[476, null]], "polars.Expr.dt.dst_offset": [[477, null]], "polars.Expr.dt.epoch": [[478, null]], "polars.Expr.dt.hour": [[479, null]], "polars.Expr.dt.is_business_day": [[480, null]], "polars.Expr.dt.is_leap_year": [[481, null]], "polars.Expr.dt.iso_year": [[482, null]], "polars.Expr.dt.microsecond": [[483, null]], "polars.Expr.dt.millennium": [[484, null]], "polars.Expr.dt.millisecond": [[485, null]], "polars.Expr.dt.minute": [[486, null]], "polars.Expr.dt.month": [[487, null]], "polars.Expr.dt.month_end": [[488, null]], "polars.Expr.dt.month_start": [[489, null]], "polars.Expr.dt.nanosecond": [[490, null]], "polars.Expr.dt.offset_by": [[491, null]], "polars.Expr.dt.ordinal_day": [[492, null]], "polars.Expr.dt.quarter": [[493, null]], "polars.Expr.dt.replace": [[494, null]], "polars.Expr.dt.replace_time_zone": [[495, null]], "polars.Expr.dt.round": [[496, null]], "polars.Expr.dt.second": [[497, null]], "polars.Expr.dt.strftime": [[498, null]], "polars.Expr.dt.time": [[499, null]], "polars.Expr.dt.timestamp": [[500, null]], "polars.Expr.dt.to_string": [[501, null]], "polars.Expr.dt.total_days": [[502, null]], "polars.Expr.dt.total_hours": [[503, null]], "polars.Expr.dt.total_microseconds": [[504, null]], "polars.Expr.dt.total_milliseconds": [[505, null]], "polars.Expr.dt.total_minutes": [[506, null]], "polars.Expr.dt.total_nanoseconds": [[507, null]], "polars.Expr.dt.total_seconds": [[508, null]], "polars.Expr.dt.truncate": [[509, null]], "polars.Expr.dt.week": [[510, null]], "polars.Expr.dt.weekday": [[511, null]], "polars.Expr.dt.with_time_unit": [[512, null]], "polars.Expr.dt.year": [[513, null]], "polars.Expr.entropy": [[514, null]], "polars.Expr.eq": [[515, null]], "polars.Expr.eq_missing": [[516, null]], "polars.Expr.ewm_mean": [[517, null]], "polars.Expr.ewm_mean_by": [[518, null]], "polars.Expr.ewm_std": [[519, null]], "polars.Expr.ewm_var": [[520, null]], "polars.Expr.exclude": [[521, null]], "polars.Expr.exp": [[522, null]], "polars.Expr.explode": [[523, null]], "polars.Expr.extend_constant": [[524, null]], "polars.Expr.fill_nan": [[525, null]], "polars.Expr.fill_null": [[526, null]], "polars.Expr.filter": [[527, null]], "polars.Expr.first": [[528, null]], "polars.Expr.flatten": [[529, null]], "polars.Expr.floor": [[530, null]], "polars.Expr.floordiv": [[531, null]], "polars.Expr.forward_fill": [[532, null]], "polars.Expr.from_json": [[533, null]], "polars.Expr.gather": [[534, null]], "polars.Expr.gather_every": [[535, null]], "polars.Expr.ge": [[536, null]], "polars.Expr.get": [[537, null]], "polars.Expr.gt": [[538, null]], "polars.Expr.has_nulls": [[539, null]], "polars.Expr.hash": [[540, null]], "polars.Expr.head": [[541, null]], "polars.Expr.hist": [[542, null]], "polars.Expr.implode": [[543, null]], "polars.Expr.index_of": [[544, null]], "polars.Expr.inspect": [[545, null]], "polars.Expr.interpolate": [[546, null]], "polars.Expr.interpolate_by": [[547, null]], "polars.Expr.is_between": [[548, null]], "polars.Expr.is_close": [[549, null]], "polars.Expr.is_duplicated": [[550, null]], "polars.Expr.is_finite": [[551, null]], "polars.Expr.is_first_distinct": [[552, null]], "polars.Expr.is_in": [[553, null]], "polars.Expr.is_infinite": [[554, null]], "polars.Expr.is_last_distinct": [[555, null]], "polars.Expr.is_nan": [[556, null]], "polars.Expr.is_not_nan": [[557, null]], "polars.Expr.is_not_null": [[558, null]], "polars.Expr.is_null": [[559, null]], "polars.Expr.is_unique": [[560, null]], "polars.Expr.kurtosis": [[561, null]], "polars.Expr.last": [[562, null]], "polars.Expr.le": [[563, null]], "polars.Expr.len": [[564, null]], "polars.Expr.limit": [[565, null]], "polars.Expr.list.all": [[566, null]], "polars.Expr.list.any": [[567, null]], "polars.Expr.list.arg_max": [[568, null]], "polars.Expr.list.arg_min": [[569, null]], "polars.Expr.list.concat": [[570, null]], "polars.Expr.list.contains": [[571, null]], "polars.Expr.list.count_matches": [[572, null]], "polars.Expr.list.diff": [[573, null]], "polars.Expr.list.drop_nulls": [[574, null]], "polars.Expr.list.eval": [[575, null]], "polars.Expr.list.explode": [[576, null]], "polars.Expr.list.filter": [[577, null]], "polars.Expr.list.first": [[578, null]], "polars.Expr.list.gather": [[579, null]], "polars.Expr.list.gather_every": [[580, null]], "polars.Expr.list.get": [[581, null]], "polars.Expr.list.head": [[582, null]], "polars.Expr.list.join": [[583, null]], "polars.Expr.list.last": [[584, null]], "polars.Expr.list.len": [[585, null]], "polars.Expr.list.max": [[586, null]], "polars.Expr.list.mean": [[587, null]], "polars.Expr.list.median": [[588, null]], "polars.Expr.list.min": [[589, null]], "polars.Expr.list.n_unique": [[590, null]], "polars.Expr.list.reverse": [[591, null]], "polars.Expr.list.sample": [[592, null]], "polars.Expr.list.set_difference": [[593, null]], "polars.Expr.list.set_intersection": [[594, null]], "polars.Expr.list.set_symmetric_difference": [[595, null]], "polars.Expr.list.set_union": [[596, null]], "polars.Expr.list.shift": [[597, null]], "polars.Expr.list.slice": [[598, null]], "polars.Expr.list.sort": [[599, null]], "polars.Expr.list.std": [[600, null]], "polars.Expr.list.sum": [[601, null]], "polars.Expr.list.tail": [[602, null]], "polars.Expr.list.to_array": [[603, null]], "polars.Expr.list.to_struct": [[604, null]], "polars.Expr.list.unique": [[605, null]], "polars.Expr.list.var": [[606, null]], "polars.Expr.log": [[607, null]], "polars.Expr.log10": [[608, null]], "polars.Expr.log1p": [[609, null]], "polars.Expr.lower_bound": [[610, null]], "polars.Expr.lt": [[611, null]], "polars.Expr.map_batches": [[612, null]], "polars.Expr.map_elements": [[613, null]], "polars.Expr.max": [[614, null]], "polars.Expr.mean": [[615, null]], "polars.Expr.median": [[616, null]], "polars.Expr.meta.eq": [[617, null]], "polars.Expr.meta.has_multiple_outputs": [[618, null]], "polars.Expr.meta.is_column": [[619, null]], "polars.Expr.meta.is_column_selection": [[620, null]], "polars.Expr.meta.is_literal": [[621, null]], "polars.Expr.meta.is_regex_projection": [[622, null]], "polars.Expr.meta.ne": [[623, null]], "polars.Expr.meta.output_name": [[624, null]], "polars.Expr.meta.pop": [[625, null]], "polars.Expr.meta.root_names": [[626, null]], "polars.Expr.meta.serialize": [[627, null]], "polars.Expr.meta.show_graph": [[628, null]], "polars.Expr.meta.tree_format": [[629, null]], "polars.Expr.meta.undo_aliases": [[630, null]], "polars.Expr.meta.write_json": [[631, null]], "polars.Expr.min": [[632, null]], "polars.Expr.mod": [[633, null]], "polars.Expr.mode": [[634, null]], "polars.Expr.mul": [[635, null]], "polars.Expr.n_unique": [[636, null]], "polars.Expr.name.keep": [[637, null]], "polars.Expr.name.map": [[638, null]], "polars.Expr.name.map_fields": [[639, null]], "polars.Expr.name.prefix": [[640, null]], "polars.Expr.name.prefix_fields": [[641, null]], "polars.Expr.name.suffix": [[642, null]], "polars.Expr.name.suffix_fields": [[643, null]], "polars.Expr.name.to_lowercase": [[644, null]], "polars.Expr.name.to_uppercase": [[645, null]], "polars.Expr.nan_max": [[646, null]], "polars.Expr.nan_min": [[647, null]], "polars.Expr.ne": [[648, null]], "polars.Expr.ne_missing": [[649, null]], "polars.Expr.neg": [[650, null]], "polars.Expr.not_": [[651, null]], "polars.Expr.null_count": [[652, null]], "polars.Expr.or_": [[653, null]], "polars.Expr.over": [[654, null]], "polars.Expr.pct_change": [[655, null]], "polars.Expr.peak_max": [[656, null]], "polars.Expr.peak_min": [[657, null]], "polars.Expr.pipe": [[658, null]], "polars.Expr.pow": [[659, null]], "polars.Expr.product": [[660, null]], "polars.Expr.qcut": [[661, null]], "polars.Expr.quantile": [[662, null]], "polars.Expr.radians": [[663, null]], "polars.Expr.rank": [[664, null]], "polars.Expr.rechunk": [[665, null]], "polars.Expr.reinterpret": [[666, null]], "polars.Expr.repeat_by": [[667, null]], "polars.Expr.replace": [[668, null]], "polars.Expr.replace_strict": [[669, null]], "polars.Expr.reshape": [[670, null]], "polars.Expr.reverse": [[671, null]], "polars.Expr.rle": [[672, null]], "polars.Expr.rle_id": [[673, null]], "polars.Expr.rolling": [[674, null]], "polars.Expr.rolling_kurtosis": [[675, null]], "polars.Expr.rolling_map": [[676, null]], "polars.Expr.rolling_max": [[677, null]], "polars.Expr.rolling_max_by": [[678, null]], "polars.Expr.rolling_mean": [[679, null]], "polars.Expr.rolling_mean_by": [[680, null]], "polars.Expr.rolling_median": [[681, null]], "polars.Expr.rolling_median_by": [[682, null]], "polars.Expr.rolling_min": [[683, null]], "polars.Expr.rolling_min_by": [[684, null]], "polars.Expr.rolling_quantile": [[685, null]], "polars.Expr.rolling_quantile_by": [[686, null]], "polars.Expr.rolling_skew": [[687, null]], "polars.Expr.rolling_std": [[688, null]], "polars.Expr.rolling_std_by": [[689, null]], "polars.Expr.rolling_sum": [[690, null]], "polars.Expr.rolling_sum_by": [[691, null]], "polars.Expr.rolling_var": [[692, null]], "polars.Expr.rolling_var_by": [[693, null]], "polars.Expr.round": [[694, null]], "polars.Expr.round_sig_figs": [[695, null]], "polars.Expr.sample": [[696, null]], "polars.Expr.search_sorted": [[697, null]], "polars.Expr.set_sorted": [[698, null]], "polars.Expr.shift": [[699, null]], "polars.Expr.shrink_dtype": [[700, null]], "polars.Expr.shuffle": [[701, null]], "polars.Expr.sign": [[702, null]], "polars.Expr.sin": [[703, null]], "polars.Expr.sinh": [[704, null]], "polars.Expr.skew": [[705, null]], "polars.Expr.slice": [[706, null]], "polars.Expr.sort": [[707, null]], "polars.Expr.sort_by": [[708, null]], "polars.Expr.sqrt": [[709, null]], "polars.Expr.std": [[710, null]], "polars.Expr.str.concat": [[711, null]], "polars.Expr.str.contains": [[712, null]], "polars.Expr.str.contains_any": [[713, null]], "polars.Expr.str.count_matches": [[714, null]], "polars.Expr.str.decode": [[715, null]], "polars.Expr.str.encode": [[716, null]], "polars.Expr.str.ends_with": [[717, null]], "polars.Expr.str.escape_regex": [[718, null]], "polars.Expr.str.explode": [[719, null]], "polars.Expr.str.extract": [[720, null]], "polars.Expr.str.extract_all": [[721, null]], "polars.Expr.str.extract_groups": [[722, null]], "polars.Expr.str.extract_many": [[723, null]], "polars.Expr.str.find": [[724, null]], "polars.Expr.str.find_many": [[725, null]], "polars.Expr.str.head": [[726, null]], "polars.Expr.str.join": [[727, null]], "polars.Expr.str.json_decode": [[728, null]], "polars.Expr.str.json_path_match": [[729, null]], "polars.Expr.str.len_bytes": [[730, null]], "polars.Expr.str.len_chars": [[731, null]], "polars.Expr.str.normalize": [[732, null]], "polars.Expr.str.pad_end": [[733, null]], "polars.Expr.str.pad_start": [[734, null]], "polars.Expr.str.replace": [[735, null]], "polars.Expr.str.replace_all": [[736, null]], "polars.Expr.str.replace_many": [[737, null]], "polars.Expr.str.reverse": [[738, null]], "polars.Expr.str.slice": [[739, null]], "polars.Expr.str.split": [[740, null]], "polars.Expr.str.split_exact": [[741, null]], "polars.Expr.str.splitn": [[742, null]], "polars.Expr.str.starts_with": [[743, null]], "polars.Expr.str.strip_chars": [[744, null]], "polars.Expr.str.strip_chars_end": [[745, null]], "polars.Expr.str.strip_chars_start": [[746, null]], "polars.Expr.str.strip_prefix": [[747, null]], "polars.Expr.str.strip_suffix": [[748, null]], "polars.Expr.str.strptime": [[749, null]], "polars.Expr.str.tail": [[750, null]], "polars.Expr.str.to_date": [[751, null]], "polars.Expr.str.to_datetime": [[752, null]], "polars.Expr.str.to_decimal": [[753, null]], "polars.Expr.str.to_integer": [[754, null]], "polars.Expr.str.to_lowercase": [[755, null]], "polars.Expr.str.to_time": [[756, null]], "polars.Expr.str.to_titlecase": [[757, null]], "polars.Expr.str.to_uppercase": [[758, null]], "polars.Expr.str.zfill": [[759, null]], "polars.Expr.struct.field": [[760, null]], "polars.Expr.struct.json_encode": [[761, null]], "polars.Expr.struct.rename_fields": [[762, null]], "polars.Expr.struct.unnest": [[763, null]], "polars.Expr.struct.with_fields": [[764, null]], "polars.Expr.sub": [[765, null]], "polars.Expr.sum": [[766, null]], "polars.Expr.tail": [[767, null]], "polars.Expr.tan": [[768, null]], "polars.Expr.tanh": [[769, null]], "polars.Expr.to_physical": [[770, null]], "polars.Expr.top_k": [[771, null]], "polars.Expr.top_k_by": [[772, null]], "polars.Expr.truediv": [[773, null]], "polars.Expr.unique": [[774, null]], "polars.Expr.unique_counts": [[775, null]], "polars.Expr.upper_bound": [[776, null]], "polars.Expr.value_counts": [[777, null]], "polars.Expr.var": [[778, null]], "polars.Expr.where": [[779, null]], "polars.Expr.xor": [[780, null]], "polars.LazyFrame.__getitem__": [[882, null]], "polars.LazyFrame.approx_n_unique": [[883, null]], "polars.LazyFrame.bottom_k": [[884, null]], "polars.LazyFrame.cache": [[885, null]], "polars.LazyFrame.cast": [[886, null]], "polars.LazyFrame.clear": [[887, null]], "polars.LazyFrame.clone": [[888, null]], "polars.LazyFrame.collect": [[889, null]], "polars.LazyFrame.collect_async": [[890, null]], "polars.LazyFrame.collect_schema": [[891, null]], "polars.LazyFrame.columns": [[892, null]], "polars.LazyFrame.count": [[893, null]], "polars.LazyFrame.describe": [[894, null]], "polars.LazyFrame.deserialize": [[895, null]], "polars.LazyFrame.drop": [[896, null]], "polars.LazyFrame.drop_nans": [[897, null]], "polars.LazyFrame.drop_nulls": [[898, null]], "polars.LazyFrame.dtypes": [[899, null]], "polars.LazyFrame.explain": [[900, null]], "polars.LazyFrame.explode": [[901, null]], "polars.LazyFrame.fill_nan": [[902, null]], "polars.LazyFrame.fill_null": [[903, null]], "polars.LazyFrame.filter": [[904, null]], "polars.LazyFrame.first": [[905, null]], "polars.LazyFrame.gather_every": [[906, null]], "polars.LazyFrame.group_by": [[907, null]], "polars.LazyFrame.group_by_dynamic": [[908, null]], "polars.LazyFrame.head": [[909, null]], "polars.LazyFrame.inspect": [[910, null]], "polars.LazyFrame.interpolate": [[911, null]], "polars.LazyFrame.join": [[912, null]], "polars.LazyFrame.join_asof": [[913, null]], "polars.LazyFrame.join_where": [[914, null]], "polars.LazyFrame.last": [[915, null]], "polars.LazyFrame.lazy": [[916, null]], "polars.LazyFrame.limit": [[917, null]], "polars.LazyFrame.map_batches": [[918, null]], "polars.LazyFrame.match_to_schema": [[919, null]], "polars.LazyFrame.max": [[920, null]], "polars.LazyFrame.mean": [[921, null]], "polars.LazyFrame.median": [[922, null]], "polars.LazyFrame.melt": [[923, null]], "polars.LazyFrame.merge_sorted": [[924, null]], "polars.LazyFrame.min": [[925, null]], "polars.LazyFrame.null_count": [[926, null]], "polars.LazyFrame.pipe": [[927, null]], "polars.LazyFrame.pipe_with_schema": [[928, null]], "polars.LazyFrame.profile": [[929, null]], "polars.LazyFrame.quantile": [[930, null]], "polars.LazyFrame.remote": [[931, null]], "polars.LazyFrame.remove": [[932, null]], "polars.LazyFrame.rename": [[933, null]], "polars.LazyFrame.reverse": [[934, null]], "polars.LazyFrame.rolling": [[935, null]], "polars.LazyFrame.schema": [[936, null]], "polars.LazyFrame.select": [[937, null]], "polars.LazyFrame.select_seq": [[938, null]], "polars.LazyFrame.serialize": [[939, null]], "polars.LazyFrame.set_sorted": [[940, null]], "polars.LazyFrame.shift": [[941, null]], "polars.LazyFrame.show_graph": [[942, null]], "polars.LazyFrame.sink_csv": [[48, null]], "polars.LazyFrame.sink_ipc": [[49, null]], "polars.LazyFrame.sink_ndjson": [[50, null]], "polars.LazyFrame.sink_parquet": [[51, null]], "polars.LazyFrame.slice": [[943, null]], "polars.LazyFrame.sort": [[944, null]], "polars.LazyFrame.sql": [[945, null]], "polars.LazyFrame.std": [[946, null]], "polars.LazyFrame.sum": [[947, null]], "polars.LazyFrame.tail": [[948, null]], "polars.LazyFrame.top_k": [[949, null]], "polars.LazyFrame.unique": [[950, null]], "polars.LazyFrame.unnest": [[951, null]], "polars.LazyFrame.unpivot": [[952, null]], "polars.LazyFrame.update": [[953, null]], "polars.LazyFrame.var": [[954, null]], "polars.LazyFrame.width": [[955, null]], "polars.LazyFrame.with_columns": [[956, null]], "polars.LazyFrame.with_columns_seq": [[957, null]], "polars.LazyFrame.with_context": [[958, null]], "polars.LazyFrame.with_row_count": [[959, null]], "polars.LazyFrame.with_row_index": [[960, null]], "polars.PartitionByKey": [[52, null]], "polars.PartitionMaxSize": [[53, null]], "polars.PartitionParted": [[54, null]], "polars.QueryOptFlags": [[961, null]], "polars.SQLContext.execute": [[1409, null]], "polars.SQLContext.execute_global": [[1410, null]], "polars.SQLContext.register": [[1411, null]], "polars.SQLContext.register_globals": [[1412, null]], "polars.SQLContext.register_many": [[1413, null]], "polars.SQLContext.tables": [[1414, null]], "polars.SQLContext.unregister": [[1415, null]], "polars.ScanCastOptions": [[55, null]], "polars.Series.__array__": [[995, null]], "polars.Series.__arrow_c_stream__": [[996, null]], "polars.Series.__getitem__": [[997, null]], "polars.Series.abs": [[998, null]], "polars.Series.alias": [[999, null]], "polars.Series.all": [[1000, null]], "polars.Series.any": [[1001, null]], "polars.Series.append": [[1002, null]], "polars.Series.approx_n_unique": [[1003, null]], "polars.Series.arccos": [[1004, null]], "polars.Series.arccosh": [[1005, null]], "polars.Series.arcsin": [[1006, null]], "polars.Series.arcsinh": [[1007, null]], "polars.Series.arctan": [[1008, null]], "polars.Series.arctanh": [[1009, null]], "polars.Series.arg_max": [[1010, null]], "polars.Series.arg_min": [[1011, null]], "polars.Series.arg_sort": [[1012, null]], "polars.Series.arg_true": [[1013, null]], "polars.Series.arg_unique": [[1014, null]], "polars.Series.arr.all": [[1015, null]], "polars.Series.arr.any": [[1016, null]], "polars.Series.arr.arg_max": [[1017, null]], "polars.Series.arr.arg_min": [[1018, null]], "polars.Series.arr.contains": [[1019, null]], "polars.Series.arr.count_matches": [[1020, null]], "polars.Series.arr.explode": [[1021, null]], "polars.Series.arr.first": [[1022, null]], "polars.Series.arr.get": [[1023, null]], "polars.Series.arr.join": [[1024, null]], "polars.Series.arr.last": [[1025, null]], "polars.Series.arr.len": [[1026, null]], "polars.Series.arr.max": [[1027, null]], "polars.Series.arr.median": [[1028, null]], "polars.Series.arr.min": [[1029, null]], "polars.Series.arr.n_unique": [[1030, null]], "polars.Series.arr.reverse": [[1031, null]], "polars.Series.arr.shift": [[1032, null]], "polars.Series.arr.sort": [[1033, null]], "polars.Series.arr.std": [[1034, null]], "polars.Series.arr.sum": [[1035, null]], "polars.Series.arr.to_list": [[1036, null]], "polars.Series.arr.to_struct": [[1037, null]], "polars.Series.arr.unique": [[1038, null]], "polars.Series.arr.var": [[1039, null]], "polars.Series.backward_fill": [[1040, null]], "polars.Series.bin.contains": [[1041, null]], "polars.Series.bin.decode": [[1042, null]], "polars.Series.bin.encode": [[1043, null]], "polars.Series.bin.ends_with": [[1044, null]], "polars.Series.bin.reinterpret": [[1045, null]], "polars.Series.bin.size": [[1046, null]], "polars.Series.bin.starts_with": [[1047, null]], "polars.Series.bitwise_and": [[1048, null]], "polars.Series.bitwise_count_ones": [[1049, null]], "polars.Series.bitwise_count_zeros": [[1050, null]], "polars.Series.bitwise_leading_ones": [[1051, null]], "polars.Series.bitwise_leading_zeros": [[1052, null]], "polars.Series.bitwise_or": [[1053, null]], "polars.Series.bitwise_trailing_ones": [[1054, null]], "polars.Series.bitwise_trailing_zeros": [[1055, null]], "polars.Series.bitwise_xor": [[1056, null]], "polars.Series.bottom_k": [[1057, null]], "polars.Series.bottom_k_by": [[1058, null]], "polars.Series.cast": [[1059, null]], "polars.Series.cat.ends_with": [[1060, null]], "polars.Series.cat.get_categories": [[1061, null]], "polars.Series.cat.is_local": [[1062, null]], "polars.Series.cat.len_bytes": [[1063, null]], "polars.Series.cat.len_chars": [[1064, null]], "polars.Series.cat.starts_with": [[1065, null]], "polars.Series.cat.to_local": [[1066, null]], "polars.Series.cat.uses_lexical_ordering": [[1067, null]], "polars.Series.cbrt": [[1068, null]], "polars.Series.ceil": [[1069, null]], "polars.Series.chunk_lengths": [[1070, null]], "polars.Series.clear": [[1071, null]], "polars.Series.clip": [[1072, null]], "polars.Series.clone": [[1073, null]], "polars.Series.cos": [[1074, null]], "polars.Series.cosh": [[1075, null]], "polars.Series.cot": [[1076, null]], "polars.Series.count": [[1077, null]], "polars.Series.cum_count": [[1078, null]], "polars.Series.cum_max": [[1079, null]], "polars.Series.cum_min": [[1080, null]], "polars.Series.cum_prod": [[1081, null]], "polars.Series.cum_sum": [[1082, null]], "polars.Series.cumulative_eval": [[1083, null]], "polars.Series.cut": [[1084, null]], "polars.Series.describe": [[1085, null]], "polars.Series.diff": [[1086, null]], "polars.Series.dot": [[1087, null]], "polars.Series.drop_nans": [[1088, null]], "polars.Series.drop_nulls": [[1089, null]], "polars.Series.dt.add_business_days": [[1090, null]], "polars.Series.dt.base_utc_offset": [[1091, null]], "polars.Series.dt.cast_time_unit": [[1092, null]], "polars.Series.dt.century": [[1093, null]], "polars.Series.dt.combine": [[1094, null]], "polars.Series.dt.convert_time_zone": [[1095, null]], "polars.Series.dt.date": [[1096, null]], "polars.Series.dt.datetime": [[1097, null]], "polars.Series.dt.day": [[1098, null]], "polars.Series.dt.dst_offset": [[1099, null]], "polars.Series.dt.epoch": [[1100, null]], "polars.Series.dt.hour": [[1101, null]], "polars.Series.dt.is_business_day": [[1102, null]], "polars.Series.dt.is_leap_year": [[1103, null]], "polars.Series.dt.iso_year": [[1104, null]], "polars.Series.dt.max": [[1105, null]], "polars.Series.dt.mean": [[1106, null]], "polars.Series.dt.median": [[1107, null]], "polars.Series.dt.microsecond": [[1108, null]], "polars.Series.dt.millennium": [[1109, null]], "polars.Series.dt.millisecond": [[1110, null]], "polars.Series.dt.min": [[1111, null]], "polars.Series.dt.minute": [[1112, null]], "polars.Series.dt.month": [[1113, null]], "polars.Series.dt.month_end": [[1114, null]], "polars.Series.dt.month_start": [[1115, null]], "polars.Series.dt.nanosecond": [[1116, null]], "polars.Series.dt.offset_by": [[1117, null]], "polars.Series.dt.ordinal_day": [[1118, null]], "polars.Series.dt.quarter": [[1119, null]], "polars.Series.dt.replace": [[1120, null]], "polars.Series.dt.replace_time_zone": [[1121, null]], "polars.Series.dt.round": [[1122, null]], "polars.Series.dt.second": [[1123, null]], "polars.Series.dt.strftime": [[1124, null]], "polars.Series.dt.time": [[1125, null]], "polars.Series.dt.timestamp": [[1126, null]], "polars.Series.dt.to_string": [[1127, null]], "polars.Series.dt.total_days": [[1128, null]], "polars.Series.dt.total_hours": [[1129, null]], "polars.Series.dt.total_microseconds": [[1130, null]], "polars.Series.dt.total_milliseconds": [[1131, null]], "polars.Series.dt.total_minutes": [[1132, null]], "polars.Series.dt.total_nanoseconds": [[1133, null]], "polars.Series.dt.total_seconds": [[1134, null]], "polars.Series.dt.truncate": [[1135, null]], "polars.Series.dt.week": [[1136, null]], "polars.Series.dt.weekday": [[1137, null]], "polars.Series.dt.with_time_unit": [[1138, null]], "polars.Series.dt.year": [[1139, null]], "polars.Series.dtype": [[1140, null]], "polars.Series.entropy": [[1141, null]], "polars.Series.eq": [[1142, null]], "polars.Series.eq_missing": [[1143, null]], "polars.Series.equals": [[1144, null]], "polars.Series.estimated_size": [[1145, null]], "polars.Series.ewm_mean": [[1146, null]], "polars.Series.ewm_mean_by": [[1147, null]], "polars.Series.ewm_std": [[1148, null]], "polars.Series.ewm_var": [[1149, null]], "polars.Series.exp": [[1150, null]], "polars.Series.explode": [[1151, null]], "polars.Series.extend": [[1152, null]], "polars.Series.extend_constant": [[1153, null]], "polars.Series.fill_nan": [[1154, null]], "polars.Series.fill_null": [[1155, null]], "polars.Series.filter": [[1156, null]], "polars.Series.first": [[1157, null]], "polars.Series.flags": [[1158, null]], "polars.Series.floor": [[1159, null]], "polars.Series.forward_fill": [[1160, null]], "polars.Series.gather": [[1161, null]], "polars.Series.gather_every": [[1162, null]], "polars.Series.ge": [[1163, null]], "polars.Series.get_chunks": [[1164, null]], "polars.Series.gt": [[1165, null]], "polars.Series.has_nulls": [[1166, null]], "polars.Series.has_validity": [[1167, null]], "polars.Series.hash": [[1168, null]], "polars.Series.head": [[1169, null]], "polars.Series.hist": [[1170, null]], "polars.Series.implode": [[1171, null]], "polars.Series.index_of": [[1172, null]], "polars.Series.interpolate": [[1173, null]], "polars.Series.interpolate_by": [[1174, null]], "polars.Series.is_between": [[1175, null]], "polars.Series.is_close": [[1176, null]], "polars.Series.is_duplicated": [[1177, null]], "polars.Series.is_empty": [[1178, null]], "polars.Series.is_finite": [[1179, null]], "polars.Series.is_first_distinct": [[1180, null]], "polars.Series.is_in": [[1181, null]], "polars.Series.is_infinite": [[1182, null]], "polars.Series.is_last_distinct": [[1183, null]], "polars.Series.is_nan": [[1184, null]], "polars.Series.is_not_nan": [[1185, null]], "polars.Series.is_not_null": [[1186, null]], "polars.Series.is_null": [[1187, null]], "polars.Series.is_sorted": [[1188, null]], "polars.Series.is_unique": [[1189, null]], "polars.Series.item": [[1190, null]], "polars.Series.kurtosis": [[1191, null]], "polars.Series.last": [[1192, null]], "polars.Series.le": [[1193, null]], "polars.Series.len": [[1194, null]], "polars.Series.limit": [[1195, null]], "polars.Series.list.all": [[1196, null]], "polars.Series.list.any": [[1197, null]], "polars.Series.list.arg_max": [[1198, null]], "polars.Series.list.arg_min": [[1199, null]], "polars.Series.list.concat": [[1200, null]], "polars.Series.list.contains": [[1201, null]], "polars.Series.list.count_matches": [[1202, null]], "polars.Series.list.diff": [[1203, null]], "polars.Series.list.drop_nulls": [[1204, null]], "polars.Series.list.eval": [[1205, null]], "polars.Series.list.explode": [[1206, null]], "polars.Series.list.filter": [[1207, null]], "polars.Series.list.first": [[1208, null]], "polars.Series.list.gather": [[1209, null]], "polars.Series.list.gather_every": [[1210, null]], "polars.Series.list.get": [[1211, null]], "polars.Series.list.head": [[1212, null]], "polars.Series.list.join": [[1213, null]], "polars.Series.list.last": [[1214, null]], "polars.Series.list.len": [[1215, null]], "polars.Series.list.max": [[1216, null]], "polars.Series.list.mean": [[1217, null]], "polars.Series.list.median": [[1218, null]], "polars.Series.list.min": [[1219, null]], "polars.Series.list.n_unique": [[1220, null]], "polars.Series.list.reverse": [[1221, null]], "polars.Series.list.sample": [[1222, null]], "polars.Series.list.set_difference": [[1223, null]], "polars.Series.list.set_intersection": [[1224, null]], "polars.Series.list.set_symmetric_difference": [[1225, null]], "polars.Series.list.set_union": [[1226, null]], "polars.Series.list.shift": [[1227, null]], "polars.Series.list.slice": [[1228, null]], "polars.Series.list.sort": [[1229, null]], "polars.Series.list.std": [[1230, null]], "polars.Series.list.sum": [[1231, null]], "polars.Series.list.tail": [[1232, null]], "polars.Series.list.to_array": [[1233, null]], "polars.Series.list.to_struct": [[1234, null]], "polars.Series.list.unique": [[1235, null]], "polars.Series.list.var": [[1236, null]], "polars.Series.log": [[1237, null]], "polars.Series.log10": [[1238, null]], "polars.Series.log1p": [[1239, null]], "polars.Series.lower_bound": [[1240, null]], "polars.Series.lt": [[1241, null]], "polars.Series.map_elements": [[1242, null]], "polars.Series.max": [[1243, null]], "polars.Series.mean": [[1244, null]], "polars.Series.median": [[1245, null]], "polars.Series.min": [[1246, null]], "polars.Series.mode": [[1247, null]], "polars.Series.n_chunks": [[1248, null]], "polars.Series.n_unique": [[1249, null]], "polars.Series.name": [[1250, null]], "polars.Series.nan_max": [[1251, null]], "polars.Series.nan_min": [[1252, null]], "polars.Series.ne": [[1253, null]], "polars.Series.ne_missing": [[1254, null]], "polars.Series.new_from_index": [[1255, null]], "polars.Series.not_": [[1256, null]], "polars.Series.null_count": [[1257, null]], "polars.Series.pct_change": [[1258, null]], "polars.Series.peak_max": [[1259, null]], "polars.Series.peak_min": [[1260, null]], "polars.Series.pow": [[1261, null]], "polars.Series.product": [[1262, null]], "polars.Series.qcut": [[1263, null]], "polars.Series.quantile": [[1264, null]], "polars.Series.rank": [[1265, null]], "polars.Series.rechunk": [[1266, null]], "polars.Series.reinterpret": [[1267, null]], "polars.Series.rename": [[1268, null]], "polars.Series.repeat_by": [[1269, null]], "polars.Series.replace": [[1270, null]], "polars.Series.replace_strict": [[1271, null]], "polars.Series.reshape": [[1272, null]], "polars.Series.reverse": [[1273, null]], "polars.Series.rle": [[1274, null]], "polars.Series.rle_id": [[1275, null]], "polars.Series.rolling_kurtosis": [[1276, null]], "polars.Series.rolling_map": [[1277, null]], "polars.Series.rolling_max": [[1278, null]], "polars.Series.rolling_max_by": [[1279, null]], "polars.Series.rolling_mean": [[1280, null]], "polars.Series.rolling_mean_by": [[1281, null]], "polars.Series.rolling_median": [[1282, null]], "polars.Series.rolling_median_by": [[1283, null]], "polars.Series.rolling_min": [[1284, null]], "polars.Series.rolling_min_by": [[1285, null]], "polars.Series.rolling_quantile": [[1286, null]], "polars.Series.rolling_quantile_by": [[1287, null]], "polars.Series.rolling_skew": [[1288, null]], "polars.Series.rolling_std": [[1289, null]], "polars.Series.rolling_std_by": [[1290, null]], "polars.Series.rolling_sum": [[1291, null]], "polars.Series.rolling_sum_by": [[1292, null]], "polars.Series.rolling_var": [[1293, null]], "polars.Series.rolling_var_by": [[1294, null]], "polars.Series.round": [[1295, null]], "polars.Series.round_sig_figs": [[1296, null]], "polars.Series.sample": [[1297, null]], "polars.Series.scatter": [[1298, null]], "polars.Series.search_sorted": [[1299, null]], "polars.Series.set": [[1300, null]], "polars.Series.set_sorted": [[1301, null]], "polars.Series.shape": [[1302, null]], "polars.Series.shift": [[1303, null]], "polars.Series.shrink_dtype": [[1304, null]], "polars.Series.shrink_to_fit": [[1305, null]], "polars.Series.shuffle": [[1306, null]], "polars.Series.sign": [[1307, null]], "polars.Series.sin": [[1308, null]], "polars.Series.sinh": [[1309, null]], "polars.Series.skew": [[1310, null]], "polars.Series.slice": [[1311, null]], "polars.Series.sort": [[1312, null]], "polars.Series.sqrt": [[1313, null]], "polars.Series.std": [[1314, null]], "polars.Series.str.concat": [[1315, null]], "polars.Series.str.contains": [[1316, null]], "polars.Series.str.contains_any": [[1317, null]], "polars.Series.str.count_matches": [[1318, null]], "polars.Series.str.decode": [[1319, null]], "polars.Series.str.encode": [[1320, null]], "polars.Series.str.ends_with": [[1321, null]], "polars.Series.str.escape_regex": [[1322, null]], "polars.Series.str.explode": [[1323, null]], "polars.Series.str.extract": [[1324, null]], "polars.Series.str.extract_all": [[1325, null]], "polars.Series.str.extract_groups": [[1326, null]], "polars.Series.str.extract_many": [[1327, null]], "polars.Series.str.find": [[1328, null]], "polars.Series.str.find_many": [[1329, null]], "polars.Series.str.head": [[1330, null]], "polars.Series.str.join": [[1331, null]], "polars.Series.str.json_decode": [[1332, null]], "polars.Series.str.json_path_match": [[1333, null]], "polars.Series.str.len_bytes": [[1334, null]], "polars.Series.str.len_chars": [[1335, null]], "polars.Series.str.normalize": [[1336, null]], "polars.Series.str.pad_end": [[1337, null]], "polars.Series.str.pad_start": [[1338, null]], "polars.Series.str.replace": [[1339, null]], "polars.Series.str.replace_all": [[1340, null]], "polars.Series.str.replace_many": [[1341, null]], "polars.Series.str.reverse": [[1342, null]], "polars.Series.str.slice": [[1343, null]], "polars.Series.str.split": [[1344, null]], "polars.Series.str.split_exact": [[1345, null]], "polars.Series.str.splitn": [[1346, null]], "polars.Series.str.starts_with": [[1347, null]], "polars.Series.str.strip_chars": [[1348, null]], "polars.Series.str.strip_chars_end": [[1349, null]], "polars.Series.str.strip_chars_start": [[1350, null]], "polars.Series.str.strip_prefix": [[1351, null]], "polars.Series.str.strip_suffix": [[1352, null]], "polars.Series.str.strptime": [[1353, null]], "polars.Series.str.tail": [[1354, null]], "polars.Series.str.to_date": [[1355, null]], "polars.Series.str.to_datetime": [[1356, null]], "polars.Series.str.to_decimal": [[1357, null]], "polars.Series.str.to_integer": [[1358, null]], "polars.Series.str.to_lowercase": [[1359, null]], "polars.Series.str.to_time": [[1360, null]], "polars.Series.str.to_titlecase": [[1361, null]], "polars.Series.str.to_uppercase": [[1362, null]], "polars.Series.str.zfill": [[1363, null]], "polars.Series.struct.field": [[1364, null]], "polars.Series.struct.fields": [[1365, null]], "polars.Series.struct.json_encode": [[1366, null]], "polars.Series.struct.rename_fields": [[1367, null]], "polars.Series.struct.schema": [[1368, null]], "polars.Series.struct.unnest": [[1369, null]], "polars.Series.sum": [[1370, null]], "polars.Series.tail": [[1371, null]], "polars.Series.tan": [[1372, null]], "polars.Series.tanh": [[1373, null]], "polars.Series.to_arrow": [[1374, null]], "polars.Series.to_dummies": [[1375, null]], "polars.Series.to_frame": [[1376, null]], "polars.Series.to_init_repr": [[1377, null]], "polars.Series.to_jax": [[1378, null]], "polars.Series.to_list": [[1379, null]], "polars.Series.to_numpy": [[1380, null]], "polars.Series.to_pandas": [[1381, null]], "polars.Series.to_physical": [[1382, null]], "polars.Series.to_torch": [[1383, null]], "polars.Series.top_k": [[1384, null]], "polars.Series.top_k_by": [[1385, null]], "polars.Series.unique": [[1386, null]], "polars.Series.unique_counts": [[1387, null]], "polars.Series.upper_bound": [[1388, null]], "polars.Series.value_counts": [[1389, null]], "polars.Series.var": [[1390, null]], "polars.Series.zip_with": [[1391, null]], "polars.StringCache": [[56, null]], "polars.align_frames": [[57, null]], "polars.all": [[781, null]], "polars.all_horizontal": [[782, null]], "polars.any": [[783, null]], "polars.any_horizontal": [[784, null]], "polars.api.register_dataframe_namespace": [[58, null]], "polars.api.register_expr_namespace": [[59, null]], "polars.api.register_lazyframe_namespace": [[60, null]], "polars.api.register_series_namespace": [[61, null]], "polars.approx_n_unique": [[785, null]], "polars.arange": [[786, null]], "polars.arctan2": [[787, null]], "polars.arctan2d": [[788, null]], "polars.arg_sort_by": [[789, null]], "polars.arg_where": [[790, null]], "polars.build_info": [[62, null]], "polars.business_day_count": [[791, null]], "polars.catalog.unity.CatalogInfo": [[196, null]], "polars.catalog.unity.ColumnInfo": [[197, null]], "polars.catalog.unity.DataSourceFormat": [[198, null]], "polars.catalog.unity.NamespaceInfo": [[199, null]], "polars.catalog.unity.TableInfo": [[200, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[201, null]], "polars.catalog.unity.TableType": [[202, null]], "polars.coalesce": [[792, null]], "polars.col": [[863, null]], "polars.collect_all": [[63, null]], "polars.collect_all_async": [[64, null]], "polars.concat": [[65, null]], "polars.concat_arr": [[793, null]], "polars.concat_list": [[794, null]], "polars.concat_str": [[795, null]], "polars.corr": [[796, null]], "polars.count": [[797, null]], "polars.cov": [[798, null]], "polars.cum_count": [[799, null]], "polars.cum_fold": [[800, null]], "polars.cum_reduce": [[801, null]], "polars.cum_sum": [[802, null]], "polars.cum_sum_horizontal": [[803, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[333, null]], "polars.dataframe.group_by.GroupBy.agg": [[334, null]], "polars.dataframe.group_by.GroupBy.all": [[335, null]], "polars.dataframe.group_by.GroupBy.count": [[336, null]], "polars.dataframe.group_by.GroupBy.first": [[337, null]], "polars.dataframe.group_by.GroupBy.head": [[338, null]], "polars.dataframe.group_by.GroupBy.last": [[339, null]], "polars.dataframe.group_by.GroupBy.len": [[340, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[341, null]], "polars.dataframe.group_by.GroupBy.max": [[342, null]], "polars.dataframe.group_by.GroupBy.mean": [[343, null]], "polars.dataframe.group_by.GroupBy.median": [[344, null]], "polars.dataframe.group_by.GroupBy.min": [[345, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[346, null]], "polars.dataframe.group_by.GroupBy.quantile": [[347, null]], "polars.dataframe.group_by.GroupBy.sum": [[348, null]], "polars.dataframe.group_by.GroupBy.tail": [[349, null]], "polars.datatypes.Array": [[66, null]], "polars.datatypes.Binary": [[67, null]], "polars.datatypes.Boolean": [[68, null]], "polars.datatypes.Categorical": [[69, null]], "polars.datatypes.DataType": [[70, null]], "polars.datatypes.Date": [[71, null]], "polars.datatypes.Datetime": [[72, null]], "polars.datatypes.Decimal": [[73, null]], "polars.datatypes.Duration": [[74, null]], "polars.datatypes.Enum": [[75, null]], "polars.datatypes.Field": [[76, null]], "polars.datatypes.Float32": [[77, null]], "polars.datatypes.Float64": [[78, null]], "polars.datatypes.Int128": [[79, null]], "polars.datatypes.Int16": [[80, null]], "polars.datatypes.Int32": [[81, null]], "polars.datatypes.Int64": [[82, null]], "polars.datatypes.Int8": [[83, null]], "polars.datatypes.List": [[84, null]], "polars.datatypes.Null": [[85, null]], "polars.datatypes.Object": [[86, null]], "polars.datatypes.String": [[87, null]], "polars.datatypes.Struct": [[88, null]], "polars.datatypes.Time": [[89, null]], "polars.datatypes.UInt16": [[90, null]], "polars.datatypes.UInt32": [[91, null]], "polars.datatypes.UInt64": [[92, null]], "polars.datatypes.UInt8": [[93, null]], "polars.datatypes.Unknown": [[94, null]], "polars.datatypes.Utf8": [[95, null]], "polars.date": [[804, null]], "polars.date_range": [[805, null]], "polars.date_ranges": [[806, null]], "polars.datetime": [[807, null]], "polars.datetime_range": [[808, null]], "polars.datetime_ranges": [[809, null]], "polars.defer": [[96, null]], "polars.disable_string_cache": [[97, null]], "polars.dtype_of": [[367, null]], "polars.duration": [[810, null]], "polars.element": [[811, null]], "polars.enable_string_cache": [[98, null]], "polars.escape_regex": [[99, null]], "polars.exceptions.CategoricalRemappingWarning": [[100, null]], "polars.exceptions.ChronoFormatWarning": [[101, null]], "polars.exceptions.ColumnNotFoundError": [[102, null]], "polars.exceptions.ComputeError": [[103, null]], "polars.exceptions.CustomUFuncWarning": [[104, null]], "polars.exceptions.DataOrientationWarning": [[105, null]], "polars.exceptions.DuplicateError": [[106, null]], "polars.exceptions.InvalidOperationError": [[107, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[108, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[109, null]], "polars.exceptions.NoDataError": [[110, null]], "polars.exceptions.NoRowsReturnedError": [[111, null]], "polars.exceptions.OutOfBoundsError": [[112, null]], "polars.exceptions.PanicException": [[113, null]], "polars.exceptions.ParameterCollisionError": [[114, null]], "polars.exceptions.PerformanceWarning": [[115, null]], "polars.exceptions.PolarsError": [[116, null]], "polars.exceptions.PolarsInefficientMapWarning": [[117, null]], "polars.exceptions.PolarsWarning": [[118, null]], "polars.exceptions.RowsError": [[119, null]], "polars.exceptions.SQLInterfaceError": [[120, null]], "polars.exceptions.SQLSyntaxError": [[121, null]], "polars.exceptions.SchemaError": [[122, null]], "polars.exceptions.SchemaFieldNotFoundError": [[123, null]], "polars.exceptions.ShapeError": [[124, null]], "polars.exceptions.StringCacheMismatchError": [[125, null]], "polars.exceptions.StructFieldNotFoundError": [[126, null]], "polars.exceptions.TooManyRowsReturnedError": [[127, null]], "polars.exceptions.UnstableWarning": [[128, null]], "polars.exceptions.UnsuitableSQLError": [[129, null]], "polars.exclude": [[812, null]], "polars.explain_all": [[130, null]], "polars.first": [[813, null]], "polars.fold": [[814, null]], "polars.format": [[815, null]], "polars.from_arrow": [[131, null]], "polars.from_dataframe": [[132, null]], "polars.from_dict": [[133, null]], "polars.from_dicts": [[134, null]], "polars.from_epoch": [[816, null]], "polars.from_numpy": [[135, null]], "polars.from_pandas": [[136, null]], "polars.from_records": [[137, null]], "polars.from_repr": [[138, null]], "polars.get_index_type": [[139, null]], "polars.groups": [[817, null]], "polars.head": [[818, null]], "polars.implode": [[819, null]], "polars.int_range": [[820, null]], "polars.int_ranges": [[821, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[140, null]], "polars.io.parquet.ParquetFieldOverwrites": [[141, null]], "polars.io.partition.BasePartitionContext": [[142, null]], "polars.io.partition.KeyedPartition": [[143, null]], "polars.io.partition.KeyedPartitionContext": [[144, null]], "polars.io.plugins.register_io_source": [[145, null]], "polars.json_normalize": [[146, null]], "polars.last": [[822, null]], "polars.lazyframe.engine_config.GPUEngine": [[962, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[963, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[964, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[965, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[966, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[967, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[968, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[969, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[970, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[971, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[972, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[973, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[974, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[975, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[976, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[977, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[978, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[979, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[980, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[981, null]], "polars.len": [[823, null]], "polars.linear_space": [[824, null]], "polars.linear_spaces": [[825, null]], "polars.lit": [[826, null]], "polars.map_batches": [[827, null]], "polars.map_groups": [[828, null]], "polars.max": [[829, null]], "polars.max_horizontal": [[830, null]], "polars.mean": [[831, null]], "polars.mean_horizontal": [[832, null]], "polars.median": [[833, null]], "polars.min": [[834, null]], "polars.min_horizontal": [[835, null]], "polars.n_unique": [[836, null]], "polars.nth": [[837, null]], "polars.ones": [[838, null]], "polars.plugins.register_plugin_function": [[147, null]], "polars.quantile": [[839, null]], "polars.read_avro": [[148, null]], "polars.read_clipboard": [[149, null]], "polars.read_csv": [[150, null]], "polars.read_csv_batched": [[151, null]], "polars.read_database": [[152, null]], "polars.read_database_uri": [[153, null]], "polars.read_delta": [[154, null]], "polars.read_excel": [[155, null]], "polars.read_ipc": [[156, null]], "polars.read_ipc_schema": [[157, null]], "polars.read_ipc_stream": [[158, null]], "polars.read_json": [[159, null]], "polars.read_ndjson": [[160, null]], "polars.read_ods": [[161, null]], "polars.read_parquet": [[162, null]], "polars.read_parquet_metadata": [[163, null]], "polars.read_parquet_schema": [[164, null]], "polars.reduce": [[840, null]], "polars.repeat": [[841, null]], "polars.rolling_corr": [[842, null]], "polars.rolling_cov": [[843, null]], "polars.row_index": [[844, null]], "polars.scan_csv": [[165, null]], "polars.scan_delta": [[166, null]], "polars.scan_iceberg": [[167, null]], "polars.scan_ipc": [[168, null]], "polars.scan_ndjson": [[169, null]], "polars.scan_parquet": [[170, null]], "polars.scan_pyarrow_dataset": [[171, null]], "polars.select": [[845, null]], "polars.self_dtype": [[368, null]], "polars.set_random_seed": [[172, null]], "polars.show_versions": [[173, null]], "polars.sql": [[846, null]], "polars.sql_expr": [[847, null]], "polars.std": [[848, null]], "polars.struct": [[849, null]], "polars.sum": [[850, null]], "polars.sum_horizontal": [[851, null]], "polars.tail": [[852, null]], "polars.testing.assert_frame_equal": [[174, null]], "polars.testing.assert_frame_not_equal": [[175, null]], "polars.testing.assert_series_equal": [[176, null]], "polars.testing.assert_series_not_equal": [[177, null]], "polars.testing.parametric.column": [[178, null]], "polars.testing.parametric.columns": [[179, null]], "polars.testing.parametric.create_list_strategy": [[180, null]], "polars.testing.parametric.dataframes": [[181, null]], "polars.testing.parametric.dtypes": [[182, null]], "polars.testing.parametric.lists": [[183, null]], "polars.testing.parametric.load_profile": [[184, null]], "polars.testing.parametric.series": [[185, null]], "polars.testing.parametric.set_profile": [[186, null]], "polars.thread_pool_size": [[187, null]], "polars.threadpool_size": [[188, null]], "polars.time": [[853, null]], "polars.time_range": [[854, null]], "polars.time_ranges": [[855, null]], "polars.using_string_cache": [[189, null]], "polars.var": [[856, null]], "polars.when": [[857, null]], "polars.zeros": [[858, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.__setitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_columns", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.match_to_schema", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatype_expr/api/polars.DataType.to_dtype_expr", "reference/datatype_expr/api/polars.DataTypeExpr.arr.inner_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.arr.shape", "reference/datatype_expr/api/polars.DataTypeExpr.arr.width", "reference/datatype_expr/api/polars.DataTypeExpr.list.inner_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_names", "reference/datatype_expr/api/polars.dtype_of", "reference/datatype_expr/api/polars.self_dtype", "reference/datatype_expr/dt_array", "reference/datatype_expr/dt_functions", "reference/datatype_expr/dt_list", "reference/datatype_expr/dt_struct", "reference/datatype_expr/index", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.len", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_close", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.filter", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.row_index", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.__getitem__", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.match_to_schema", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.pipe_with_schema", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.len", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.bottom_k_by", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_close", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.filter", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_max_by", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_mean_by", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_median_by", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_min_by", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_quantile_by", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_std_by", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_sum_by", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.rolling_var_by", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.top_k_by", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.__setitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_columns.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.match_to_schema.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatype_expr/api/polars.DataType.to_dtype_expr.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.inner_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.shape.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.width.rst", "reference/datatype_expr/api/polars.DataTypeExpr.list.inner_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_names.rst", "reference/datatype_expr/api/polars.dtype_of.rst", "reference/datatype_expr/api/polars.self_dtype.rst", "reference/datatype_expr/dt_array.rst", "reference/datatype_expr/dt_functions.rst", "reference/datatype_expr/dt_list.rst", "reference/datatype_expr/dt_struct.rst", "reference/datatype_expr/index.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.len.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_close.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.filter.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.row_index.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.__getitem__.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.match_to_schema.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.pipe_with_schema.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.len.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.bottom_k_by.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_close.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.filter.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_max_by.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_mean_by.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_median_by.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_min_by.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_quantile_by.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_std_by.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_sum_by.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.rolling_var_by.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.top_k_by.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[207, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[995, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[208, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[996, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[209, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1428, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1428, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[210, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.lazyframe method)": [[882, "polars.LazyFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[997, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[190, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[196, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[197, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[199, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[200, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[66, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[67, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[68, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[69, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[70, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[71, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[72, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[73, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[74, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[75, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[76, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[77, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[78, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[79, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[80, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[81, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[82, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[83, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[84, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[85, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[86, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[87, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[88, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[89, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[90, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[91, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[92, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[93, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[94, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[141, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[142, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[143, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[144, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[962, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[52, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[53, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[54, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[961, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[55, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1428, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[178, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.__iter__", false]], "__setitem__() (polars.dataframe method)": [[211, "polars.DataFrame.__setitem__", false]], "abs() (polars.expr method)": [[377, "polars.Expr.abs", false]], "abs() (polars.series method)": [[998, "polars.Series.abs", false]], "add() (polars.expr method)": [[378, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[468, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1090, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[963, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[379, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[380, "polars.Expr.alias", false]], "alias() (polars.series method)": [[999, "polars.Series.alias", false]], "align_frames() (in module polars)": [[57, "polars.align_frames", false]], "all() (in module polars)": [[781, "polars.all", false]], "all() (in module polars.selectors)": [[993, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[381, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[397, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[566, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[964, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[1000, "polars.Series.all", false]], "all() (polars.series.arr method)": [[1015, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1196, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[782, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[993, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[993, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[382, "polars.Expr.and_", false]], "any() (in module polars)": [[783, "polars.any", false]], "any() (polars.expr method)": [[383, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[398, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[567, "polars.Expr.list.any", false]], "any() (polars.series method)": [[1001, "polars.Series.any", false]], "any() (polars.series.arr method)": [[1016, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1197, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[784, "polars.any_horizontal", false]], "append() (polars.expr method)": [[384, "polars.Expr.append", false]], "append() (polars.series method)": [[1002, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[785, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[212, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[385, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[883, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[1003, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[786, "polars.arange", false]], "arccos() (polars.expr method)": [[386, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[1004, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[387, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[1005, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[388, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[1006, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[389, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[1007, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[390, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[1008, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[787, "polars.arctan2", false]], "arctan2d() (in module polars)": [[788, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[391, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[1009, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[392, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[399, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[568, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[1010, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[1017, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1198, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[393, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[400, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[569, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[1011, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[1018, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1199, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[394, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[1012, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[789, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[395, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[1013, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[396, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[1014, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[790, "polars.arg_where", false]], "array (class in polars.datatypes)": [[66, "polars.datatypes.Array", false]], "array() (in module polars.selectors)": [[993, "polars.selectors.array", false]], "as_expr() (polars.selectors.selector method)": [[993, "polars.selectors.Selector.as_expr", false]], "assert_frame_equal() (in module polars.testing)": [[174, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[175, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[176, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[177, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[423, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1040, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[469, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1091, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[142, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[67, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[993, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[431, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1048, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[432, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1049, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[433, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1050, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[434, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1051, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[435, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1052, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[436, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1053, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[437, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1054, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[438, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1055, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[439, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1056, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[68, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[993, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[213, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[440, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[884, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1057, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[441, "polars.Expr.bottom_k_by", false]], "bottom_k_by() (polars.series method)": [[1058, "polars.Series.bottom_k_by", false]], "build_info() (in module polars)": [[62, "polars.build_info", false]], "business_day_count() (in module polars)": [[791, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[993, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[993, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[993, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[885, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[979, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[214, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[442, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[886, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1059, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[470, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1092, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[190, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[196, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[69, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[993, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[100, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[448, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1068, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[449, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1069, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[471, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1093, "polars.Series.dt.century", false]], "chronoformatwarning": [[101, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1070, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[215, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[887, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1071, "polars.Series.clear", false]], "clip() (polars.expr method)": [[450, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1072, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[216, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[888, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1073, "polars.Series.clone", false]], "coalesce() (in module polars)": [[792, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[889, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[63, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[64, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[890, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[217, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[891, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[178, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[197, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[102, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[218, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[892, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[472, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1094, "polars.Series.dt.combine", false]], "computeerror": [[103, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[65, "polars.concat", false]], "concat() (polars.expr.list method)": [[570, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[711, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1200, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1315, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[793, "polars.concat_arr", false]], "concat_list() (in module polars)": [[794, "polars.concat_list", false]], "concat_str() (in module polars)": [[795, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[993, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[401, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[424, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[571, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[712, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[1019, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1041, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1201, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1316, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[713, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1317, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[473, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1095, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[796, "polars.corr", false]], "corr() (polars.dataframe method)": [[219, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[451, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1074, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[452, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1075, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[453, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1076, "polars.Series.cot", false]], "count() (in module polars)": [[797, "polars.count", false]], "count() (polars.dataframe method)": [[220, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[454, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[893, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[965, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1077, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[402, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[572, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[714, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[1020, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1202, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1318, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[798, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[799, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[455, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1078, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[800, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[456, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1079, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[457, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1080, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[458, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1081, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[801, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[802, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[459, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1082, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[803, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[460, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1083, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[104, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[461, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1084, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[105, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[198, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[70, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[71, "polars.datatypes.Date", false]], "date() (in module polars)": [[804, "polars.date", false]], "date() (in module polars.selectors)": [[993, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[474, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1096, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[805, "polars.date_range", false]], "date_ranges() (in module polars)": [[806, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[72, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[807, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[993, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[475, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1097, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[808, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[809, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[476, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1098, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[73, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[993, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[425, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[715, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1042, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1319, "polars.Series.str.decode", false]], "defer() (in module polars)": [[96, "polars.defer", false]], "degrees() (polars.expr method)": [[462, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[221, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[894, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1085, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[222, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[463, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[895, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[464, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[573, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1086, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1203, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[993, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[97, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[465, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1087, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[223, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[896, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[224, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[225, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[466, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[897, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1088, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[226, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[467, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[574, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[898, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1089, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1204, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[477, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1099, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1140, "polars.Series.dtype", false]], "dtype_of() (in module polars)": [[367, "polars.dtype_of", false]], "dtypes (polars.dataframe property)": [[227, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[899, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[106, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[74, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[810, "polars.duration", false]], "duration() (in module polars.selectors)": [[993, "polars.selectors.duration", false]], "element() (in module polars)": [[811, "polars.element", false]], "enable_string_cache() (in module polars)": [[98, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[426, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[716, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1043, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1320, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[993, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[427, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[443, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[717, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1044, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1060, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1321, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[514, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1141, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[75, "polars.datatypes.Enum", false]], "enum() (in module polars.selectors)": [[993, "polars.selectors.enum", false]], "epoch() (polars.expr.dt method)": [[478, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1100, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[515, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[617, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1142, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[516, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1143, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[228, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1144, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[99, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[718, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1322, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[229, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1145, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[575, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1205, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[517, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1146, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[518, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1147, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[519, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1148, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[520, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1149, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[812, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[993, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[521, "polars.Expr.exclude", false]], "exclude() (polars.selectors.selector method)": [[993, "polars.selectors.Selector.exclude", false]], "execute() (polars.sqlcontext method)": [[1409, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1410, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[522, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1150, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[993, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[900, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[130, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[230, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[523, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[403, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[576, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[719, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[901, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1151, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[1021, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1206, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1323, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[231, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1152, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[524, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1153, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[720, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1324, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[721, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1325, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[722, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1326, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[723, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1327, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[980, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[981, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[76, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[760, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1364, "polars.Series.struct.field", false]], "field_dtype() (polars.datatypeexpr.struct method)": [[365, "polars.DataTypeExpr.struct.field_dtype", false]], "field_names() (polars.datatypeexpr.struct method)": [[366, "polars.DataTypeExpr.struct.field_names", false]], "fields (polars.series.struct attribute)": [[1365, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[232, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[525, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[902, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1154, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[233, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[526, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[903, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1155, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[234, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[527, "polars.Expr.filter", false]], "filter() (polars.expr.list method)": [[577, "polars.Expr.list.filter", false]], "filter() (polars.lazyframe method)": [[904, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1156, "polars.Series.filter", false]], "filter() (polars.series.list method)": [[1207, "polars.Series.list.filter", false]], "find() (polars.expr.str method)": [[724, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1328, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[725, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1329, "polars.Series.str.find_many", false]], "first() (in module polars)": [[813, "polars.first", false]], "first() (in module polars.selectors)": [[993, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[528, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[404, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[578, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[905, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[966, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1157, "polars.Series.first", false]], "first() (polars.series.arr method)": [[1022, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1208, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[235, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1158, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[529, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[993, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[77, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[78, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[530, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1159, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[531, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[814, "polars.fold", false]], "fold() (polars.dataframe method)": [[236, "polars.DataFrame.fold", false]], "format() (in module polars)": [[815, "polars.format", false]], "forward_fill() (polars.expr method)": [[532, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1160, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[131, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[132, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[133, "polars.from_dict", false]], "from_dicts() (in module polars)": [[134, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[816, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[533, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[135, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[136, "polars.from_pandas", false]], "from_records() (in module polars)": [[137, "polars.from_records", false]], "from_repr() (in module polars)": [[138, "polars.from_repr", false]], "gather() (polars.expr method)": [[534, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[579, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1161, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1209, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[237, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[535, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[580, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[906, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1162, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1210, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[536, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1163, "polars.Series.ge", false]], "get() (polars.expr method)": [[537, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[405, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[581, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[1023, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1211, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[444, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1061, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1164, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[238, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[239, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[240, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[139, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[201, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[191, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[241, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[962, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[242, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[907, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[243, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[908, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[817, "polars.groups", false]], "gt() (polars.expr method)": [[538, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1165, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[618, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[539, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1166, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1167, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[540, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1168, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[244, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[818, "polars.head", false]], "head() (polars.dataframe method)": [[245, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[541, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[582, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[726, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[909, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[967, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1169, "polars.Series.head", false]], "head() (polars.series.list method)": [[1212, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1330, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[246, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[542, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1170, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[479, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1101, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[247, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[819, "polars.implode", false]], "implode() (polars.expr method)": [[543, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1171, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[544, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1172, "polars.Series.index_of", false]], "inner_dtype() (polars.datatypeexpr.arr method)": [[361, "polars.DataTypeExpr.arr.inner_dtype", false]], "inner_dtype() (polars.datatypeexpr.list method)": [[364, "polars.DataTypeExpr.list.inner_dtype", false]], "insert_column() (polars.dataframe method)": [[248, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[545, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[910, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[79, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[80, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[81, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[82, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[83, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[820, "polars.int_range", false]], "int_ranges() (in module polars)": [[821, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[993, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[249, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[546, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[911, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1173, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[547, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1174, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[107, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[548, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1175, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[480, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1102, "polars.Series.dt.is_business_day", false]], "is_close() (polars.expr method)": [[549, "polars.Expr.is_close", false]], "is_close() (polars.series method)": [[1176, "polars.Series.is_close", false]], "is_column() (polars.expr.meta method)": [[619, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[620, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[250, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[550, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1177, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[251, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1178, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[551, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1179, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[552, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1180, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[553, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1181, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[554, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1182, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[555, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1183, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[481, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1103, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[621, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1062, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[556, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1184, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[557, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1185, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[558, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1186, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[559, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1187, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[622, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[993, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1188, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[252, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[560, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1189, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[482, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1104, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[253, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1190, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[254, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[255, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[256, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[257, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[406, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[583, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[727, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[912, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[1024, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1213, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1331, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[258, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[913, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[259, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[914, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[728, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1332, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[761, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1366, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[146, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[729, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1333, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[637, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[143, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[144, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[561, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1191, "polars.Series.kurtosis", false]], "last() (in module polars)": [[822, "polars.last", false]], "last() (in module polars.selectors)": [[993, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[562, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[407, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[584, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[915, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[968, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1192, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1025, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1214, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[260, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[916, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[563, "polars.Expr.le", false]], "le() (polars.series method)": [[1193, "polars.Series.le", false]], "len() (in module polars)": [[823, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[564, "polars.Expr.len", false]], "len() (polars.expr.arr method)": [[408, "polars.Expr.arr.len", false]], "len() (polars.expr.list method)": [[585, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[969, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1194, "polars.Series.len", false]], "len() (polars.series.arr method)": [[1026, "polars.Series.arr.len", false]], "len() (polars.series.list method)": [[1215, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[445, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[730, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1063, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1334, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[446, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[731, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1064, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1335, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[261, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[565, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[917, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1195, "polars.Series.limit", false]], "linear_space() (in module polars)": [[824, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[825, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[84, "polars.datatypes.List", false]], "list() (in module polars.selectors)": [[993, "polars.selectors.list", false]], "list_catalogs() (polars.catalog method)": [[192, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[193, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[194, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[826, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[607, "polars.Expr.log", false]], "log() (polars.series method)": [[1237, "polars.Series.log", false]], "log10() (polars.expr method)": [[608, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1238, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[609, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1239, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[610, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1240, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[611, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1241, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[638, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[827, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[612, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[918, "polars.LazyFrame.map_batches", false]], "map_columns() (polars.dataframe method)": [[262, "polars.DataFrame.map_columns", false]], "map_elements() (polars.expr method)": [[613, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1242, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[639, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[828, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[970, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[263, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[108, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "match_to_schema() (polars.dataframe method)": [[264, "polars.DataFrame.match_to_schema", false]], "match_to_schema() (polars.lazyframe method)": [[919, "polars.LazyFrame.match_to_schema", false]], "matches() (in module polars.selectors)": [[993, "polars.selectors.matches", false]], "max() (in module polars)": [[829, "polars.max", false]], "max() (polars.dataframe method)": [[265, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[614, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[409, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[586, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[920, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[971, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1243, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1027, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1105, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1216, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[830, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[266, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[831, "polars.mean", false]], "mean() (polars.dataframe method)": [[267, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[615, "polars.Expr.mean", false]], "mean() (polars.expr.arr method)": [[410, "polars.Expr.arr.mean", false]], "mean() (polars.expr.list method)": [[587, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[921, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[972, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1244, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1106, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1217, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[832, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[268, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[833, "polars.median", false]], "median() (polars.dataframe method)": [[269, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[616, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[411, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[588, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[922, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[973, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1245, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1028, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1107, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1218, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[270, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[923, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[271, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[924, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[483, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1108, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[484, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1109, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[485, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1110, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[834, "polars.min", false]], "min() (polars.dataframe method)": [[272, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[632, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[412, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[589, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[925, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[974, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1246, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1029, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1111, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1219, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[835, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[273, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[486, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1112, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[633, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[634, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1247, "polars.Series.mode", false]], "module": [[993, "module-polars.selectors", false]], "moduleupgraderequirederror": [[109, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[487, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1113, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[488, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1114, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[489, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1115, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[635, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[274, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1248, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[836, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[275, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[636, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[413, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[590, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[975, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1249, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1030, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1220, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1250, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[199, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[646, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1251, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[647, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1252, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[490, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1116, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[648, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[623, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1253, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[649, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1254, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[650, "polars.Expr.neg", false]], "nested() (in module polars.selectors)": [[993, "polars.selectors.nested", false]], "new_from_index() (polars.series method)": [[1255, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[140, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[110, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[732, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1336, "polars.Series.str.normalize", false]], "norowsreturnederror": [[111, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[651, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1256, "polars.Series.not_", false]], "nth() (in module polars)": [[837, "polars.nth", false]], "null (class in polars.datatypes)": [[85, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[276, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[652, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[926, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1257, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[993, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[86, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[491, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1117, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[838, "polars.ones", false]], "or_() (polars.expr method)": [[653, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[492, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1118, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[112, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[624, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[654, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[733, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1337, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[734, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1338, "polars.Series.str.pad_start", false]], "panicexception": [[113, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[114, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[141, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[277, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[52, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[53, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[54, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[655, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1258, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[656, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1259, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[657, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1260, "polars.Series.peak_min", false]], "performancewarning": [[115, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[278, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[658, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[927, "polars.LazyFrame.pipe", false]], "pipe_with_schema() (polars.lazyframe method)": [[928, "polars.LazyFrame.pipe_with_schema", false]], "pivot() (polars.dataframe method)": [[279, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[358, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1405, "polars.Series.plot", false]], "polars.selectors": [[993, "module-polars.selectors", false]], "polarserror": [[116, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[117, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[118, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[625, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[659, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1261, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[640, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[641, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[280, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[660, "polars.Expr.product", false]], "product() (polars.series method)": [[1262, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[929, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[661, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1263, "polars.Series.qcut", false]], "quantile() (in module polars)": [[839, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[281, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[347, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[662, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[930, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[976, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1264, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[493, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1119, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[961, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[663, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[664, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1265, "polars.Series.rank", false]], "read_avro() (in module polars)": [[148, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[149, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[150, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[151, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[152, "polars.read_database", false]], "read_database_uri() (in module polars)": [[153, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[154, "polars.read_delta", false]], "read_excel() (in module polars)": [[155, "polars.read_excel", false]], "read_ipc() (in module polars)": [[156, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[157, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[158, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[159, "polars.read_json", false]], "read_ndjson() (in module polars)": [[160, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[161, "polars.read_ods", false]], "read_parquet() (in module polars)": [[162, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[163, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[164, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[282, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[665, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1266, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[840, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1411, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[58, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[59, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1412, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[145, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[60, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1413, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[147, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[61, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[666, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[428, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1267, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1045, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[931, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[283, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[932, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[284, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[933, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1268, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[762, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1367, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[841, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[667, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1269, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[668, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[494, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[735, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1270, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1120, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1339, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[736, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1340, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[285, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[737, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1341, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[669, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1271, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[495, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1121, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[670, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1272, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[286, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[671, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[414, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[591, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[738, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[934, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1273, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1031, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1221, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1342, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[672, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1274, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[673, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1275, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[287, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[674, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[935, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[842, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[843, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[675, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1276, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[676, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1277, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[677, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1278, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[678, "polars.Expr.rolling_max_by", false]], "rolling_max_by() (polars.series method)": [[1279, "polars.Series.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[679, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1280, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[680, "polars.Expr.rolling_mean_by", false]], "rolling_mean_by() (polars.series method)": [[1281, "polars.Series.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[681, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1282, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[682, "polars.Expr.rolling_median_by", false]], "rolling_median_by() (polars.series method)": [[1283, "polars.Series.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[683, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1284, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[684, "polars.Expr.rolling_min_by", false]], "rolling_min_by() (polars.series method)": [[1285, "polars.Series.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[685, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1286, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[686, "polars.Expr.rolling_quantile_by", false]], "rolling_quantile_by() (polars.series method)": [[1287, "polars.Series.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[687, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1288, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[688, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1289, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[689, "polars.Expr.rolling_std_by", false]], "rolling_std_by() (polars.series method)": [[1290, "polars.Series.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[690, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1291, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[691, "polars.Expr.rolling_sum_by", false]], "rolling_sum_by() (polars.series method)": [[1292, "polars.Series.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[692, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1293, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[693, "polars.Expr.rolling_var_by", false]], "rolling_var_by() (polars.series method)": [[1294, "polars.Series.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[626, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[694, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[496, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1295, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1122, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[695, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1296, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[288, "polars.DataFrame.row", false]], "row_index() (in module polars)": [[844, "polars.row_index", false]], "rows() (polars.dataframe method)": [[289, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[290, "polars.DataFrame.rows_by_key", false]], "rowserror": [[119, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[291, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[696, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[592, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1297, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1222, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[165, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[166, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[167, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[168, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[169, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[170, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[171, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[195, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[55, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1298, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[292, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[936, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1368, "polars.Series.struct.schema", false]], "schemaerror": [[122, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[123, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[697, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1299, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[497, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1123, "polars.Series.dt.second", false]], "select() (in module polars)": [[845, "polars.select", false]], "select() (polars.dataframe method)": [[293, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[937, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[294, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[938, "polars.LazyFrame.select_seq", false]], "selector (class in polars.selectors)": [[993, "polars.selectors.Selector", false]], "self_dtype() (in module polars)": [[368, "polars.self_dtype", false]], "serialize() (polars.dataframe method)": [[295, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[627, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[939, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1300, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[593, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1223, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[594, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1224, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[172, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[296, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[698, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[940, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1301, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[595, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1225, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[596, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1226, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[297, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1302, "polars.Series.shape", false]], "shape() (polars.datatypeexpr.arr method)": [[362, "polars.DataTypeExpr.arr.shape", false]], "shapeerror": [[124, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[298, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[699, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[415, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[597, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[941, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1303, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1032, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1227, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[628, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[942, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[173, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[700, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1304, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[299, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1305, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[701, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1306, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[702, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1307, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[993, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[703, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1308, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[704, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1309, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[429, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1046, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[705, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1310, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[300, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[706, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[598, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[739, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[943, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1311, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1228, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1343, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[301, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[707, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[416, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[599, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[944, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1312, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1033, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1229, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[708, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[740, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1344, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[741, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1345, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[742, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1346, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[846, "polars.sql", false]], "sql() (polars.dataframe method)": [[302, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[945, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[847, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1428, "polars.SQLContext", false]], "sqlinterfaceerror": [[120, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[121, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[709, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1313, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[993, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[430, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[447, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[743, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1047, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1065, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1347, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[848, "polars.std", false]], "std() (polars.dataframe method)": [[303, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[710, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[417, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[600, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[946, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1314, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1034, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1230, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[498, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1124, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[87, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[993, "polars.selectors.string", false]], "stringcache (class in polars)": [[56, "polars.StringCache", false]], "stringcachemismatcherror": [[125, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[744, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1348, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[745, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1349, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[746, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1350, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[747, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1351, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[748, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1352, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[749, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1353, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[88, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[849, "polars.struct", false]], "struct() (in module polars.selectors)": [[993, "polars.selectors.struct", false]], "structfieldnotfounderror": [[126, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[359, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[765, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[642, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[643, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[850, "polars.sum", false]], "sum() (polars.dataframe method)": [[304, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[348, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[766, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[418, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[601, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[947, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[977, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1370, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1035, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1231, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[851, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[305, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[200, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1414, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[202, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[852, "polars.tail", false]], "tail() (polars.dataframe method)": [[306, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[349, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[767, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[602, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[750, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[948, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[978, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1371, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1232, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1354, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[768, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1372, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[769, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1373, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[993, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[187, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[188, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[89, "polars.datatypes.Time", false]], "time() (in module polars)": [[853, "polars.time", false]], "time() (in module polars.selectors)": [[993, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[499, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1125, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[854, "polars.time_range", false]], "time_ranges() (in module polars)": [[855, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[500, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1126, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[603, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1233, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[307, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1374, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[751, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1355, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[752, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1356, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[753, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1357, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[308, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[309, "polars.DataFrame.to_dicts", false]], "to_dtype_expr() (polars.datatype method)": [[360, "polars.DataType.to_dtype_expr", false]], "to_dummies() (polars.dataframe method)": [[310, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1375, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1376, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[311, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1377, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[754, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1358, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[312, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1378, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[419, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1379, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1036, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1066, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[644, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[755, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1359, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[313, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1380, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[314, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1381, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[770, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1382, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[315, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[501, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1127, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[316, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[420, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[604, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1037, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1234, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[756, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1360, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[757, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1361, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[317, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1383, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[645, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[758, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1362, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[127, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[318, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[771, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[949, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1384, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[772, "polars.Expr.top_k_by", false]], "top_k_by() (polars.series method)": [[1385, "polars.Series.top_k_by", false]], "total_days() (polars.expr.dt method)": [[502, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1128, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[503, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1129, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[504, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1130, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[505, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1131, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[506, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1132, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[507, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1133, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[508, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1134, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[319, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[629, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[773, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[509, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1135, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[90, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[91, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[92, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[93, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[630, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[320, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[774, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[421, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[605, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[950, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1386, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1038, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1235, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[775, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1387, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[94, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[321, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[763, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[951, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1369, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[322, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[952, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1415, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[993, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[128, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[323, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[129, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[324, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[953, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[776, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1388, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[325, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1067, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[189, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[95, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[777, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1389, "polars.Series.value_counts", false]], "var() (in module polars)": [[856, "polars.var", false]], "var() (polars.dataframe method)": [[326, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[778, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[422, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[606, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[954, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1390, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1039, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1236, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[327, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[510, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1136, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[511, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1137, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[857, "polars.when", false]], "where() (polars.expr method)": [[779, "polars.Expr.where", false]], "width (polars.dataframe property)": [[328, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[955, "polars.LazyFrame.width", false]], "width() (polars.datatypeexpr.arr method)": [[363, "polars.DataTypeExpr.arr.width", false]], "with_columns() (polars.dataframe method)": [[329, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[956, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[330, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[957, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[958, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[764, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[331, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[959, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[332, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[960, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[512, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1138, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[631, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[780, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[513, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1139, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[858, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[759, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1363, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1391, "polars.Series.zip_with", false]]}, "objects": {"polars": [[190, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [52, 0, 1, "", "PartitionByKey"], [53, 0, 1, "", "PartitionMaxSize"], [54, 0, 1, "", "PartitionParted"], [961, 0, 1, "", "QueryOptFlags"], [1428, 0, 1, "", "SQLContext"], [55, 0, 1, "", "ScanCastOptions"], [56, 0, 1, "", "StringCache"], [57, 4, 1, "", "align_frames"], [781, 4, 1, "", "all"], [782, 4, 1, "", "all_horizontal"], [783, 4, 1, "", "any"], [784, 4, 1, "", "any_horizontal"], [785, 4, 1, "", "approx_n_unique"], [786, 4, 1, "", "arange"], [787, 4, 1, "", "arctan2"], [788, 4, 1, "", "arctan2d"], [789, 4, 1, "", "arg_sort_by"], [790, 4, 1, "", "arg_where"], [62, 4, 1, "", "build_info"], [791, 4, 1, "", "business_day_count"], [792, 4, 1, "", "coalesce"], [63, 4, 1, "", "collect_all"], [64, 4, 1, "", "collect_all_async"], [65, 4, 1, "", "concat"], [793, 4, 1, "", "concat_arr"], [794, 4, 1, "", "concat_list"], [795, 4, 1, "", "concat_str"], [796, 4, 1, "", "corr"], [797, 4, 1, "", "count"], [798, 4, 1, "", "cov"], [799, 4, 1, "", "cum_count"], [800, 4, 1, "", "cum_fold"], [801, 4, 1, "", "cum_reduce"], [802, 4, 1, "", "cum_sum"], [803, 4, 1, "", "cum_sum_horizontal"], [804, 4, 1, "", "date"], [805, 4, 1, "", "date_range"], [806, 4, 1, "", "date_ranges"], [807, 4, 1, "", "datetime"], [808, 4, 1, "", "datetime_range"], [809, 4, 1, "", "datetime_ranges"], [96, 4, 1, "", "defer"], [97, 4, 1, "", "disable_string_cache"], [367, 4, 1, "", "dtype_of"], [810, 4, 1, "", "duration"], [811, 4, 1, "", "element"], [98, 4, 1, "", "enable_string_cache"], [99, 4, 1, "", "escape_regex"], [812, 4, 1, "", "exclude"], [130, 4, 1, "", "explain_all"], [813, 4, 1, "", "first"], [814, 4, 1, "", "fold"], [815, 4, 1, "", "format"], [131, 4, 1, "", "from_arrow"], [132, 4, 1, "", "from_dataframe"], [133, 4, 1, "", "from_dict"], [134, 4, 1, "", "from_dicts"], [816, 4, 1, "", "from_epoch"], [135, 4, 1, "", "from_numpy"], [136, 4, 1, "", "from_pandas"], [137, 4, 1, "", "from_records"], [138, 4, 1, "", "from_repr"], [139, 4, 1, "", "get_index_type"], [817, 4, 1, "", "groups"], [818, 4, 1, "", "head"], [819, 4, 1, "", "implode"], [820, 4, 1, "", "int_range"], [821, 4, 1, "", "int_ranges"], [146, 4, 1, "", "json_normalize"], [822, 4, 1, "", "last"], [823, 4, 1, "", "len"], [824, 4, 1, "", "linear_space"], [825, 4, 1, "", "linear_spaces"], [826, 4, 1, "", "lit"], [827, 4, 1, "", "map_batches"], [828, 4, 1, "", "map_groups"], [829, 4, 1, "", "max"], [830, 4, 1, "", "max_horizontal"], [831, 4, 1, "", "mean"], [832, 4, 1, "", "mean_horizontal"], [833, 4, 1, "", "median"], [834, 4, 1, "", "min"], [835, 4, 1, "", "min_horizontal"], [836, 4, 1, "", "n_unique"], [837, 4, 1, "", "nth"], [838, 4, 1, "", "ones"], [839, 4, 1, "", "quantile"], [148, 4, 1, "", "read_avro"], [149, 4, 1, "", "read_clipboard"], [150, 4, 1, "", "read_csv"], [151, 4, 1, "", "read_csv_batched"], [152, 4, 1, "", "read_database"], [153, 4, 1, "", "read_database_uri"], [154, 4, 1, "", "read_delta"], [155, 4, 1, "", "read_excel"], [156, 4, 1, "", "read_ipc"], [157, 4, 1, "", "read_ipc_schema"], [158, 4, 1, "", "read_ipc_stream"], [159, 4, 1, "", "read_json"], [160, 4, 1, "", "read_ndjson"], [161, 4, 1, "", "read_ods"], [162, 4, 1, "", "read_parquet"], [163, 4, 1, "", "read_parquet_metadata"], [164, 4, 1, "", "read_parquet_schema"], [840, 4, 1, "", "reduce"], [841, 4, 1, "", "repeat"], [842, 4, 1, "", "rolling_corr"], [843, 4, 1, "", "rolling_cov"], [844, 4, 1, "", "row_index"], [165, 4, 1, "", "scan_csv"], [166, 4, 1, "", "scan_delta"], [167, 4, 1, "", "scan_iceberg"], [168, 4, 1, "", "scan_ipc"], [169, 4, 1, "", "scan_ndjson"], [170, 4, 1, "", "scan_parquet"], [171, 4, 1, "", "scan_pyarrow_dataset"], [845, 4, 1, "", "select"], [993, 7, 0, "-", "selectors"], [368, 4, 1, "", "self_dtype"], [172, 4, 1, "", "set_random_seed"], [173, 4, 1, "", "show_versions"], [846, 4, 1, "", "sql"], [847, 4, 1, "", "sql_expr"], [848, 4, 1, "", "std"], [849, 4, 1, "", "struct"], [850, 4, 1, "", "sum"], [851, 4, 1, "", "sum_horizontal"], [852, 4, 1, "", "tail"], [187, 4, 1, "", "thread_pool_size"], [188, 4, 1, "", "threadpool_size"], [853, 4, 1, "", "time"], [854, 4, 1, "", "time_range"], [855, 4, 1, "", "time_ranges"], [189, 4, 1, "", "using_string_cache"], [856, 4, 1, "", "var"], [857, 4, 1, "", "when"], [858, 4, 1, "", "zeros"]], "polars.Catalog": [[190, 1, 1, "", "__init__"], [191, 1, 1, "", "get_table_info"], [192, 1, 1, "", "list_catalogs"], [193, 1, 1, "", "list_namespaces"], [194, 1, 1, "", "list_tables"], [195, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[207, 1, 1, "", "__array__"], [208, 1, 1, "", "__arrow_c_stream__"], [209, 1, 1, "", "__dataframe__"], [210, 1, 1, "", "__getitem__"], [211, 1, 1, "", "__setitem__"], [212, 1, 1, "", "approx_n_unique"], [213, 1, 1, "", "bottom_k"], [214, 1, 1, "", "cast"], [215, 1, 1, "", "clear"], [216, 1, 1, "", "clone"], [217, 1, 1, "", "collect_schema"], [218, 2, 1, "", "columns"], [219, 1, 1, "", "corr"], [220, 1, 1, "", "count"], [221, 1, 1, "", "describe"], [222, 1, 1, "", "deserialize"], [223, 1, 1, "", "drop"], [224, 1, 1, "", "drop_in_place"], [225, 1, 1, "", "drop_nans"], [226, 1, 1, "", "drop_nulls"], [227, 2, 1, "", "dtypes"], [228, 1, 1, "", "equals"], [229, 1, 1, "", "estimated_size"], [230, 1, 1, "", "explode"], [231, 1, 1, "", "extend"], [232, 1, 1, "", "fill_nan"], [233, 1, 1, "", "fill_null"], [234, 1, 1, "", "filter"], [235, 2, 1, "", "flags"], [236, 1, 1, "", "fold"], [237, 1, 1, "", "gather_every"], [238, 1, 1, "", "get_column"], [239, 1, 1, "", "get_column_index"], [240, 1, 1, "", "get_columns"], [241, 1, 1, "", "glimpse"], [242, 1, 1, "", "group_by"], [243, 1, 1, "", "group_by_dynamic"], [244, 1, 1, "", "hash_rows"], [245, 1, 1, "", "head"], [246, 2, 1, "", "height"], [247, 1, 1, "", "hstack"], [248, 1, 1, "", "insert_column"], [249, 1, 1, "", "interpolate"], [250, 1, 1, "", "is_duplicated"], [251, 1, 1, "", "is_empty"], [252, 1, 1, "", "is_unique"], [253, 1, 1, "", "item"], [254, 1, 1, "", "iter_columns"], [255, 1, 1, "", "iter_rows"], [256, 1, 1, "", "iter_slices"], [257, 1, 1, "", "join"], [258, 1, 1, "", "join_asof"], [259, 1, 1, "", "join_where"], [260, 1, 1, "", "lazy"], [261, 1, 1, "", "limit"], [262, 1, 1, "", "map_columns"], [263, 1, 1, "", "map_rows"], [264, 1, 1, "", "match_to_schema"], [265, 1, 1, "", "max"], [266, 1, 1, "", "max_horizontal"], [267, 1, 1, "", "mean"], [268, 1, 1, "", "mean_horizontal"], [269, 1, 1, "", "median"], [270, 1, 1, "", "melt"], [271, 1, 1, "", "merge_sorted"], [272, 1, 1, "", "min"], [273, 1, 1, "", "min_horizontal"], [274, 1, 1, "", "n_chunks"], [275, 1, 1, "", "n_unique"], [276, 1, 1, "", "null_count"], [277, 1, 1, "", "partition_by"], [278, 1, 1, "", "pipe"], [279, 1, 1, "", "pivot"], [358, 2, 1, "", "plot"], [280, 1, 1, "", "product"], [281, 1, 1, "", "quantile"], [282, 1, 1, "", "rechunk"], [283, 1, 1, "", "remove"], [284, 1, 1, "", "rename"], [285, 1, 1, "", "replace_column"], [286, 1, 1, "", "reverse"], [287, 1, 1, "", "rolling"], [288, 1, 1, "", "row"], [289, 1, 1, "", "rows"], [290, 1, 1, "", "rows_by_key"], [291, 1, 1, "", "sample"], [292, 2, 1, "", "schema"], [293, 1, 1, "", "select"], [294, 1, 1, "", "select_seq"], [295, 1, 1, "", "serialize"], [296, 1, 1, "", "set_sorted"], [297, 2, 1, "", "shape"], [298, 1, 1, "", "shift"], [299, 1, 1, "", "shrink_to_fit"], [300, 1, 1, "", "slice"], [301, 1, 1, "", "sort"], [302, 1, 1, "", "sql"], [303, 1, 1, "", "std"], [359, 2, 1, "", "style"], [304, 1, 1, "", "sum"], [305, 1, 1, "", "sum_horizontal"], [306, 1, 1, "", "tail"], [307, 1, 1, "", "to_arrow"], [308, 1, 1, "", "to_dict"], [309, 1, 1, "", "to_dicts"], [310, 1, 1, "", "to_dummies"], [311, 1, 1, "", "to_init_repr"], [312, 1, 1, "", "to_jax"], [313, 1, 1, "", "to_numpy"], [314, 1, 1, "", "to_pandas"], [315, 1, 1, "", "to_series"], [316, 1, 1, "", "to_struct"], [317, 1, 1, "", "to_torch"], [318, 1, 1, "", "top_k"], [319, 1, 1, "", "transpose"], [320, 1, 1, "", "unique"], [321, 1, 1, "", "unnest"], [322, 1, 1, "", "unpivot"], [323, 1, 1, "", "unstack"], [324, 1, 1, "", "update"], [325, 1, 1, "", "upsample"], [326, 1, 1, "", "var"], [327, 1, 1, "", "vstack"], [328, 2, 1, "", "width"], [329, 1, 1, "", "with_columns"], [330, 1, 1, "", "with_columns_seq"], [331, 1, 1, "", "with_row_count"], [332, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.DataType": [[360, 1, 1, "", "to_dtype_expr"]], "polars.DataTypeExpr.arr": [[361, 1, 1, "", "inner_dtype"], [362, 1, 1, "", "shape"], [363, 1, 1, "", "width"]], "polars.DataTypeExpr.list": [[364, 1, 1, "", "inner_dtype"]], "polars.DataTypeExpr.struct": [[365, 1, 1, "", "field_dtype"], [366, 1, 1, "", "field_names"]], "polars.Expr": [[377, 1, 1, "", "abs"], [378, 1, 1, "", "add"], [379, 1, 1, "", "agg_groups"], [380, 1, 1, "", "alias"], [381, 1, 1, "", "all"], [382, 1, 1, "", "and_"], [383, 1, 1, "", "any"], [384, 1, 1, "", "append"], [385, 1, 1, "", "approx_n_unique"], [386, 1, 1, "", "arccos"], [387, 1, 1, "", "arccosh"], [388, 1, 1, "", "arcsin"], [389, 1, 1, "", "arcsinh"], [390, 1, 1, "", "arctan"], [391, 1, 1, "", "arctanh"], [392, 1, 1, "", "arg_max"], [393, 1, 1, "", "arg_min"], [394, 1, 1, "", "arg_sort"], [395, 1, 1, "", "arg_true"], [396, 1, 1, "", "arg_unique"], [423, 1, 1, "", "backward_fill"], [431, 1, 1, "", "bitwise_and"], [432, 1, 1, "", "bitwise_count_ones"], [433, 1, 1, "", "bitwise_count_zeros"], [434, 1, 1, "", "bitwise_leading_ones"], [435, 1, 1, "", "bitwise_leading_zeros"], [436, 1, 1, "", "bitwise_or"], [437, 1, 1, "", "bitwise_trailing_ones"], [438, 1, 1, "", "bitwise_trailing_zeros"], [439, 1, 1, "", "bitwise_xor"], [440, 1, 1, "", "bottom_k"], [441, 1, 1, "", "bottom_k_by"], [442, 1, 1, "", "cast"], [448, 1, 1, "", "cbrt"], [449, 1, 1, "", "ceil"], [450, 1, 1, "", "clip"], [451, 1, 1, "", "cos"], [452, 1, 1, "", "cosh"], [453, 1, 1, "", "cot"], [454, 1, 1, "", "count"], [455, 1, 1, "", "cum_count"], [456, 1, 1, "", "cum_max"], [457, 1, 1, "", "cum_min"], [458, 1, 1, "", "cum_prod"], [459, 1, 1, "", "cum_sum"], [460, 1, 1, "", "cumulative_eval"], [461, 1, 1, "", "cut"], [462, 1, 1, "", "degrees"], [463, 1, 1, "", "deserialize"], [464, 1, 1, "", "diff"], [465, 1, 1, "", "dot"], [466, 1, 1, "", "drop_nans"], [467, 1, 1, "", "drop_nulls"], [514, 1, 1, "", "entropy"], [515, 1, 1, "", "eq"], [516, 1, 1, "", "eq_missing"], [517, 1, 1, "", "ewm_mean"], [518, 1, 1, "", "ewm_mean_by"], [519, 1, 1, "", "ewm_std"], [520, 1, 1, "", "ewm_var"], [521, 1, 1, "", "exclude"], [522, 1, 1, "", "exp"], [523, 1, 1, "", "explode"], [524, 1, 1, "", "extend_constant"], [525, 1, 1, "", "fill_nan"], [526, 1, 1, "", "fill_null"], [527, 1, 1, "", "filter"], [528, 1, 1, "", "first"], [529, 1, 1, "", "flatten"], [530, 1, 1, "", "floor"], [531, 1, 1, "", "floordiv"], [532, 1, 1, "", "forward_fill"], [533, 1, 1, "", "from_json"], [534, 1, 1, "", "gather"], [535, 1, 1, "", "gather_every"], [536, 1, 1, "", "ge"], [537, 1, 1, "", "get"], [538, 1, 1, "", "gt"], [539, 1, 1, "", "has_nulls"], [540, 1, 1, "", "hash"], [541, 1, 1, "", "head"], [542, 1, 1, "", "hist"], [543, 1, 1, "", "implode"], [544, 1, 1, "", "index_of"], [545, 1, 1, "", "inspect"], [546, 1, 1, "", "interpolate"], [547, 1, 1, "", "interpolate_by"], [548, 1, 1, "", "is_between"], [549, 1, 1, "", "is_close"], [550, 1, 1, "", "is_duplicated"], [551, 1, 1, "", "is_finite"], [552, 1, 1, "", "is_first_distinct"], [553, 1, 1, "", "is_in"], [554, 1, 1, "", "is_infinite"], [555, 1, 1, "", "is_last_distinct"], [556, 1, 1, "", "is_nan"], [557, 1, 1, "", "is_not_nan"], [558, 1, 1, "", "is_not_null"], [559, 1, 1, "", "is_null"], [560, 1, 1, "", "is_unique"], [561, 1, 1, "", "kurtosis"], [562, 1, 1, "", "last"], [563, 1, 1, "", "le"], [564, 1, 1, "", "len"], [565, 1, 1, "", "limit"], [607, 1, 1, "", "log"], [608, 1, 1, "", "log10"], [609, 1, 1, "", "log1p"], [610, 1, 1, "", "lower_bound"], [611, 1, 1, "", "lt"], [612, 1, 1, "", "map_batches"], [613, 1, 1, "", "map_elements"], [614, 1, 1, "", "max"], [615, 1, 1, "", "mean"], [616, 1, 1, "", "median"], [632, 1, 1, "", "min"], [633, 1, 1, "", "mod"], [634, 1, 1, "", "mode"], [635, 1, 1, "", "mul"], [636, 1, 1, "", "n_unique"], [646, 1, 1, "", "nan_max"], [647, 1, 1, "", "nan_min"], [648, 1, 1, "", "ne"], [649, 1, 1, "", "ne_missing"], [650, 1, 1, "", "neg"], [651, 1, 1, "", "not_"], [652, 1, 1, "", "null_count"], [653, 1, 1, "", "or_"], [654, 1, 1, "", "over"], [655, 1, 1, "", "pct_change"], [656, 1, 1, "", "peak_max"], [657, 1, 1, "", "peak_min"], [658, 1, 1, "", "pipe"], [659, 1, 1, "", "pow"], [660, 1, 1, "", "product"], [661, 1, 1, "", "qcut"], [662, 1, 1, "", "quantile"], [663, 1, 1, "", "radians"], [664, 1, 1, "", "rank"], [665, 1, 1, "", "rechunk"], [666, 1, 1, "", "reinterpret"], [667, 1, 1, "", "repeat_by"], [668, 1, 1, "", "replace"], [669, 1, 1, "", "replace_strict"], [670, 1, 1, "", "reshape"], [671, 1, 1, "", "reverse"], [672, 1, 1, "", "rle"], [673, 1, 1, "", "rle_id"], [674, 1, 1, "", "rolling"], [675, 1, 1, "", "rolling_kurtosis"], [676, 1, 1, "", "rolling_map"], [677, 1, 1, "", "rolling_max"], [678, 1, 1, "", "rolling_max_by"], [679, 1, 1, "", "rolling_mean"], [680, 1, 1, "", "rolling_mean_by"], [681, 1, 1, "", "rolling_median"], [682, 1, 1, "", "rolling_median_by"], [683, 1, 1, "", "rolling_min"], [684, 1, 1, "", "rolling_min_by"], [685, 1, 1, "", "rolling_quantile"], [686, 1, 1, "", "rolling_quantile_by"], [687, 1, 1, "", "rolling_skew"], [688, 1, 1, "", "rolling_std"], [689, 1, 1, "", "rolling_std_by"], [690, 1, 1, "", "rolling_sum"], [691, 1, 1, "", "rolling_sum_by"], [692, 1, 1, "", "rolling_var"], [693, 1, 1, "", "rolling_var_by"], [694, 1, 1, "", "round"], [695, 1, 1, "", "round_sig_figs"], [696, 1, 1, "", "sample"], [697, 1, 1, "", "search_sorted"], [698, 1, 1, "", "set_sorted"], [699, 1, 1, "", "shift"], [700, 1, 1, "", "shrink_dtype"], [701, 1, 1, "", "shuffle"], [702, 1, 1, "", "sign"], [703, 1, 1, "", "sin"], [704, 1, 1, "", "sinh"], [705, 1, 1, "", "skew"], [706, 1, 1, "", "slice"], [707, 1, 1, "", "sort"], [708, 1, 1, "", "sort_by"], [709, 1, 1, "", "sqrt"], [710, 1, 1, "", "std"], [765, 1, 1, "", "sub"], [766, 1, 1, "", "sum"], [767, 1, 1, "", "tail"], [768, 1, 1, "", "tan"], [769, 1, 1, "", "tanh"], [770, 1, 1, "", "to_physical"], [771, 1, 1, "", "top_k"], [772, 1, 1, "", "top_k_by"], [773, 1, 1, "", "truediv"], [774, 1, 1, "", "unique"], [775, 1, 1, "", "unique_counts"], [776, 1, 1, "", "upper_bound"], [777, 1, 1, "", "value_counts"], [778, 1, 1, "", "var"], [779, 1, 1, "", "where"], [780, 1, 1, "", "xor"]], "polars.Expr.arr": [[397, 1, 1, "", "all"], [398, 1, 1, "", "any"], [399, 1, 1, "", "arg_max"], [400, 1, 1, "", "arg_min"], [401, 1, 1, "", "contains"], [402, 1, 1, "", "count_matches"], [403, 1, 1, "", "explode"], [404, 1, 1, "", "first"], [405, 1, 1, "", "get"], [406, 1, 1, "", "join"], [407, 1, 1, "", "last"], [408, 1, 1, "", "len"], [409, 1, 1, "", "max"], [410, 1, 1, "", "mean"], [411, 1, 1, "", "median"], [412, 1, 1, "", "min"], [413, 1, 1, "", "n_unique"], [414, 1, 1, "", "reverse"], [415, 1, 1, "", "shift"], [416, 1, 1, "", "sort"], [417, 1, 1, "", "std"], [418, 1, 1, "", "sum"], [419, 1, 1, "", "to_list"], [420, 1, 1, "", "to_struct"], [421, 1, 1, "", "unique"], [422, 1, 1, "", "var"]], "polars.Expr.bin": [[424, 1, 1, "", "contains"], [425, 1, 1, "", "decode"], [426, 1, 1, "", "encode"], [427, 1, 1, "", "ends_with"], [428, 1, 1, "", "reinterpret"], [429, 1, 1, "", "size"], [430, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[443, 1, 1, "", "ends_with"], [444, 1, 1, "", "get_categories"], [445, 1, 1, "", "len_bytes"], [446, 1, 1, "", "len_chars"], [447, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[468, 1, 1, "", "add_business_days"], [469, 1, 1, "", "base_utc_offset"], [470, 1, 1, "", "cast_time_unit"], [471, 1, 1, "", "century"], [472, 1, 1, "", "combine"], [473, 1, 1, "", "convert_time_zone"], [474, 1, 1, "", "date"], [475, 1, 1, "", "datetime"], [476, 1, 1, "", "day"], [477, 1, 1, "", "dst_offset"], [478, 1, 1, "", "epoch"], [479, 1, 1, "", "hour"], [480, 1, 1, "", "is_business_day"], [481, 1, 1, "", "is_leap_year"], [482, 1, 1, "", "iso_year"], [483, 1, 1, "", "microsecond"], [484, 1, 1, "", "millennium"], [485, 1, 1, "", "millisecond"], [486, 1, 1, "", "minute"], [487, 1, 1, "", "month"], [488, 1, 1, "", "month_end"], [489, 1, 1, "", "month_start"], [490, 1, 1, "", "nanosecond"], [491, 1, 1, "", "offset_by"], [492, 1, 1, "", "ordinal_day"], [493, 1, 1, "", "quarter"], [494, 1, 1, "", "replace"], [495, 1, 1, "", "replace_time_zone"], [496, 1, 1, "", "round"], [497, 1, 1, "", "second"], [498, 1, 1, "", "strftime"], [499, 1, 1, "", "time"], [500, 1, 1, "", "timestamp"], [501, 1, 1, "", "to_string"], [502, 1, 1, "", "total_days"], [503, 1, 1, "", "total_hours"], [504, 1, 1, "", "total_microseconds"], [505, 1, 1, "", "total_milliseconds"], [506, 1, 1, "", "total_minutes"], [507, 1, 1, "", "total_nanoseconds"], [508, 1, 1, "", "total_seconds"], [509, 1, 1, "", "truncate"], [510, 1, 1, "", "week"], [511, 1, 1, "", "weekday"], [512, 1, 1, "", "with_time_unit"], [513, 1, 1, "", "year"]], "polars.Expr.list": [[566, 1, 1, "", "all"], [567, 1, 1, "", "any"], [568, 1, 1, "", "arg_max"], [569, 1, 1, "", "arg_min"], [570, 1, 1, "", "concat"], [571, 1, 1, "", "contains"], [572, 1, 1, "", "count_matches"], [573, 1, 1, "", "diff"], [574, 1, 1, "", "drop_nulls"], [575, 1, 1, "", "eval"], [576, 1, 1, "", "explode"], [577, 1, 1, "", "filter"], [578, 1, 1, "", "first"], [579, 1, 1, "", "gather"], [580, 1, 1, "", "gather_every"], [581, 1, 1, "", "get"], [582, 1, 1, "", "head"], [583, 1, 1, "", "join"], [584, 1, 1, "", "last"], [585, 1, 1, "", "len"], [586, 1, 1, "", "max"], [587, 1, 1, "", "mean"], [588, 1, 1, "", "median"], [589, 1, 1, "", "min"], [590, 1, 1, "", "n_unique"], [591, 1, 1, "", "reverse"], [592, 1, 1, "", "sample"], [593, 1, 1, "", "set_difference"], [594, 1, 1, "", "set_intersection"], [595, 1, 1, "", "set_symmetric_difference"], [596, 1, 1, "", "set_union"], [597, 1, 1, "", "shift"], [598, 1, 1, "", "slice"], [599, 1, 1, "", "sort"], [600, 1, 1, "", "std"], [601, 1, 1, "", "sum"], [602, 1, 1, "", "tail"], [603, 1, 1, "", "to_array"], [604, 1, 1, "", "to_struct"], [605, 1, 1, "", "unique"], [606, 1, 1, "", "var"]], "polars.Expr.meta": [[617, 1, 1, "", "eq"], [618, 1, 1, "", "has_multiple_outputs"], [619, 1, 1, "", "is_column"], [620, 1, 1, "", "is_column_selection"], [621, 1, 1, "", "is_literal"], [622, 1, 1, "", "is_regex_projection"], [623, 1, 1, "", "ne"], [624, 1, 1, "", "output_name"], [625, 1, 1, "", "pop"], [626, 1, 1, "", "root_names"], [627, 1, 1, "", "serialize"], [628, 1, 1, "", "show_graph"], [629, 1, 1, "", "tree_format"], [630, 1, 1, "", "undo_aliases"], [631, 1, 1, "", "write_json"]], "polars.Expr.name": [[637, 1, 1, "", "keep"], [638, 1, 1, "", "map"], [639, 1, 1, "", "map_fields"], [640, 1, 1, "", "prefix"], [641, 1, 1, "", "prefix_fields"], [642, 1, 1, "", "suffix"], [643, 1, 1, "", "suffix_fields"], [644, 1, 1, "", "to_lowercase"], [645, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[711, 1, 1, "", "concat"], [712, 1, 1, "", "contains"], [713, 1, 1, "", "contains_any"], [714, 1, 1, "", "count_matches"], [715, 1, 1, "", "decode"], [716, 1, 1, "", "encode"], [717, 1, 1, "", "ends_with"], [718, 1, 1, "", "escape_regex"], [719, 1, 1, "", "explode"], [720, 1, 1, "", "extract"], [721, 1, 1, "", "extract_all"], [722, 1, 1, "", "extract_groups"], [723, 1, 1, "", "extract_many"], [724, 1, 1, "", "find"], [725, 1, 1, "", "find_many"], [726, 1, 1, "", "head"], [727, 1, 1, "", "join"], [728, 1, 1, "", "json_decode"], [729, 1, 1, "", "json_path_match"], [730, 1, 1, "", "len_bytes"], [731, 1, 1, "", "len_chars"], [732, 1, 1, "", "normalize"], [733, 1, 1, "", "pad_end"], [734, 1, 1, "", "pad_start"], [735, 1, 1, "", "replace"], [736, 1, 1, "", "replace_all"], [737, 1, 1, "", "replace_many"], [738, 1, 1, "", "reverse"], [739, 1, 1, "", "slice"], [740, 1, 1, "", "split"], [741, 1, 1, "", "split_exact"], [742, 1, 1, "", "splitn"], [743, 1, 1, "", "starts_with"], [744, 1, 1, "", "strip_chars"], [745, 1, 1, "", "strip_chars_end"], [746, 1, 1, "", "strip_chars_start"], [747, 1, 1, "", "strip_prefix"], [748, 1, 1, "", "strip_suffix"], [749, 1, 1, "", "strptime"], [750, 1, 1, "", "tail"], [751, 1, 1, "", "to_date"], [752, 1, 1, "", "to_datetime"], [753, 1, 1, "", "to_decimal"], [754, 1, 1, "", "to_integer"], [755, 1, 1, "", "to_lowercase"], [756, 1, 1, "", "to_time"], [757, 1, 1, "", "to_titlecase"], [758, 1, 1, "", "to_uppercase"], [759, 1, 1, "", "zfill"]], "polars.Expr.struct": [[760, 1, 1, "", "field"], [761, 1, 1, "", "json_encode"], [762, 1, 1, "", "rename_fields"], [763, 1, 1, "", "unnest"], [764, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[882, 1, 1, "", "__getitem__"], [883, 1, 1, "", "approx_n_unique"], [884, 1, 1, "", "bottom_k"], [885, 1, 1, "", "cache"], [886, 1, 1, "", "cast"], [887, 1, 1, "", "clear"], [888, 1, 1, "", "clone"], [889, 1, 1, "", "collect"], [890, 1, 1, "", "collect_async"], [891, 1, 1, "", "collect_schema"], [892, 2, 1, "", "columns"], [893, 1, 1, "", "count"], [894, 1, 1, "", "describe"], [895, 1, 1, "", "deserialize"], [896, 1, 1, "", "drop"], [897, 1, 1, "", "drop_nans"], [898, 1, 1, "", "drop_nulls"], [899, 2, 1, "", "dtypes"], [900, 1, 1, "", "explain"], [901, 1, 1, "", "explode"], [902, 1, 1, "", "fill_nan"], [903, 1, 1, "", "fill_null"], [904, 1, 1, "", "filter"], [905, 1, 1, "", "first"], [906, 1, 1, "", "gather_every"], [907, 1, 1, "", "group_by"], [908, 1, 1, "", "group_by_dynamic"], [909, 1, 1, "", "head"], [910, 1, 1, "", "inspect"], [911, 1, 1, "", "interpolate"], [912, 1, 1, "", "join"], [913, 1, 1, "", "join_asof"], [914, 1, 1, "", "join_where"], [915, 1, 1, "", "last"], [916, 1, 1, "", "lazy"], [917, 1, 1, "", "limit"], [918, 1, 1, "", "map_batches"], [919, 1, 1, "", "match_to_schema"], [920, 1, 1, "", "max"], [921, 1, 1, "", "mean"], [922, 1, 1, "", "median"], [923, 1, 1, "", "melt"], [924, 1, 1, "", "merge_sorted"], [925, 1, 1, "", "min"], [926, 1, 1, "", "null_count"], [927, 1, 1, "", "pipe"], [928, 1, 1, "", "pipe_with_schema"], [929, 1, 1, "", "profile"], [930, 1, 1, "", "quantile"], [931, 1, 1, "", "remote"], [932, 1, 1, "", "remove"], [933, 1, 1, "", "rename"], [934, 1, 1, "", "reverse"], [935, 1, 1, "", "rolling"], [936, 2, 1, "", "schema"], [937, 1, 1, "", "select"], [938, 1, 1, "", "select_seq"], [939, 1, 1, "", "serialize"], [940, 1, 1, "", "set_sorted"], [941, 1, 1, "", "shift"], [942, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_ndjson"], [51, 1, 1, "", "sink_parquet"], [943, 1, 1, "", "slice"], [944, 1, 1, "", "sort"], [945, 1, 1, "", "sql"], [946, 1, 1, "", "std"], [947, 1, 1, "", "sum"], [948, 1, 1, "", "tail"], [949, 1, 1, "", "top_k"], [950, 1, 1, "", "unique"], [951, 1, 1, "", "unnest"], [952, 1, 1, "", "unpivot"], [953, 1, 1, "", "update"], [954, 1, 1, "", "var"], [955, 2, 1, "", "width"], [956, 1, 1, "", "with_columns"], [957, 1, 1, "", "with_columns_seq"], [958, 1, 1, "", "with_context"], [959, 1, 1, "", "with_row_count"], [960, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[52, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[53, 1, 1, "", "__init__"]], "polars.PartitionParted": [[54, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[961, 1, 1, "", "__init__"]], "polars.SQLContext": [[1428, 1, 1, "", "__enter__"], [1428, 1, 1, "", "__exit__"], [1428, 1, 1, "", "__init__"], [1409, 1, 1, "", "execute"], [1410, 1, 1, "", "execute_global"], [1411, 1, 1, "", "register"], [1412, 1, 1, "", "register_globals"], [1413, 1, 1, "", "register_many"], [1414, 1, 1, "", "tables"], [1415, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[55, 1, 1, "", "__init__"]], "polars.Series": [[995, 1, 1, "", "__array__"], [996, 1, 1, "", "__arrow_c_stream__"], [997, 1, 1, "", "__getitem__"], [998, 1, 1, "", "abs"], [999, 1, 1, "", "alias"], [1000, 1, 1, "", "all"], [1001, 1, 1, "", "any"], [1002, 1, 1, "", "append"], [1003, 1, 1, "", "approx_n_unique"], [1004, 1, 1, "", "arccos"], [1005, 1, 1, "", "arccosh"], [1006, 1, 1, "", "arcsin"], [1007, 1, 1, "", "arcsinh"], [1008, 1, 1, "", "arctan"], [1009, 1, 1, "", "arctanh"], [1010, 1, 1, "", "arg_max"], [1011, 1, 1, "", "arg_min"], [1012, 1, 1, "", "arg_sort"], [1013, 1, 1, "", "arg_true"], [1014, 1, 1, "", "arg_unique"], [1040, 1, 1, "", "backward_fill"], [1048, 1, 1, "", "bitwise_and"], [1049, 1, 1, "", "bitwise_count_ones"], [1050, 1, 1, "", "bitwise_count_zeros"], [1051, 1, 1, "", "bitwise_leading_ones"], [1052, 1, 1, "", "bitwise_leading_zeros"], [1053, 1, 1, "", "bitwise_or"], [1054, 1, 1, "", "bitwise_trailing_ones"], [1055, 1, 1, "", "bitwise_trailing_zeros"], [1056, 1, 1, "", "bitwise_xor"], [1057, 1, 1, "", "bottom_k"], [1058, 1, 1, "", "bottom_k_by"], [1059, 1, 1, "", "cast"], [1068, 1, 1, "", "cbrt"], [1069, 1, 1, "", "ceil"], [1070, 1, 1, "", "chunk_lengths"], [1071, 1, 1, "", "clear"], [1072, 1, 1, "", "clip"], [1073, 1, 1, "", "clone"], [1074, 1, 1, "", "cos"], [1075, 1, 1, "", "cosh"], [1076, 1, 1, "", "cot"], [1077, 1, 1, "", "count"], [1078, 1, 1, "", "cum_count"], [1079, 1, 1, "", "cum_max"], [1080, 1, 1, "", "cum_min"], [1081, 1, 1, "", "cum_prod"], [1082, 1, 1, "", "cum_sum"], [1083, 1, 1, "", "cumulative_eval"], [1084, 1, 1, "", "cut"], [1085, 1, 1, "", "describe"], [1086, 1, 1, "", "diff"], [1087, 1, 1, "", "dot"], [1088, 1, 1, "", "drop_nans"], [1089, 1, 1, "", "drop_nulls"], [1140, 2, 1, "", "dtype"], [1141, 1, 1, "", "entropy"], [1142, 1, 1, "", "eq"], [1143, 1, 1, "", "eq_missing"], [1144, 1, 1, "", "equals"], [1145, 1, 1, "", "estimated_size"], [1146, 1, 1, "", "ewm_mean"], [1147, 1, 1, "", "ewm_mean_by"], [1148, 1, 1, "", "ewm_std"], [1149, 1, 1, "", "ewm_var"], [1150, 1, 1, "", "exp"], [1151, 1, 1, "", "explode"], [1152, 1, 1, "", "extend"], [1153, 1, 1, "", "extend_constant"], [1154, 1, 1, "", "fill_nan"], [1155, 1, 1, "", "fill_null"], [1156, 1, 1, "", "filter"], [1157, 1, 1, "", "first"], [1158, 2, 1, "", "flags"], [1159, 1, 1, "", "floor"], [1160, 1, 1, "", "forward_fill"], [1161, 1, 1, "", "gather"], [1162, 1, 1, "", "gather_every"], [1163, 1, 1, "", "ge"], [1164, 1, 1, "", "get_chunks"], [1165, 1, 1, "", "gt"], [1166, 1, 1, "", "has_nulls"], [1167, 1, 1, "", "has_validity"], [1168, 1, 1, "", "hash"], [1169, 1, 1, "", "head"], [1170, 1, 1, "", "hist"], [1171, 1, 1, "", "implode"], [1172, 1, 1, "", "index_of"], [1173, 1, 1, "", "interpolate"], [1174, 1, 1, "", "interpolate_by"], [1175, 1, 1, "", "is_between"], [1176, 1, 1, "", "is_close"], [1177, 1, 1, "", "is_duplicated"], [1178, 1, 1, "", "is_empty"], [1179, 1, 1, "", "is_finite"], [1180, 1, 1, "", "is_first_distinct"], [1181, 1, 1, "", "is_in"], [1182, 1, 1, "", "is_infinite"], [1183, 1, 1, "", "is_last_distinct"], [1184, 1, 1, "", "is_nan"], [1185, 1, 1, "", "is_not_nan"], [1186, 1, 1, "", "is_not_null"], [1187, 1, 1, "", "is_null"], [1188, 1, 1, "", "is_sorted"], [1189, 1, 1, "", "is_unique"], [1190, 1, 1, "", "item"], [1191, 1, 1, "", "kurtosis"], [1192, 1, 1, "", "last"], [1193, 1, 1, "", "le"], [1194, 1, 1, "", "len"], [1195, 1, 1, "", "limit"], [1237, 1, 1, "", "log"], [1238, 1, 1, "", "log10"], [1239, 1, 1, "", "log1p"], [1240, 1, 1, "", "lower_bound"], [1241, 1, 1, "", "lt"], [1242, 1, 1, "", "map_elements"], [1243, 1, 1, "", "max"], [1244, 1, 1, "", "mean"], [1245, 1, 1, "", "median"], [1246, 1, 1, "", "min"], [1247, 1, 1, "", "mode"], [1248, 1, 1, "", "n_chunks"], [1249, 1, 1, "", "n_unique"], [1250, 2, 1, "", "name"], [1251, 1, 1, "", "nan_max"], [1252, 1, 1, "", "nan_min"], [1253, 1, 1, "", "ne"], [1254, 1, 1, "", "ne_missing"], [1255, 1, 1, "", "new_from_index"], [1256, 1, 1, "", "not_"], [1257, 1, 1, "", "null_count"], [1258, 1, 1, "", "pct_change"], [1259, 1, 1, "", "peak_max"], [1260, 1, 1, "", "peak_min"], [1405, 2, 1, "", "plot"], [1261, 1, 1, "", "pow"], [1262, 1, 1, "", "product"], [1263, 1, 1, "", "qcut"], [1264, 1, 1, "", "quantile"], [1265, 1, 1, "", "rank"], [1266, 1, 1, "", "rechunk"], [1267, 1, 1, "", "reinterpret"], [1268, 1, 1, "", "rename"], [1269, 1, 1, "", "repeat_by"], [1270, 1, 1, "", "replace"], [1271, 1, 1, "", "replace_strict"], [1272, 1, 1, "", "reshape"], [1273, 1, 1, "", "reverse"], [1274, 1, 1, "", "rle"], [1275, 1, 1, "", "rle_id"], [1276, 1, 1, "", "rolling_kurtosis"], [1277, 1, 1, "", "rolling_map"], [1278, 1, 1, "", "rolling_max"], [1279, 1, 1, "", "rolling_max_by"], [1280, 1, 1, "", "rolling_mean"], [1281, 1, 1, "", "rolling_mean_by"], [1282, 1, 1, "", "rolling_median"], [1283, 1, 1, "", "rolling_median_by"], [1284, 1, 1, "", "rolling_min"], [1285, 1, 1, "", "rolling_min_by"], [1286, 1, 1, "", "rolling_quantile"], [1287, 1, 1, "", "rolling_quantile_by"], [1288, 1, 1, "", "rolling_skew"], [1289, 1, 1, "", "rolling_std"], [1290, 1, 1, "", "rolling_std_by"], [1291, 1, 1, "", "rolling_sum"], [1292, 1, 1, "", "rolling_sum_by"], [1293, 1, 1, "", "rolling_var"], [1294, 1, 1, "", "rolling_var_by"], [1295, 1, 1, "", "round"], [1296, 1, 1, "", "round_sig_figs"], [1297, 1, 1, "", "sample"], [1298, 1, 1, "", "scatter"], [1299, 1, 1, "", "search_sorted"], [1300, 1, 1, "", "set"], [1301, 1, 1, "", "set_sorted"], [1302, 2, 1, "", "shape"], [1303, 1, 1, "", "shift"], [1304, 1, 1, "", "shrink_dtype"], [1305, 1, 1, "", "shrink_to_fit"], [1306, 1, 1, "", "shuffle"], [1307, 1, 1, "", "sign"], [1308, 1, 1, "", "sin"], [1309, 1, 1, "", "sinh"], [1310, 1, 1, "", "skew"], [1311, 1, 1, "", "slice"], [1312, 1, 1, "", "sort"], [1313, 1, 1, "", "sqrt"], [1314, 1, 1, "", "std"], [1370, 1, 1, "", "sum"], [1371, 1, 1, "", "tail"], [1372, 1, 1, "", "tan"], [1373, 1, 1, "", "tanh"], [1374, 1, 1, "", "to_arrow"], [1375, 1, 1, "", "to_dummies"], [1376, 1, 1, "", "to_frame"], [1377, 1, 1, "", "to_init_repr"], [1378, 1, 1, "", "to_jax"], [1379, 1, 1, "", "to_list"], [1380, 1, 1, "", "to_numpy"], [1381, 1, 1, "", "to_pandas"], [1382, 1, 1, "", "to_physical"], [1383, 1, 1, "", "to_torch"], [1384, 1, 1, "", "top_k"], [1385, 1, 1, "", "top_k_by"], [1386, 1, 1, "", "unique"], [1387, 1, 1, "", "unique_counts"], [1388, 1, 1, "", "upper_bound"], [1389, 1, 1, "", "value_counts"], [1390, 1, 1, "", "var"], [1391, 1, 1, "", "zip_with"]], "polars.Series.arr": [[1015, 1, 1, "", "all"], [1016, 1, 1, "", "any"], [1017, 1, 1, "", "arg_max"], [1018, 1, 1, "", "arg_min"], [1019, 1, 1, "", "contains"], [1020, 1, 1, "", "count_matches"], [1021, 1, 1, "", "explode"], [1022, 1, 1, "", "first"], [1023, 1, 1, "", "get"], [1024, 1, 1, "", "join"], [1025, 1, 1, "", "last"], [1026, 1, 1, "", "len"], [1027, 1, 1, "", "max"], [1028, 1, 1, "", "median"], [1029, 1, 1, "", "min"], [1030, 1, 1, "", "n_unique"], [1031, 1, 1, "", "reverse"], [1032, 1, 1, "", "shift"], [1033, 1, 1, "", "sort"], [1034, 1, 1, "", "std"], [1035, 1, 1, "", "sum"], [1036, 1, 1, "", "to_list"], [1037, 1, 1, "", "to_struct"], [1038, 1, 1, "", "unique"], [1039, 1, 1, "", "var"]], "polars.Series.bin": [[1041, 1, 1, "", "contains"], [1042, 1, 1, "", "decode"], [1043, 1, 1, "", "encode"], [1044, 1, 1, "", "ends_with"], [1045, 1, 1, "", "reinterpret"], [1046, 1, 1, "", "size"], [1047, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1060, 1, 1, "", "ends_with"], [1061, 1, 1, "", "get_categories"], [1062, 1, 1, "", "is_local"], [1063, 1, 1, "", "len_bytes"], [1064, 1, 1, "", "len_chars"], [1065, 1, 1, "", "starts_with"], [1066, 1, 1, "", "to_local"], [1067, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1090, 1, 1, "", "add_business_days"], [1091, 1, 1, "", "base_utc_offset"], [1092, 1, 1, "", "cast_time_unit"], [1093, 1, 1, "", "century"], [1094, 1, 1, "", "combine"], [1095, 1, 1, "", "convert_time_zone"], [1096, 1, 1, "", "date"], [1097, 1, 1, "", "datetime"], [1098, 1, 1, "", "day"], [1099, 1, 1, "", "dst_offset"], [1100, 1, 1, "", "epoch"], [1101, 1, 1, "", "hour"], [1102, 1, 1, "", "is_business_day"], [1103, 1, 1, "", "is_leap_year"], [1104, 1, 1, "", "iso_year"], [1105, 1, 1, "", "max"], [1106, 1, 1, "", "mean"], [1107, 1, 1, "", "median"], [1108, 1, 1, "", "microsecond"], [1109, 1, 1, "", "millennium"], [1110, 1, 1, "", "millisecond"], [1111, 1, 1, "", "min"], [1112, 1, 1, "", "minute"], [1113, 1, 1, "", "month"], [1114, 1, 1, "", "month_end"], [1115, 1, 1, "", "month_start"], [1116, 1, 1, "", "nanosecond"], [1117, 1, 1, "", "offset_by"], [1118, 1, 1, "", "ordinal_day"], [1119, 1, 1, "", "quarter"], [1120, 1, 1, "", "replace"], [1121, 1, 1, "", "replace_time_zone"], [1122, 1, 1, "", "round"], [1123, 1, 1, "", "second"], [1124, 1, 1, "", "strftime"], [1125, 1, 1, "", "time"], [1126, 1, 1, "", "timestamp"], [1127, 1, 1, "", "to_string"], [1128, 1, 1, "", "total_days"], [1129, 1, 1, "", "total_hours"], [1130, 1, 1, "", "total_microseconds"], [1131, 1, 1, "", "total_milliseconds"], [1132, 1, 1, "", "total_minutes"], [1133, 1, 1, "", "total_nanoseconds"], [1134, 1, 1, "", "total_seconds"], [1135, 1, 1, "", "truncate"], [1136, 1, 1, "", "week"], [1137, 1, 1, "", "weekday"], [1138, 1, 1, "", "with_time_unit"], [1139, 1, 1, "", "year"]], "polars.Series.list": [[1196, 1, 1, "", "all"], [1197, 1, 1, "", "any"], [1198, 1, 1, "", "arg_max"], [1199, 1, 1, "", "arg_min"], [1200, 1, 1, "", "concat"], [1201, 1, 1, "", "contains"], [1202, 1, 1, "", "count_matches"], [1203, 1, 1, "", "diff"], [1204, 1, 1, "", "drop_nulls"], [1205, 1, 1, "", "eval"], [1206, 1, 1, "", "explode"], [1207, 1, 1, "", "filter"], [1208, 1, 1, "", "first"], [1209, 1, 1, "", "gather"], [1210, 1, 1, "", "gather_every"], [1211, 1, 1, "", "get"], [1212, 1, 1, "", "head"], [1213, 1, 1, "", "join"], [1214, 1, 1, "", "last"], [1215, 1, 1, "", "len"], [1216, 1, 1, "", "max"], [1217, 1, 1, "", "mean"], [1218, 1, 1, "", "median"], [1219, 1, 1, "", "min"], [1220, 1, 1, "", "n_unique"], [1221, 1, 1, "", "reverse"], [1222, 1, 1, "", "sample"], [1223, 1, 1, "", "set_difference"], [1224, 1, 1, "", "set_intersection"], [1225, 1, 1, "", "set_symmetric_difference"], [1226, 1, 1, "", "set_union"], [1227, 1, 1, "", "shift"], [1228, 1, 1, "", "slice"], [1229, 1, 1, "", "sort"], [1230, 1, 1, "", "std"], [1231, 1, 1, "", "sum"], [1232, 1, 1, "", "tail"], [1233, 1, 1, "", "to_array"], [1234, 1, 1, "", "to_struct"], [1235, 1, 1, "", "unique"], [1236, 1, 1, "", "var"]], "polars.Series.str": [[1315, 1, 1, "", "concat"], [1316, 1, 1, "", "contains"], [1317, 1, 1, "", "contains_any"], [1318, 1, 1, "", "count_matches"], [1319, 1, 1, "", "decode"], [1320, 1, 1, "", "encode"], [1321, 1, 1, "", "ends_with"], [1322, 1, 1, "", "escape_regex"], [1323, 1, 1, "", "explode"], [1324, 1, 1, "", "extract"], [1325, 1, 1, "", "extract_all"], [1326, 1, 1, "", "extract_groups"], [1327, 1, 1, "", "extract_many"], [1328, 1, 1, "", "find"], [1329, 1, 1, "", "find_many"], [1330, 1, 1, "", "head"], [1331, 1, 1, "", "join"], [1332, 1, 1, "", "json_decode"], [1333, 1, 1, "", "json_path_match"], [1334, 1, 1, "", "len_bytes"], [1335, 1, 1, "", "len_chars"], [1336, 1, 1, "", "normalize"], [1337, 1, 1, "", "pad_end"], [1338, 1, 1, "", "pad_start"], [1339, 1, 1, "", "replace"], [1340, 1, 1, "", "replace_all"], [1341, 1, 1, "", "replace_many"], [1342, 1, 1, "", "reverse"], [1343, 1, 1, "", "slice"], [1344, 1, 1, "", "split"], [1345, 1, 1, "", "split_exact"], [1346, 1, 1, "", "splitn"], [1347, 1, 1, "", "starts_with"], [1348, 1, 1, "", "strip_chars"], [1349, 1, 1, "", "strip_chars_end"], [1350, 1, 1, "", "strip_chars_start"], [1351, 1, 1, "", "strip_prefix"], [1352, 1, 1, "", "strip_suffix"], [1353, 1, 1, "", "strptime"], [1354, 1, 1, "", "tail"], [1355, 1, 1, "", "to_date"], [1356, 1, 1, "", "to_datetime"], [1357, 1, 1, "", "to_decimal"], [1358, 1, 1, "", "to_integer"], [1359, 1, 1, "", "to_lowercase"], [1360, 1, 1, "", "to_time"], [1361, 1, 1, "", "to_titlecase"], [1362, 1, 1, "", "to_uppercase"], [1363, 1, 1, "", "zfill"]], "polars.Series.struct": [[1364, 1, 1, "", "field"], [1365, 3, 1, "", "fields"], [1366, 1, 1, "", "json_encode"], [1367, 1, 1, "", "rename_fields"], [1368, 3, 1, "", "schema"], [1369, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.api": [[58, 4, 1, "", "register_dataframe_namespace"], [59, 4, 1, "", "register_expr_namespace"], [60, 4, 1, "", "register_lazyframe_namespace"], [61, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[196, 0, 1, "", "CatalogInfo"], [197, 0, 1, "", "ColumnInfo"], [198, 5, 1, "", "DataSourceFormat"], [199, 0, 1, "", "NamespaceInfo"], [200, 0, 1, "", "TableInfo"], [202, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[196, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[197, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[199, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[200, 1, 1, "", "__init__"], [201, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[333, 1, 1, "", "__iter__"], [334, 1, 1, "", "agg"], [335, 1, 1, "", "all"], [336, 1, 1, "", "count"], [337, 1, 1, "", "first"], [338, 1, 1, "", "head"], [339, 1, 1, "", "last"], [340, 1, 1, "", "len"], [341, 1, 1, "", "map_groups"], [342, 1, 1, "", "max"], [343, 1, 1, "", "mean"], [344, 1, 1, "", "median"], [345, 1, 1, "", "min"], [346, 1, 1, "", "n_unique"], [347, 1, 1, "", "quantile"], [348, 1, 1, "", "sum"], [349, 1, 1, "", "tail"]], "polars.datatypes": [[66, 0, 1, "", "Array"], [67, 0, 1, "", "Binary"], [68, 0, 1, "", "Boolean"], [69, 0, 1, "", "Categorical"], [70, 0, 1, "", "DataType"], [71, 0, 1, "", "Date"], [72, 0, 1, "", "Datetime"], [73, 0, 1, "", "Decimal"], [74, 0, 1, "", "Duration"], [75, 0, 1, "", "Enum"], [76, 0, 1, "", "Field"], [77, 0, 1, "", "Float32"], [78, 0, 1, "", "Float64"], [79, 0, 1, "", "Int128"], [80, 0, 1, "", "Int16"], [81, 0, 1, "", "Int32"], [82, 0, 1, "", "Int64"], [83, 0, 1, "", "Int8"], [84, 0, 1, "", "List"], [85, 0, 1, "", "Null"], [86, 0, 1, "", "Object"], [87, 0, 1, "", "String"], [88, 0, 1, "", "Struct"], [89, 0, 1, "", "Time"], [90, 0, 1, "", "UInt16"], [91, 0, 1, "", "UInt32"], [92, 0, 1, "", "UInt64"], [93, 0, 1, "", "UInt8"], [94, 0, 1, "", "Unknown"], [95, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[69, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[83, 1, 1, "", "__init__"]], "polars.datatypes.List": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[86, 1, 1, "", "__init__"]], "polars.datatypes.String": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[93, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[94, 1, 1, "", "__init__"]], "polars.exceptions": [[100, 6, 1, "", "CategoricalRemappingWarning"], [101, 6, 1, "", "ChronoFormatWarning"], [102, 6, 1, "", "ColumnNotFoundError"], [103, 6, 1, "", "ComputeError"], [104, 6, 1, "", "CustomUFuncWarning"], [105, 6, 1, "", "DataOrientationWarning"], [106, 6, 1, "", "DuplicateError"], [107, 6, 1, "", "InvalidOperationError"], [108, 6, 1, "", "MapWithoutReturnDtypeWarning"], [109, 6, 1, "", "ModuleUpgradeRequiredError"], [110, 6, 1, "", "NoDataError"], [111, 6, 1, "", "NoRowsReturnedError"], [112, 6, 1, "", "OutOfBoundsError"], [113, 6, 1, "", "PanicException"], [114, 6, 1, "", "ParameterCollisionError"], [115, 6, 1, "", "PerformanceWarning"], [116, 6, 1, "", "PolarsError"], [117, 6, 1, "", "PolarsInefficientMapWarning"], [118, 6, 1, "", "PolarsWarning"], [119, 6, 1, "", "RowsError"], [120, 6, 1, "", "SQLInterfaceError"], [121, 6, 1, "", "SQLSyntaxError"], [122, 6, 1, "", "SchemaError"], [123, 6, 1, "", "SchemaFieldNotFoundError"], [124, 6, 1, "", "ShapeError"], [125, 6, 1, "", "StringCacheMismatchError"], [126, 6, 1, "", "StructFieldNotFoundError"], [127, 6, 1, "", "TooManyRowsReturnedError"], [128, 6, 1, "", "UnstableWarning"], [129, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[140, 1, 1, "", "next_batches"]], "polars.io.parquet": [[141, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[141, 1, 1, "", "__init__"]], "polars.io.partition": [[142, 0, 1, "", "BasePartitionContext"], [143, 0, 1, "", "KeyedPartition"], [144, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[142, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[143, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[144, 1, 1, "", "__init__"]], "polars.io.plugins": [[145, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[962, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[962, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[963, 1, 1, "", "agg"], [964, 1, 1, "", "all"], [965, 1, 1, "", "count"], [966, 1, 1, "", "first"], [967, 1, 1, "", "head"], [968, 1, 1, "", "last"], [969, 1, 1, "", "len"], [970, 1, 1, "", "map_groups"], [971, 1, 1, "", "max"], [972, 1, 1, "", "mean"], [973, 1, 1, "", "median"], [974, 1, 1, "", "min"], [975, 1, 1, "", "n_unique"], [976, 1, 1, "", "quantile"], [977, 1, 1, "", "sum"], [978, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[979, 1, 1, "", "cancel"], [980, 1, 1, "", "fetch"], [981, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[147, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[993, 0, 1, "", "Selector"], [993, 4, 1, "", "all"], [993, 4, 1, "", "alpha"], [993, 4, 1, "", "alphanumeric"], [993, 4, 1, "", "array"], [993, 4, 1, "", "binary"], [993, 4, 1, "", "boolean"], [993, 4, 1, "", "by_dtype"], [993, 4, 1, "", "by_index"], [993, 4, 1, "", "by_name"], [993, 4, 1, "", "categorical"], [993, 4, 1, "", "contains"], [993, 4, 1, "", "date"], [993, 4, 1, "", "datetime"], [993, 4, 1, "", "decimal"], [993, 4, 1, "", "digit"], [993, 4, 1, "", "duration"], [993, 4, 1, "", "ends_with"], [993, 4, 1, "", "enum"], [993, 4, 1, "", "exclude"], [993, 4, 1, "", "expand_selector"], [993, 4, 1, "", "first"], [993, 4, 1, "", "float"], [993, 4, 1, "", "integer"], [993, 4, 1, "", "is_selector"], [993, 4, 1, "", "last"], [993, 4, 1, "", "list"], [993, 4, 1, "", "matches"], [993, 4, 1, "", "nested"], [993, 4, 1, "", "numeric"], [993, 4, 1, "", "signed_integer"], [993, 4, 1, "", "starts_with"], [993, 4, 1, "", "string"], [993, 4, 1, "", "struct"], [993, 4, 1, "", "temporal"], [993, 4, 1, "", "time"], [993, 4, 1, "", "unsigned_integer"]], "polars.selectors.Selector": [[993, 1, 1, "", "as_expr"], [993, 1, 1, "", "exclude"]], "polars.testing": [[174, 4, 1, "", "assert_frame_equal"], [175, 4, 1, "", "assert_frame_not_equal"], [176, 4, 1, "", "assert_series_equal"], [177, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[178, 0, 1, "", "column"], [179, 4, 1, "", "columns"], [180, 4, 1, "", "create_list_strategy"], [181, 4, 1, "", "dataframes"], [182, 4, 1, "", "dtypes"], [183, 4, 1, "", "lists"], [184, 4, 1, "", "load_profile"], [185, 4, 1, "", "series"], [186, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[178, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 48, 55, 61, 66, 76, 88, 96, 99, 101, 107, 131, 138, 145, 150, 151, 152, 153, 155, 156, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 185, 211, 213, 214, 225, 226, 229, 234, 237, 242, 243, 248, 254, 257, 258, 262, 270, 277, 279, 283, 285, 287, 290, 293, 294, 301, 310, 313, 318, 320, 321, 322, 323, 324, 329, 330, 355, 367, 406, 441, 473, 478, 498, 501, 521, 527, 531, 544, 561, 583, 612, 613, 625, 634, 639, 646, 647, 654, 655, 666, 673, 675, 708, 712, 720, 721, 722, 724, 726, 735, 736, 739, 740, 742, 749, 750, 751, 752, 756, 760, 762, 764, 772, 781, 782, 783, 784, 789, 796, 799, 802, 803, 812, 813, 815, 816, 822, 827, 828, 829, 830, 832, 834, 835, 837, 845, 847, 849, 850, 851, 857, 863, 867, 884, 886, 897, 907, 908, 912, 913, 923, 932, 937, 938, 944, 949, 950, 951, 952, 953, 956, 957, 970, 987, 992, 993, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1098, 1099, 1100, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1114, 1115, 1118, 1120, 1122, 1123, 1124, 1127, 1135, 1137, 1138, 1139, 1140, 1145, 1146, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1164, 1166, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1327, 1328, 1330, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1400, 1405, 1409, 1413, 1416, 1423, 1424], "0": [1, 7, 8, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 51, 52, 57, 58, 59, 61, 63, 65, 66, 69, 73, 84, 96, 132, 138, 146, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 227, 228, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 248, 249, 253, 255, 256, 257, 260, 263, 264, 266, 267, 268, 269, 270, 273, 274, 275, 276, 279, 280, 281, 283, 285, 287, 289, 290, 291, 292, 293, 300, 301, 302, 303, 305, 310, 311, 312, 313, 314, 315, 317, 318, 319, 323, 325, 326, 329, 331, 332, 334, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 355, 358, 359, 373, 377, 379, 380, 382, 386, 387, 388, 389, 390, 391, 394, 395, 396, 399, 400, 402, 405, 410, 417, 420, 422, 429, 431, 436, 439, 441, 442, 448, 449, 450, 451, 452, 453, 460, 461, 462, 466, 467, 468, 474, 475, 479, 483, 485, 486, 490, 494, 497, 499, 501, 504, 505, 507, 508, 512, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 530, 531, 533, 535, 536, 538, 540, 542, 546, 547, 549, 551, 554, 556, 557, 558, 559, 561, 563, 568, 569, 572, 575, 577, 579, 580, 581, 587, 588, 600, 601, 604, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 620, 625, 628, 631, 632, 633, 635, 637, 646, 647, 648, 649, 650, 652, 653, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 702, 703, 704, 705, 709, 710, 711, 714, 719, 720, 721, 724, 725, 728, 753, 764, 765, 766, 768, 769, 770, 772, 773, 777, 778, 779, 781, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 800, 807, 811, 814, 820, 821, 823, 824, 825, 828, 831, 832, 833, 837, 839, 840, 842, 843, 844, 845, 846, 850, 853, 854, 855, 856, 857, 858, 863, 867, 883, 884, 886, 887, 888, 889, 891, 893, 894, 896, 897, 899, 900, 902, 903, 904, 906, 907, 908, 911, 912, 916, 918, 919, 922, 923, 926, 928, 929, 930, 932, 935, 936, 937, 942, 944, 945, 946, 949, 954, 956, 958, 959, 960, 963, 965, 966, 968, 970, 971, 972, 973, 974, 975, 976, 977, 987, 992, 993, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1017, 1023, 1034, 1035, 1037, 1039, 1046, 1059, 1068, 1069, 1071, 1074, 1075, 1076, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1097, 1101, 1106, 1107, 1108, 1110, 1112, 1116, 1120, 1123, 1127, 1130, 1131, 1133, 1134, 1138, 1141, 1144, 1146, 1147, 1148, 1149, 1154, 1159, 1162, 1167, 1168, 1170, 1173, 1174, 1176, 1179, 1182, 1184, 1185, 1186, 1187, 1190, 1191, 1198, 1199, 1202, 1205, 1207, 1209, 1210, 1211, 1217, 1218, 1230, 1231, 1234, 1236, 1237, 1238, 1239, 1240, 1244, 1245, 1251, 1252, 1258, 1261, 1263, 1264, 1265, 1270, 1271, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1307, 1308, 1309, 1310, 1313, 1314, 1315, 1318, 1323, 1324, 1325, 1328, 1329, 1333, 1339, 1357, 1370, 1372, 1373, 1375, 1378, 1380, 1381, 1382, 1383, 1388, 1389, 1390, 1400, 1405, 1409, 1415, 1417, 1418, 1419, 1422, 1423, 1425, 1426, 1428, 1430, 1431], "00": [28, 41, 72, 214, 221, 243, 325, 355, 469, 470, 473, 477, 488, 489, 491, 495, 496, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 678, 680, 682, 684, 686, 689, 691, 693, 749, 752, 756, 807, 808, 809, 810, 824, 853, 854, 855, 867, 886, 894, 908, 987, 993, 1091, 1092, 1095, 1096, 1097, 1099, 1100, 1101, 1107, 1108, 1112, 1114, 1115, 1116, 1117, 1121, 1122, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1138, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1339, 1353, 1356, 1360, 1400, 1423], "000": [9, 11, 28, 41, 53, 152, 355, 1339, 1431], "0000": [317, 355, 1383, 1400, 1431], "000000": [425, 426, 501, 715, 1042, 1043, 1319], "00000001": [12, 780, 867], "0000001": 759, "00000010": [780, 867], "00000011": [780, 867], "00000100": [780, 867], "00001000": [780, 867], "00001010": [780, 867], "00001011": [780, 867], "0000e": 12, "0000ff": [425, 426, 715, 1042, 1043, 1319], "0001": 501, "000100": 501, "000101": 501, "0005": 993, "00050": 993, "000800": 1127, "001": [59, 759, 810, 1130, 1131, 1133, 1363], "002": [810, 1130, 1131, 1133], "005": [1141, 1400], "00prefix": 993, "00z": [749, 752, 1353, 1356], "01": [29, 57, 71, 72, 181, 214, 221, 241, 243, 258, 287, 325, 355, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 749, 751, 752, 756, 791, 804, 805, 806, 807, 808, 809, 810, 824, 867, 886, 894, 908, 913, 935, 987, 993, 1090, 1092, 1094, 1095, 1096, 1097, 1100, 1101, 1107, 1108, 1112, 1114, 1115, 1116, 1117, 1120, 1121, 1122, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1138, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1355, 1356, 1360, 1400, 1423, 1426], "010": [9, 754, 1358], "01000": 29, "01000010": [780, 867], "01000110": [780, 867], "012": [695, 732, 867, 1296, 1336, 1400], "0123": [759, 1363], "01234": [695, 867, 1296, 1400], "012345": 1127, "015625": [1261, 1400], "01\u00b2": [732, 1336], "02": [57, 214, 221, 241, 243, 287, 325, 355, 468, 470, 472, 478, 488, 489, 491, 495, 500, 501, 503, 506, 508, 512, 674, 678, 680, 682, 684, 686, 689, 691, 693, 694, 749, 751, 752, 756, 791, 804, 805, 806, 807, 808, 809, 810, 824, 867, 886, 894, 908, 935, 987, 993, 1037, 1092, 1094, 1096, 1097, 1100, 1101, 1107, 1108, 1112, 1114, 1115, 1116, 1120, 1121, 1122, 1125, 1126, 1129, 1132, 1134, 1135, 1234, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1355, 1356, 1360, 1400, 1423, 1424], "03": [57, 138, 150, 214, 243, 258, 287, 325, 355, 470, 472, 473, 478, 480, 488, 489, 491, 494, 495, 496, 498, 500, 501, 502, 503, 506, 508, 509, 512, 518, 531, 674, 678, 680, 682, 684, 686, 689, 691, 693, 751, 756, 804, 805, 806, 807, 808, 809, 810, 867, 886, 908, 913, 935, 987, 993, 1092, 1094, 1095, 1100, 1101, 1107, 1108, 1114, 1115, 1116, 1121, 1122, 1124, 1126, 1128, 1129, 1132, 1134, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1355, 1360, 1400], "037037": [1261, 1400], "04": [171, 214, 221, 243, 325, 355, 472, 473, 488, 489, 494, 495, 496, 498, 502, 503, 506, 508, 512, 678, 680, 682, 684, 686, 689, 691, 693, 749, 791, 804, 807, 808, 810, 867, 886, 894, 908, 987, 993, 1095, 1108, 1112, 1114, 1115, 1116, 1121, 1124, 1128, 1129, 1132, 1134, 1138, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1400, 1423], "047198": 1425, "05": [17, 171, 174, 175, 176, 177, 181, 214, 221, 325, 355, 468, 471, 472, 473, 474, 475, 479, 480, 483, 484, 485, 486, 488, 489, 490, 495, 497, 498, 499, 501, 502, 791, 804, 805, 807, 808, 886, 894, 987, 993, 1094, 1095, 1096, 1097, 1121, 1122, 1124, 1125, 1127, 1128, 1135, 1423, 1424, 1426], "050545": 138, "0522623626787952": [1191, 1400], "0545": [1096, 1097, 1125], "05t10": 1127, "06": [181, 214, 325, 355, 468, 472, 487, 493, 495, 496, 497, 509, 510, 804, 807, 824, 886, 987, 993, 1090, 1121, 1122, 1127, 1135], "060": [474, 475, 479, 483, 485, 486, 490, 497, 499], "0601749420166": [229, 355], "06293300616044681": [1141, 1400], "07": [17, 150, 181, 221, 355, 468, 471, 472, 484, 495, 496, 501, 509, 749, 804, 805, 807, 808, 816, 894, 987, 993, 1090, 1094, 1121, 1127, 1353, 1423, 1426], "071068": [221, 355, 894, 987], "08": [150, 174, 175, 176, 177, 221, 258, 287, 302, 355, 468, 472, 488, 489, 496, 501, 674, 749, 808, 810, 824, 867, 894, 913, 935, 987, 993, 1090, 1122, 1135, 1353, 1423, 1424], "085537": [1150, 1400], "09": [57, 150, 221, 287, 355, 468, 472, 488, 489, 501, 549, 654, 674, 753, 804, 805, 807, 855, 867, 894, 935, 987, 993, 1090, 1176, 1357, 1400], "090909": [655, 867], "094395": 1425, "098612": [609, 867, 1237, 1239, 1400, 1422], "0999": [471, 484], "0_": [41, 355], "0m": [477, 1099], "0x11bc0ad80": 992, "0\u00b5": 501, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 52, 57, 58, 59, 60, 61, 63, 65, 66, 69, 84, 88, 96, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 151, 154, 155, 156, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 181, 185, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 362, 363, 365, 366, 367, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 429, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 737, 741, 742, 743, 744, 745, 746, 753, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 863, 867, 882, 883, 884, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 993, 997, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1046, 1057, 1058, 1059, 1063, 1064, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1194, 1195, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1324, 1326, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1339, 1340, 1341, 1345, 1346, 1357, 1363, 1364, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1400, 1405, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1429, 1430, 1431], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 57, 65, 138, 150, 151, 153, 165, 173, 211, 216, 221, 225, 231, 240, 241, 243, 245, 247, 248, 249, 254, 258, 261, 262, 274, 278, 280, 285, 287, 293, 302, 306, 329, 334, 337, 339, 342, 343, 344, 345, 346, 347, 348, 355, 380, 384, 392, 393, 394, 396, 450, 456, 459, 464, 468, 469, 471, 472, 474, 475, 477, 479, 483, 484, 485, 486, 488, 489, 490, 494, 495, 496, 497, 499, 501, 509, 512, 518, 539, 540, 541, 546, 553, 565, 573, 580, 582, 588, 598, 600, 602, 606, 608, 624, 626, 637, 652, 654, 655, 658, 668, 669, 674, 706, 754, 764, 767, 780, 791, 792, 800, 805, 807, 808, 811, 814, 816, 818, 826, 827, 852, 855, 867, 889, 890, 894, 897, 908, 909, 911, 913, 917, 927, 929, 935, 937, 947, 948, 956, 963, 966, 968, 971, 972, 973, 974, 975, 976, 977, 987, 993, 1072, 1086, 1090, 1091, 1093, 1094, 1099, 1109, 1121, 1127, 1135, 1138, 1141, 1147, 1169, 1181, 1195, 1203, 1212, 1218, 1228, 1230, 1232, 1236, 1238, 1242, 1258, 1271, 1298, 1300, 1358, 1371, 1378, 1380, 1383, 1400, 1409, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1426, 1431], "100": [11, 18, 28, 41, 53, 134, 137, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 211, 259, 279, 298, 355, 501, 668, 669, 699, 713, 723, 725, 737, 809, 867, 914, 941, 987, 993, 1143, 1238, 1254, 1270, 1271, 1278, 1280, 1284, 1303, 1317, 1329, 1332, 1341, 1357, 1400, 1420, 1431], "1000": [229, 311, 332, 355, 385, 867, 960, 987, 1130, 1238, 1377, 1400, 1431], "10000": [150, 256, 355], "100000": [11, 28], "1000000": [12, 1133], "1001": [332, 355, 960, 987], "1002": [332, 355, 960, 987], "10047419486152048166": [244, 355], "1005": [385, 867], "100_000": [53, 152, 845, 918, 987], "100\u00b5": 501, "101": [9, 28, 259, 355, 472, 501, 754, 914, 987, 993, 1358, 1431], "101000": 472, "10101": [28, 1426], "1010101": 9, "101514": [221, 355, 894, 987], "102": [259, 355, 914, 987], "1024": [38, 47, 48, 51, 150, 151, 152, 160, 169, 355, 429, 987, 1046], "1040361802642717": [1191, 1400], "107149": 1425, "10734580197236529959": [1168, 1400], "1073741824": [700, 867], "10783150408545073287": [244, 355], "107_930_000": 1409, "10_000": [41, 355], "10i": [243, 355, 908, 987], "10m": [496, 509, 1122, 1135], "10t00": 501, "11": [11, 17, 47, 51, 173, 181, 212, 221, 258, 287, 355, 380, 488, 489, 491, 496, 509, 533, 546, 580, 631, 655, 664, 674, 676, 690, 706, 780, 824, 850, 855, 863, 867, 883, 889, 890, 894, 909, 913, 917, 929, 935, 948, 987, 993, 1117, 1122, 1135, 1242, 1277, 1400, 1418], "110": [225, 355, 737, 754, 897, 987, 1358], "1101441246220388612": [540, 867], "111": [11, 1420], "11111": 1123, "111110": 1123, "11111001": [780, 867], "11111010": [780, 867], "11111111": 11, "112": [700, 867, 1431], "11330": 180, "1152921504606846976": [1267, 1400], "116": 180, "11638928888656214026": [540, 867], "118034": [946, 987], "11aa": 1423, "11aabb": 1423, "11h": [469, 1091], "12": [27, 41, 57, 138, 150, 173, 181, 221, 243, 254, 258, 259, 287, 302, 325, 355, 380, 458, 468, 469, 471, 472, 476, 484, 487, 488, 489, 491, 492, 493, 494, 501, 510, 511, 518, 546, 580, 612, 628, 655, 663, 674, 690, 700, 714, 735, 753, 801, 804, 807, 808, 809, 824, 827, 853, 854, 855, 867, 894, 908, 909, 913, 914, 917, 935, 942, 948, 987, 993, 1091, 1093, 1094, 1106, 1107, 1109, 1113, 1120, 1127, 1147, 1242, 1295, 1318, 1340, 1357, 1400, 1422, 1423, 1424, 1426, 1428, 1431], "120": [259, 355, 810, 914, 987, 1425], "1200": [695, 867], "120134": [753, 1357], "121": 1431, "123": [9, 621, 714, 721, 736, 759, 857, 993, 1318, 1325, 1363, 1376, 1400], "123000": 993, "1232e": [1074, 1076, 1400], "1234": [28, 695, 867], "12345": [816, 1069, 1127, 1159, 1295, 1400], "1234500": 993, "123456": [9, 993], "1234567": 28, "123456780": 138, "12346": 816, "123465": 993, "123a123": 736, "123abc": [735, 1339, 1340], "125": [1, 41, 61, 355, 378, 659, 846, 867, 945, 987, 1258, 1261, 1400], "1252": 150, "127": [1388, 1400, 1419], "128": [59, 73, 79, 1258, 1400], "129": [700, 867], "13": [141, 215, 216, 221, 232, 233, 240, 259, 260, 274, 287, 329, 337, 339, 342, 343, 344, 345, 346, 347, 348, 355, 380, 468, 474, 475, 479, 483, 485, 486, 490, 497, 499, 624, 626, 674, 753, 794, 800, 803, 807, 814, 851, 853, 856, 867, 887, 888, 894, 902, 903, 914, 916, 935, 956, 966, 968, 971, 972, 973, 974, 975, 976, 977, 987, 1090, 1122, 1135, 1136, 1242, 1357, 1400, 1419], "130": [259, 355, 914, 987], "13382926553367784577": [540, 867], "134821952": 1409, "134_821_952": 1409, "135": [788, 1425], "13614470193936745724": [540, 867], "13756996518000038261": [1168, 1400], "13d": 501, "13h": [469, 1091], "14": [40, 173, 221, 243, 259, 263, 287, 325, 337, 339, 342, 343, 344, 345, 346, 347, 348, 355, 469, 474, 475, 479, 483, 485, 486, 490, 497, 499, 501, 546, 621, 664, 807, 853, 854, 867, 894, 908, 914, 935, 966, 968, 971, 972, 973, 974, 975, 976, 977, 987, 993, 1091, 1122, 1127], "140": [259, 355, 914, 987], "141592653589793": 11, "141593": [663, 867, 1004, 1400, 1422, 1425], "142857": [1258, 1400], "143": [753, 1357, 1431], "1433": [39, 355], "1436e16": 181, "1438741209321515184": [244, 355], "1440": [506, 1132], "1443e235": 1431, "149": 1431, "14d": 993, "14h": 501, "15": [11, 41, 141, 173, 221, 243, 259, 263, 287, 355, 460, 464, 489, 494, 496, 501, 509, 518, 658, 674, 690, 732, 801, 807, 853, 854, 867, 894, 908, 914, 935, 987, 993, 1083, 1086, 1122, 1127, 1135, 1147, 1336, 1400, 1419, 1423], "150": [259, 355, 914, 987, 1280, 1400], "1500": [173, 184], "15000": [256, 355], "153061": [561, 867], "155": 146, "15836": 181, "15_000": [256, 355], "16": [1, 41, 59, 80, 90, 173, 187, 221, 243, 259, 287, 329, 355, 410, 456, 459, 494, 501, 546, 628, 635, 654, 659, 674, 754, 764, 800, 810, 811, 814, 824, 867, 894, 908, 914, 935, 942, 956, 987, 993, 1122, 1135, 1258, 1308, 1358, 1372, 1400, 1419, 1422, 1423, 1428], "160": [259, 355, 914, 987], "165": [1122, 1135], "1656e15": [1076, 1400], "166667": [777, 867, 1258, 1389, 1400], "1666683077": 816, "1666683099": 816, "167": 57, "16996": 1431, "16h": 993, "17": [138, 173, 181, 229, 258, 334, 355, 518, 544, 654, 676, 694, 796, 816, 854, 867, 913, 963, 987, 1074, 1076, 1122, 1147, 1172, 1277, 1400, 1431], "170": [146, 259, 355, 914, 987], "17293822569102704640": [1267, 1400], "174": 1431, "175201": [704, 867, 1309, 1400], "1755e": [178, 181], "1764": 61, "17888890": [229, 355], "179": 1431, "17_500": [256, 355], "18": [39, 138, 155, 221, 271, 287, 355, 459, 496, 509, 512, 546, 637, 654, 674, 764, 867, 894, 924, 929, 935, 987, 993, 1127, 1138, 1285, 1400, 1417, 1428], "180": [146, 462, 663, 867, 1425], "1800": [494, 1120], "1844": 181, "18446744073709551614": [1267, 1400], "185_000_000": 1409, "186": 1431, "1875": [692, 867, 954, 987], "1897": [471, 484, 1093, 1109], "18d": 993, "19": [181, 258, 287, 355, 471, 496, 674, 680, 682, 684, 686, 753, 867, 913, 935, 987, 1093, 1122, 1135, 1281, 1283, 1285, 1287, 1357, 1400], "1920": 1423, "196": 1424, "1964": [929, 987], "1969": [1423, 1424], "1970": [71, 72, 171, 509, 1135, 1409], "1972": 1409, "1976": [482, 513], "1977": [482, 513], "1978": [474, 475, 479, 482, 483, 485, 486, 490, 497, 499, 513, 1424], "1979": [482, 513], "1980": 501, "1985": [805, 808], "1990": [150, 1409], "1993": 1409, "1994": 1409, "1995": 150, "1998": [491, 1117], "1999": [302, 355, 491, 501, 993, 1117, 1127, 1426], "199992": [918, 987], "199994": [918, 987], "199996": [918, 987], "199998": [918, 987], "1_000_000": [229, 355, 1145, 1400], "1_234_500": 993, "1d": [243, 258, 287, 325, 355, 470, 491, 496, 501, 503, 506, 509, 512, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 810, 826, 854, 855, 867, 908, 913, 935, 987, 993, 1092, 1100, 1107, 1117, 1122, 1126, 1129, 1132, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1e": [12, 174, 175, 176, 177, 549, 867, 1176, 1400], "1e6": 12, "1h": [243, 258, 287, 325, 355, 477, 491, 496, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1099, 1101, 1117, 1122, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1i": [243, 287, 325, 355, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 867, 908, 935, 987, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1m": [243, 258, 287, 325, 355, 491, 496, 508, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1130, 1131, 1133, 1134, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1mo": [243, 258, 287, 325, 355, 473, 488, 489, 491, 495, 496, 502, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1095, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1128, 1135, 1136, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1n": [243, 258, 287, 325, 355, 491, 496, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1q": [243, 258, 287, 325, 355, 491, 496, 509, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1st_col": 993, "1u": [243, 258, 287, 325, 355, 491, 496, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1w": [243, 258, 287, 325, 355, 491, 496, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1w2d": [805, 806], "1y": [243, 258, 287, 325, 355, 491, 496, 509, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "1y2mo": [491, 1117], "1zy3": [714, 1318], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 65, 66, 84, 88, 102, 105, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 153, 159, 160, 162, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 195, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 362, 363, 366, 367, 373, 377, 378, 379, 380, 382, 384, 385, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 428, 429, 431, 436, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 480, 481, 484, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 840, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857, 863, 867, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 992, 993, 997, 998, 999, 1002, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045, 1046, 1057, 1058, 1064, 1068, 1069, 1070, 1071, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1094, 1096, 1097, 1099, 1101, 1102, 1105, 1106, 1107, 1109, 1111, 1112, 1113, 1114, 1115, 1119, 1120, 1121, 1122, 1125, 1135, 1137, 1138, 1139, 1140, 1141, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1318, 1324, 1326, 1328, 1329, 1330, 1332, 1333, 1335, 1336, 1339, 1340, 1345, 1346, 1348, 1349, 1350, 1353, 1354, 1356, 1357, 1358, 1359, 1362, 1364, 1366, 1367, 1369, 1370, 1371, 1372, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1400, 1405, 1409, 1410, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1429, 1430, 1431], "20": [39, 40, 41, 66, 138, 150, 151, 153, 155, 156, 158, 162, 165, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 188, 211, 212, 221, 225, 231, 243, 247, 262, 271, 278, 280, 285, 287, 302, 312, 313, 317, 325, 331, 336, 355, 392, 393, 394, 450, 464, 471, 474, 475, 479, 483, 484, 485, 486, 490, 496, 497, 499, 501, 509, 512, 533, 540, 546, 612, 620, 631, 658, 678, 680, 682, 684, 686, 689, 691, 693, 719, 753, 764, 779, 807, 816, 826, 846, 854, 867, 883, 894, 897, 900, 908, 924, 927, 935, 945, 959, 965, 987, 993, 1086, 1093, 1097, 1109, 1122, 1127, 1135, 1138, 1144, 1150, 1167, 1270, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1323, 1357, 1378, 1380, 1383, 1400, 1416, 1417, 1420, 1426, 1428], "200": [41, 355, 504, 505, 507, 668, 669, 867, 993, 1143, 1254, 1270, 1271, 1278, 1280, 1284, 1400, 1420], "2000": [471, 481, 484, 488, 489, 491, 993, 1093, 1103, 1109, 1114, 1115, 1117, 1123, 1409, 1423], "200000": [504, 918, 987], "200000000": 507, "2001": [17, 470, 471, 476, 478, 481, 484, 487, 491, 492, 493, 496, 500, 509, 510, 511, 512, 678, 680, 682, 684, 686, 689, 691, 693, 749, 867, 993, 1092, 1093, 1098, 1100, 1101, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1119, 1122, 1126, 1135, 1136, 1137, 1138, 1139, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1400], "2002": [150, 481, 491, 1103, 1117, 1139], "2003": [491, 816, 1117], "2004": [491, 1117], "2005": [491, 1117], "2006": [491, 1117], "2008": 1409, "200m": [504, 505, 507], "2010": [302, 355, 501, 993], "2011": [469, 1091], "2012": [469, 1091, 1426], "2013": 1120, "2016": [258, 355, 913, 987], "2017": [258, 355, 913, 987], "2018": [258, 355, 495, 913, 987, 1121], "2019": [258, 355, 913, 987], "202": 1424, "2020": [154, 166, 214, 221, 241, 258, 287, 355, 358, 468, 473, 477, 480, 495, 498, 501, 502, 503, 504, 505, 506, 507, 508, 518, 674, 749, 751, 752, 791, 867, 886, 894, 913, 935, 987, 993, 1090, 1095, 1099, 1102, 1121, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1147, 1353, 1355, 1356, 1400, 1424], "2021": [214, 221, 241, 243, 325, 355, 749, 826, 886, 894, 908, 987, 993, 1096, 1097, 1104, 1125, 1353, 1423], "2022": [57, 214, 221, 241, 355, 472, 496, 509, 749, 805, 806, 808, 809, 810, 816, 886, 894, 987, 993, 1094, 1104, 1122, 1135, 1353], "2023": [17, 41, 138, 173, 256, 355, 472, 810, 826, 993, 1094], "2024": [173, 468, 474, 475, 479, 480, 483, 485, 486, 490, 494, 497, 499, 654, 791, 804, 805, 807, 808, 810, 867, 993, 1090, 1102, 1120, 1423, 1426], "2025": [468, 480, 494, 791, 824, 993, 1090, 1102], "2026": 1424, "2030": 1423, "2031": 993, "2040": 501, "2047317070637311557": [244, 355], "2055938745": 138, "2065": [474, 475, 479, 483, 485, 486, 490, 497, 499], "2068": 181, "207": 1424, "2077": [302, 355, 501, 993, 1127, 1423, 1424], "2095": 181, "20_000": [41, 355], "20t08": 501, "20t18": 1127, "20word": 153, "21": [173, 221, 271, 304, 355, 460, 471, 517, 519, 520, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 807, 816, 824, 842, 843, 867, 894, 924, 987, 993, 1083, 1093, 1146, 1148, 1149, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1400, 1417], "213": 1431, "2147483647": 1431, "2147483648": [1240, 1400], "21d": 993, "22": [47, 51, 173, 181, 355, 476, 492, 496, 509, 511, 512, 676, 678, 680, 682, 684, 686, 689, 691, 693, 749, 807, 863, 867, 987, 993, 1122, 1135, 1138, 1277, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1400, 1423, 1424, 1431], "221": 1431, "2246e": [1308, 1372, 1400], "225": [496, 509, 1425], "22500": 845, "22_000_000": 1409, "22_500": 845, "23": [11, 132, 181, 221, 243, 287, 317, 355, 472, 476, 479, 492, 494, 496, 501, 511, 674, 678, 680, 682, 684, 686, 689, 691, 693, 807, 810, 853, 854, 855, 867, 894, 908, 935, 945, 987, 993, 1094, 1101, 1120, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1383, 1400, 1430, 1431], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1409, "2337": [41, 355], "234": 28, "2345": 993, "23456789": 11, "235": 1431, "23h": 993, "24": [59, 173, 243, 257, 258, 263, 287, 302, 325, 355, 458, 460, 476, 491, 492, 496, 503, 509, 511, 635, 674, 678, 680, 682, 684, 686, 689, 691, 693, 732, 805, 806, 808, 809, 810, 854, 855, 867, 908, 912, 913, 935, 987, 1083, 1117, 1122, 1129, 1135, 1190, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1374, 1400, 1423, 1430], "24030": 180, "249": [780, 867], "25": [1, 28, 41, 61, 138, 221, 225, 243, 248, 258, 287, 312, 317, 325, 329, 355, 429, 464, 476, 477, 492, 501, 511, 518, 659, 661, 664, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 773, 807, 808, 809, 810, 816, 824, 825, 828, 854, 855, 867, 894, 897, 908, 913, 921, 935, 954, 956, 987, 993, 1046, 1085, 1086, 1099, 1127, 1141, 1147, 1170, 1258, 1263, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1339, 1400, 1417, 1422, 1428, 1429], "250": [780, 867, 1280, 1400, 1420, 1431], "2500": [256, 317, 355], "254508": [518, 867, 1147, 1400], "255": 1431, "256": [263, 355, 429, 1046, 1258, 1400, 1422], "2560": 1046, "259921": [448, 867, 1068, 1400, 1422], "25_000_000": 1409, "26": [39, 41, 173, 178, 179, 180, 181, 185, 221, 355, 477, 510, 894, 987, 1099], "266667": [221, 355, 894, 987], "27": [1, 61, 312, 348, 355, 459, 487, 493, 510, 764, 791, 867, 977, 993, 1090, 1261, 1378, 1400, 1430, 1431], "270": 1425, "28": [308, 313, 355, 378, 495, 512, 867, 1121, 1138, 1380, 1400, 1423, 1425, 1430, 1431], "283185": [663, 867], "2846": 355, "285714": [547, 867, 1174, 1400], "289962": 1425, "28_341_469": 1409, "29": [17, 173, 469, 488, 1091, 1114], "29096": 1431, "290994": [946, 987], "292432": [1005, 1400], "292893": [518, 867, 1147, 1400], "2_color_scal": [41, 355], "2d": [211, 287, 312, 313, 355, 491, 674, 826, 867, 935, 987, 1091, 1098], "2h": [678, 680, 682, 684, 686, 689, 691, 693, 867], "2i": [243, 355, 908, 987], "2m": [993, 1112], "2x": 180, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 57, 58, 59, 60, 61, 65, 66, 84, 96, 102, 105, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 153, 155, 159, 160, 161, 165, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 362, 363, 367, 373, 378, 379, 380, 381, 383, 394, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 633, 634, 635, 636, 637, 638, 640, 642, 644, 645, 648, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 707, 708, 709, 712, 713, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 750, 751, 756, 757, 759, 760, 761, 762, 763, 764, 765, 767, 771, 772, 775, 776, 777, 779, 780, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 867, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 992, 993, 998, 999, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1047, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1068, 1069, 1070, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1094, 1095, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1111, 1112, 1113, 1118, 1121, 1123, 1124, 1126, 1127, 1128, 1130, 1131, 1133, 1137, 1138, 1140, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1164, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1194, 1195, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1317, 1319, 1320, 1321, 1324, 1325, 1326, 1329, 1330, 1331, 1332, 1334, 1335, 1339, 1340, 1341, 1342, 1343, 1347, 1354, 1355, 1360, 1361, 1364, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1379, 1380, 1381, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1400, 1405, 1409, 1410, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1429, 1430, 1431], "30": [41, 63, 153, 162, 170, 211, 221, 231, 243, 247, 262, 278, 285, 308, 329, 355, 358, 392, 393, 394, 464, 472, 474, 475, 479, 483, 485, 486, 487, 488, 490, 493, 495, 496, 497, 499, 501, 502, 509, 510, 540, 620, 700, 807, 824, 826, 853, 854, 867, 889, 894, 900, 908, 927, 929, 942, 956, 987, 993, 1086, 1094, 1114, 1121, 1122, 1127, 1128, 1135, 1167, 1400, 1405, 1416, 1417, 1420, 1422, 1423, 1425, 1426, 1429, 1431], "300": [308, 355, 539, 652, 669, 867, 993, 1271, 1278, 1280, 1284, 1400, 1420], "3000": 993, "3002": [471, 484, 1093, 1109], "30103": [608, 867, 1422], "3022416320763508302": [1168, 1400], "30_000": [41, 355], "30m": [243, 355, 496, 509, 908, 987, 1122, 1135], "30t16": 501, "31": [61, 66, 150, 151, 165, 174, 175, 176, 177, 221, 302, 355, 471, 472, 476, 484, 488, 491, 494, 502, 719, 749, 804, 807, 816, 826, 846, 894, 987, 993, 1091, 1093, 1094, 1098, 1109, 1114, 1120, 1127, 1128, 1144, 1270, 1323, 1353, 1400, 1424, 1426, 1428, 1431], "31t06": 1127, "32": [8, 59, 69, 71, 77, 81, 91, 174, 175, 176, 177, 253, 258, 287, 355, 612, 613, 635, 674, 700, 867, 913, 935, 987, 1087, 1118, 1258, 1286, 1400, 1417, 1423], "321": [28, 1431], "3212": [753, 1357], "321cba": 1423, "3265500": 993, "32971": [512, 1138], "32974": [512, 1138], "32976": [512, 1138], "32bit": [312, 355], "33": [221, 271, 355, 604, 694, 700, 728, 753, 867, 894, 924, 987, 1286, 1400, 1424], "333": [17, 695, 867, 1143, 1254, 1296, 1400], "33333": 1426, "333333": [249, 355, 637, 777, 824, 867, 911, 987, 1258, 1293, 1389, 1400, 1417], "34": [221, 355, 735, 749, 894, 987, 1340, 1353], "3420": [753, 1357], "343622": [705, 867], "345": [445, 446, 730, 731, 1063, 1064, 1334, 1335], "3450": [1296, 1400], "3456": 993, "34776706224699483": [1310, 1400], "35": [41, 355, 464, 501, 807, 867, 1086, 1400], "350": [355, 358, 539, 652, 867, 1280, 1400, 1405], "3500": [1296, 1400], "356": [476, 492, 511], "356194": [787, 788, 1425], "357": [476, 492, 511], "358": [476, 492, 511], "359": [476, 492, 511], "36": [221, 355, 894, 987, 1428], "360": [462, 663, 867, 1425], "361": 1431, "363961": [600, 1230], "366": [492, 1118], "37": [13, 141, 993], "370h": [518, 867, 1147, 1400], "37338": 1431, "38": [41, 138, 178, 181, 355], "38180177416060584": [687, 867, 1288, 1400], "381802": [687, 867, 1288, 1400], "386294": [609, 867, 1239, 1400, 1422], "389056": [522, 867, 1150, 1400, 1422], "39": [691, 816, 867], "39m": 993, "3_color_scal": [41, 355], "3d12h4m25": [243, 258, 287, 325, 355, 518, 674, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1147, 1400], "3f": [153, 749, 752, 1353, 1356], "3h": [1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "3i": [243, 287, 355, 908, 987], "3rd": [1330, 1354], "3xy": [714, 1318], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 57, 58, 59, 60, 61, 65, 66, 84, 105, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 151, 153, 156, 158, 162, 165, 168, 169, 170, 173, 185, 209, 210, 211, 212, 213, 214, 215, 216, 220, 222, 226, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 271, 273, 274, 275, 277, 278, 279, 280, 283, 287, 289, 290, 297, 298, 301, 305, 306, 307, 308, 309, 310, 313, 316, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 367, 373, 377, 378, 379, 380, 382, 384, 396, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 417, 418, 419, 420, 422, 429, 440, 441, 442, 445, 446, 448, 449, 450, 454, 455, 458, 459, 460, 462, 465, 472, 475, 476, 484, 492, 493, 494, 495, 497, 498, 501, 503, 506, 508, 511, 515, 516, 518, 522, 523, 525, 526, 527, 529, 530, 531, 534, 535, 536, 537, 538, 541, 543, 545, 546, 547, 548, 558, 559, 563, 564, 565, 572, 573, 574, 575, 576, 577, 579, 580, 582, 590, 592, 593, 594, 595, 596, 597, 598, 602, 603, 608, 611, 612, 613, 633, 635, 637, 638, 640, 642, 644, 645, 648, 649, 650, 653, 654, 656, 657, 658, 659, 662, 664, 668, 669, 670, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 699, 702, 706, 707, 708, 709, 712, 714, 718, 721, 724, 725, 726, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 747, 748, 749, 750, 754, 759, 760, 762, 763, 764, 765, 767, 770, 771, 772, 773, 779, 780, 782, 784, 785, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 811, 813, 814, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 863, 867, 882, 883, 884, 886, 887, 888, 889, 890, 893, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 924, 925, 927, 929, 930, 932, 935, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 959, 960, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 992, 993, 997, 1002, 1005, 1012, 1019, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1046, 1057, 1058, 1063, 1064, 1069, 1070, 1072, 1078, 1083, 1085, 1087, 1097, 1101, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1119, 1121, 1124, 1129, 1132, 1134, 1136, 1137, 1144, 1147, 1151, 1152, 1154, 1155, 1161, 1162, 1164, 1169, 1170, 1173, 1174, 1175, 1176, 1177, 1181, 1184, 1185, 1186, 1187, 1189, 1195, 1202, 1203, 1204, 1205, 1206, 1207, 1212, 1216, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1232, 1233, 1248, 1251, 1252, 1255, 1258, 1259, 1260, 1261, 1265, 1266, 1270, 1271, 1272, 1275, 1276, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1299, 1303, 1304, 1307, 1310, 1311, 1312, 1316, 1318, 1322, 1325, 1328, 1330, 1334, 1335, 1337, 1338, 1343, 1345, 1346, 1351, 1352, 1353, 1354, 1358, 1363, 1364, 1367, 1369, 1371, 1377, 1380, 1382, 1384, 1385, 1391, 1400, 1405, 1409, 1410, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1428, 1429, 1430, 1431], "40": [41, 153, 211, 221, 231, 258, 262, 278, 355, 496, 501, 509, 540, 606, 753, 764, 867, 894, 913, 927, 987, 993, 1104, 1135, 1236, 1357, 1416, 1417, 1420, 1423], "400": [324, 355, 504, 505, 507, 953, 987, 1278, 1280, 1284, 1400, 1420], "4000000": [1145, 1400], "400157": 96, "404": [259, 355, 720, 722, 914, 987, 1324, 1326], "4096": 1422, "41": [221, 355, 691, 867, 894, 987, 1417, 1431], "412277": 181, "414214": [709, 867, 1313, 1400, 1422], "4160": 61, "416147": 1425, "4164": [258, 355, 913, 987], "4180": 150, "42": [61, 141, 221, 244, 271, 287, 355, 501, 674, 867, 894, 924, 935, 987, 1168, 1400, 1416, 1430], "424778": [663, 867], "428571": [517, 867, 1146, 1400], "429101": 1417, "4294967296": [47, 355], "43": [221, 287, 355, 459, 674, 691, 867, 894, 935, 987], "4321": [41, 355, 993], "433013": [688, 867, 946, 987], "44": [11, 41, 271, 355, 465, 867, 924, 987], "4411": [258, 355, 913, 987], "44225": [1068, 1400], "444": [11, 41, 355], "44444444444": 11, "45": [41, 221, 287, 355, 472, 496, 509, 674, 691, 714, 721, 761, 788, 807, 826, 853, 854, 867, 894, 935, 987, 993, 1094, 1122, 1127, 1135, 1176, 1318, 1325, 1366, 1400, 1422, 1423, 1425, 1429, 1431], "450": [1280, 1400], "45000": 845, "4500000": 993, "456": [9, 11, 472, 993, 1094, 1376, 1400], "456000": [472, 1094], "456001\u00b5": 993, "4566": [258, 355, 913, 987], "456789": [501, 993, 1123], "456789\u00b5": 993, "456m": 993, "457658": 1425, "459148": [514, 867], "46": 993, "4696": [258, 355, 913, 987], "47": [57, 221, 355, 691, 867, 894, 987, 993, 1417], "470": [929, 987], "47033": [687, 867, 1288, 1400], "47033046033698594": [687, 867, 1288, 1400], "475": [929, 987], "48": [13, 181, 287, 355, 674, 764, 867, 935, 987, 993], "4827": [258, 355, 913, 987], "485": 1431, "49": [221, 355, 894, 987, 993], "492474": [518, 867, 1147, 1400], "498": [259, 355, 914, 987], "4_500_000": 993, "4ab4a": 1423, "4d": [518, 867, 1147, 1400], "4f6228": [41, 355], "4f71": [41, 355], "4x": [255, 355], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 41, 43, 44, 47, 52, 57, 58, 60, 61, 65, 105, 131, 134, 135, 136, 137, 138, 140, 151, 173, 174, 176, 179, 181, 185, 210, 211, 214, 215, 216, 221, 222, 225, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 246, 248, 249, 251, 253, 254, 255, 257, 258, 259, 260, 261, 263, 266, 267, 268, 273, 274, 275, 277, 279, 280, 281, 283, 287, 290, 297, 298, 301, 302, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 319, 322, 323, 324, 325, 328, 329, 331, 332, 334, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 367, 373, 378, 379, 382, 397, 398, 403, 404, 405, 407, 411, 415, 420, 422, 428, 429, 440, 441, 442, 445, 446, 449, 450, 460, 461, 462, 464, 465, 468, 471, 472, 473, 474, 475, 479, 480, 483, 484, 485, 486, 490, 495, 497, 498, 499, 501, 502, 508, 512, 516, 518, 520, 521, 524, 526, 530, 531, 535, 536, 538, 541, 543, 546, 548, 549, 552, 555, 556, 557, 558, 559, 563, 565, 572, 575, 576, 577, 579, 580, 582, 585, 587, 588, 592, 593, 594, 595, 596, 597, 601, 602, 606, 612, 633, 635, 637, 649, 653, 654, 655, 656, 657, 658, 659, 661, 662, 664, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 688, 690, 691, 692, 693, 694, 697, 708, 714, 724, 725, 726, 729, 730, 731, 750, 754, 765, 767, 771, 772, 773, 777, 785, 787, 788, 790, 791, 792, 793, 794, 796, 798, 800, 801, 802, 803, 804, 805, 807, 810, 811, 812, 813, 814, 818, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 844, 845, 846, 848, 850, 851, 852, 856, 857, 863, 867, 882, 886, 887, 888, 889, 890, 894, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 921, 922, 928, 929, 932, 935, 941, 942, 943, 944, 945, 946, 947, 948, 952, 953, 955, 956, 959, 960, 963, 965, 966, 967, 968, 971, 972, 973, 974, 975, 976, 977, 978, 987, 993, 1002, 1005, 1009, 1012, 1015, 1016, 1019, 1021, 1022, 1023, 1025, 1028, 1032, 1037, 1038, 1039, 1045, 1046, 1057, 1058, 1063, 1070, 1072, 1079, 1083, 1084, 1085, 1086, 1087, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1102, 1109, 1121, 1123, 1124, 1125, 1127, 1128, 1134, 1136, 1137, 1138, 1144, 1147, 1149, 1151, 1152, 1153, 1164, 1169, 1170, 1173, 1175, 1176, 1180, 1183, 1195, 1202, 1205, 1206, 1207, 1212, 1215, 1218, 1222, 1223, 1224, 1225, 1226, 1227, 1231, 1232, 1236, 1240, 1248, 1255, 1258, 1259, 1260, 1263, 1264, 1265, 1266, 1271, 1272, 1275, 1276, 1277, 1278, 1280, 1281, 1283, 1284, 1286, 1287, 1291, 1295, 1297, 1299, 1304, 1310, 1313, 1318, 1328, 1329, 1330, 1333, 1334, 1354, 1358, 1371, 1378, 1380, 1383, 1384, 1385, 1388, 1389, 1391, 1400, 1405, 1410, 1413, 1415, 1417, 1418, 1419, 1422, 1423, 1424, 1425, 1428, 1430, 1431], "50": [13, 28, 41, 211, 221, 231, 241, 355, 450, 496, 501, 509, 805, 806, 867, 894, 987, 993, 1072, 1085, 1135, 1339, 1400, 1416, 1417], "500": [41, 324, 355, 358, 474, 475, 479, 483, 485, 486, 490, 497, 499, 953, 987, 1108, 1110, 1116, 1278, 1280, 1284, 1400, 1405], "5000": [317, 355, 1383, 1400], "50000": 151, "500000": [483, 1108], "500000000": [490, 1116], "5000555": 993, "500_000": [474, 475, 479, 483, 485, 486, 490, 497, 499], "500m": [1108, 1110, 1116], "51": 993, "512": [47, 152, 255, 355, 429, 659, 867, 1046, 1258, 1400], "51966": [754, 1358], "52": [329, 355, 510, 694, 867, 956, 987], "523599": 1425, "527525": [1289, 1400], "53": [510, 1136, 1428], "533316061": 1409, "533_316_061": 1409, "54": [522, 867, 1191, 1400, 1422, 1431], "540": [462, 663, 867], "540302": 1425, "543": 9, "543081": [452, 867, 1075, 1400], "5432": 152, "54321": 9, "544": 1431, "544705": 796, "549306": [1009, 1400], "55": [41, 59, 355, 544, 549, 867, 1172, 1400, 1419, 1423, 1424], "555": [41, 355], "5555": 993, "55550": 993, "56": [138, 735, 768, 867, 1340], "566371": [663, 867], "567": 28, "56789": [1069, 1159, 1295, 1400], "57": [691, 867, 1292, 1295, 1400, 1425, 1431], "570796": [386, 388, 867, 1004, 1006, 1400, 1425], "575050513": [178, 181], "58": [146, 279, 355], "581139": [1085, 1400], "584963": [607, 867], "587401": [448, 867, 1422], "59": [138, 221, 355, 472, 486, 494, 497, 501, 531, 807, 853, 854, 855, 867, 894, 987, 993, 1094, 1112, 1120, 1123], "59815": [522, 867, 1422], "5_000_555": 993, "5th": [41, 355], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 56, 58, 60, 65, 97, 98, 105, 131, 134, 135, 136, 137, 155, 159, 160, 173, 210, 211, 214, 217, 218, 222, 223, 224, 226, 227, 228, 230, 231, 234, 237, 238, 239, 240, 241, 243, 245, 247, 248, 249, 251, 253, 254, 255, 257, 258, 259, 261, 263, 265, 266, 267, 268, 269, 272, 273, 276, 279, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 295, 298, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 319, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 338, 348, 349, 355, 358, 359, 373, 378, 382, 403, 404, 405, 407, 410, 415, 441, 442, 445, 446, 458, 459, 465, 468, 472, 476, 480, 487, 491, 492, 493, 504, 505, 507, 510, 511, 514, 516, 525, 526, 531, 535, 541, 543, 546, 565, 566, 567, 576, 580, 593, 594, 595, 596, 600, 613, 649, 653, 660, 663, 664, 665, 670, 672, 674, 677, 679, 681, 683, 685, 688, 690, 691, 692, 694, 697, 702, 708, 714, 719, 730, 731, 754, 765, 767, 772, 780, 782, 784, 791, 793, 798, 800, 801, 802, 804, 807, 811, 814, 820, 827, 828, 832, 846, 850, 857, 863, 867, 882, 886, 889, 890, 891, 892, 895, 896, 898, 899, 900, 901, 904, 905, 906, 908, 909, 911, 912, 913, 914, 915, 917, 918, 926, 929, 931, 932, 933, 935, 936, 937, 939, 941, 942, 943, 944, 945, 948, 951, 952, 955, 956, 959, 960, 967, 977, 978, 987, 993, 1019, 1021, 1022, 1023, 1025, 1032, 1063, 1070, 1074, 1076, 1081, 1082, 1087, 1090, 1102, 1117, 1127, 1137, 1144, 1151, 1164, 1170, 1176, 1196, 1197, 1206, 1210, 1223, 1224, 1225, 1226, 1230, 1248, 1262, 1265, 1266, 1272, 1274, 1282, 1286, 1289, 1292, 1293, 1299, 1304, 1307, 1318, 1323, 1334, 1358, 1370, 1380, 1400, 1405, 1410, 1413, 1415, 1417, 1418, 1422, 1428, 1429, 1431], "60": [41, 211, 231, 279, 355, 479, 485, 486, 497, 508, 531, 691, 749, 867, 1118, 1123, 1134, 1267, 1292, 1353, 1400, 1425], "600": [324, 355, 504, 505, 507, 953, 987, 993], "60000": 483, "600000": 993, "60000000": 490, "60206": [608, 867, 1422], "605551": 848, "605551275463989": 848, "609438": 1422, "60_000": [474, 475, 479, 483, 485, 486, 490, 497, 499], "61": [279, 355], "625": [685, 867], "626172": [716, 1320], "63": [691, 867, 1292, 1400], "63204": 1431, "6331e16": [1372, 1400, 1425], "636253": 1425, "64": [1, 59, 61, 72, 74, 78, 82, 89, 92, 172, 209, 317, 355, 453, 635, 659, 867, 1258, 1261, 1400, 1422], "64030": [754, 1358], "642093": 1425, "647961": 181, "64bit": [173, 666, 867, 1267, 1400], "65": [225, 355, 897, 987, 1141, 1400], "650": [539, 652, 867], "65280": [754, 1358], "654": [28, 846, 945, 987], "65432": 1426, "654321": 621, "65536": 1422, "65552": [428, 1045], "66": [258, 324, 355, 691, 780, 867, 913, 953, 987, 1191, 1286, 1292, 1400], "663053": 138, "666": 993, "666000": 993, "666667": [221, 249, 326, 343, 355, 517, 824, 825, 831, 867, 894, 911, 954, 972, 987, 1146, 1400], "666f6f": [716, 1320], "67500": 845, "676": [259, 355, 914, 987], "678": [714, 721, 1318, 1325], "6789": [29, 993], "67890": 29, "686241": 1417, "69": [691, 867, 1191, 1292, 1400], "693147": [609, 867, 1237, 1239, 1400, 1422], "6_000_000": 1409, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 58, 60, 65, 155, 159, 160, 173, 188, 210, 214, 217, 218, 219, 221, 223, 224, 227, 228, 230, 234, 237, 239, 243, 245, 247, 249, 257, 261, 265, 267, 269, 271, 272, 276, 279, 281, 284, 285, 287, 288, 290, 291, 292, 293, 295, 298, 300, 303, 304, 305, 306, 311, 313, 314, 315, 323, 325, 326, 327, 355, 358, 359, 373, 378, 382, 404, 405, 407, 418, 459, 471, 472, 476, 484, 492, 495, 496, 501, 509, 511, 522, 535, 541, 546, 547, 565, 580, 593, 594, 595, 596, 653, 654, 664, 670, 674, 690, 691, 708, 724, 753, 767, 791, 800, 801, 804, 807, 808, 814, 819, 827, 828, 846, 850, 857, 867, 886, 891, 892, 894, 896, 899, 901, 904, 906, 908, 909, 911, 912, 917, 924, 926, 930, 933, 935, 936, 937, 941, 945, 948, 987, 993, 1009, 1022, 1023, 1025, 1035, 1093, 1094, 1098, 1104, 1109, 1121, 1122, 1127, 1135, 1137, 1150, 1174, 1190, 1210, 1223, 1224, 1225, 1226, 1271, 1272, 1291, 1299, 1328, 1357, 1400, 1405, 1410, 1415, 1417, 1418, 1419, 1422, 1424, 1428, 1431], "70": [221, 355, 780, 808, 867, 894, 987, 1191, 1400, 1417], "700": [324, 355, 953, 987], "702963": [41, 355], "7051579356916758811": 167, "707107": [417, 519, 688, 689, 787, 867, 1034, 1148, 1290, 1294, 1400, 1425], "712389": 1425, "714": 1431, "714286": [547, 867, 1174, 1400], "718281828459045": [11, 514, 607, 867, 1141, 1237, 1400], "718282": [522, 867, 1150, 1400, 1422], "720": [462, 663, 867], "7264": 1431, "732051": [1313, 1400], "7415e16": 181, "742": [259, 355, 914, 987], "75": [41, 221, 225, 355, 382, 653, 661, 664, 677, 679, 681, 683, 688, 690, 692, 824, 828, 867, 894, 897, 987, 993, 1085, 1170, 1191, 1263, 1339, 1400, 1417, 1425, 1431], "7500": [256, 355], "7508": 1431, "754": [773, 867], "754888": [514, 867], "761594": [769, 867, 1373, 1400], "764052": 96, "7654": 993, "765431": 1123, "7654321": 28, "76933c": [41, 355], "77": 1127, "78": [9, 146, 735, 1340], "780": 9, "784": [258, 355, 913, 987], "785398": [390, 787, 788, 867, 1008, 1400, 1425], "789": [11, 993], "79": [1191, 1400], "7d": 993, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 48, 57, 58, 60, 61, 65, 83, 87, 93, 159, 160, 173, 210, 214, 217, 218, 219, 221, 223, 224, 226, 227, 228, 230, 234, 237, 239, 241, 245, 247, 254, 257, 258, 259, 261, 263, 265, 267, 269, 272, 281, 284, 285, 287, 288, 290, 291, 292, 293, 295, 298, 300, 302, 303, 304, 306, 311, 313, 314, 315, 323, 326, 327, 329, 355, 382, 384, 396, 404, 405, 407, 456, 459, 460, 472, 501, 535, 542, 546, 547, 573, 575, 577, 580, 593, 594, 595, 596, 635, 653, 654, 659, 664, 670, 671, 676, 694, 700, 706, 708, 732, 733, 734, 749, 759, 780, 785, 791, 796, 798, 801, 803, 811, 813, 818, 819, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 846, 848, 851, 852, 856, 867, 886, 891, 892, 894, 896, 898, 899, 901, 904, 906, 909, 912, 913, 914, 917, 918, 929, 933, 936, 937, 941, 945, 948, 956, 987, 993, 1022, 1023, 1025, 1076, 1083, 1104, 1170, 1174, 1190, 1203, 1205, 1207, 1210, 1223, 1224, 1225, 1226, 1258, 1261, 1272, 1275, 1277, 1282, 1286, 1289, 1293, 1295, 1337, 1338, 1353, 1400, 1409, 1410, 1415, 1417, 1418, 1419, 1422, 1423, 1424, 1428, 1431], "80": [41, 225, 355, 897, 987], "800": [504, 505, 507, 1127], "8000": 152, "803065983": 138, "81": 1422, "814697265625": [1145, 1400], "816497": [303, 355], "8192": 150, "82": [258, 355, 913, 987], "8257e14": 1431, "83": [258, 355, 913, 987], "833": [258, 355, 913, 987], "833333": [343, 972], "848062": 1425, "848808": 181, "85": [41, 146, 355, 1191, 1400, 1431], "850": [539, 652, 867], "8568409950394724": [1141, 1400], "8589934592": [700, 867], "86": 1431, "8601": 1423, "87": 1431, "876": 9, "877809": 1417, "88": [221, 355, 894, 987], "881374": [389, 867, 1007, 1400], "888": [846, 945, 987], "8_000_000": 1409, "8a": [1042, 1043], "8nin": 1431, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 51, 52, 57, 65, 210, 219, 221, 234, 236, 245, 249, 257, 259, 261, 263, 279, 287, 289, 290, 293, 305, 306, 323, 327, 329, 348, 355, 378, 382, 384, 396, 404, 405, 407, 414, 416, 456, 459, 462, 472, 501, 527, 535, 546, 553, 573, 580, 591, 599, 637, 653, 654, 663, 670, 674, 675, 676, 687, 690, 691, 702, 706, 721, 753, 761, 764, 794, 800, 801, 804, 807, 819, 855, 867, 894, 904, 909, 911, 912, 914, 917, 935, 937, 948, 956, 977, 987, 993, 1017, 1018, 1022, 1023, 1025, 1031, 1033, 1085, 1098, 1108, 1110, 1116, 1122, 1135, 1136, 1181, 1190, 1203, 1210, 1221, 1229, 1272, 1276, 1277, 1288, 1291, 1292, 1295, 1307, 1325, 1357, 1366, 1400, 1409, 1410, 1415, 1417, 1418, 1419, 1428], "90": [221, 259, 355, 753, 894, 914, 987, 1357, 1417, 1425], "90000": 845, "901234": [1069, 1159, 1295, 1400], "909": [258, 355, 913, 987], "910": [258, 355, 721, 913, 987, 1325], "910t": [714, 721, 1318, 1325], "914": [258, 355, 913, 987], "9223372036854775807": [776, 867], "9223372036854775808": [610, 867], "927295": 1425, "928571": [520, 867, 1149, 1400], "93": [1191, 1400], "94": [379, 867], "9477376373212048": [1191, 1400], "95": [18, 379, 867, 993], "95b3d7": [41, 355], "96": [18, 221, 355, 379, 867, 894, 987, 1191, 1400], "961": 61, "963624": [519, 867, 1148, 1400], "964028": [279, 355], "96_067_179": 1409, "97": [18, 248, 355, 379, 867, 1191, 1400], "9774092659964970114": [540, 867], "978307200": [478, 1100], "978307200000": 500, "978307200000000": [478, 500, 1100, 1126], "978307200000000000": 1126, "978393600": [478, 1100], "978393600000": 500, "978393600000000": [478, 500, 1100, 1126], "978393600000000000": 1126, "978480000": [478, 1100], "978480000000": 500, "978480000000000": [478, 500, 1100, 1126], "978480000000000000": 1126, "978738": 96, "98": [18, 248, 279, 355, 440, 534, 537, 707, 753, 771, 867, 1357], "987": [28, 41, 355, 621], "987000": 993, "9876": 9, "987654": [28, 993], "987654321": 11, "9876543210": 138, "987m": 993, "988": 11, "99": [18, 41, 232, 233, 248, 251, 279, 324, 355, 379, 440, 524, 526, 534, 537, 707, 771, 867, 902, 903, 953, 987, 1127, 1141, 1153, 1400, 1422], "9914e218": 181, "998347": [279, 355], "999": [471, 484, 993, 1093, 1109, 1420, 1431], "999000": 993, "999954": [279, 355], "999999": [494, 759, 807, 853, 854, 855, 993, 1120, 1127, 1363], "999999\u00b5": 993, "9bbb59": [41, 355], "A": [14, 38, 41, 47, 48, 51, 52, 53, 54, 63, 64, 69, 75, 130, 138, 143, 145, 150, 151, 152, 153, 165, 167, 172, 187, 218, 225, 226, 227, 232, 233, 236, 243, 258, 264, 266, 268, 273, 279, 305, 308, 323, 324, 325, 329, 330, 355, 373, 377, 446, 466, 467, 472, 498, 501, 515, 516, 524, 525, 526, 536, 538, 551, 554, 556, 557, 563, 577, 604, 611, 612, 613, 625, 639, 648, 649, 671, 677, 679, 681, 683, 685, 688, 690, 692, 712, 713, 714, 720, 721, 722, 723, 724, 725, 726, 729, 731, 735, 736, 737, 739, 750, 759, 794, 810, 811, 815, 827, 828, 844, 867, 892, 897, 898, 899, 902, 903, 908, 913, 918, 919, 933, 953, 956, 957, 987, 993, 1064, 1088, 1089, 1094, 1124, 1127, 1143, 1153, 1154, 1155, 1207, 1242, 1254, 1278, 1280, 1284, 1289, 1291, 1293, 1316, 1317, 1318, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1333, 1335, 1339, 1340, 1341, 1343, 1354, 1363, 1400, 1409, 1410, 1413, 1426, 1428], "AND": [153, 259, 355, 781, 782, 846, 914, 987, 993, 1419], "ANDs": [431, 867, 1048, 1400], "AS": [302, 355, 846, 847, 945, 987, 1409, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1430], "And": [757, 1361], "As": [13, 56, 97, 98, 131, 133, 134, 135, 137, 155, 159, 160, 169, 234, 283, 312, 317, 355, 857, 904, 932, 987], "At": [47, 48, 49, 50, 51, 63, 64, 279, 355, 889, 890, 900, 929, 942, 987], "BY": [846, 945, 987, 1409, 1412, 1418, 1427, 1428], "Be": 987, "By": [5, 13, 15, 31, 34, 57, 150, 151, 165, 243, 257, 258, 264, 287, 289, 298, 303, 325, 326, 355, 415, 491, 496, 509, 597, 600, 606, 654, 669, 674, 678, 680, 682, 684, 686, 689, 691, 693, 699, 710, 778, 798, 805, 806, 808, 809, 810, 826, 848, 854, 855, 856, 867, 889, 908, 912, 913, 919, 935, 941, 946, 954, 987, 1032, 1117, 1122, 1135, 1227, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1303, 1314, 1390, 1400], "For": [15, 40, 41, 52, 53, 54, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 211, 225, 226, 229, 231, 257, 258, 279, 287, 312, 341, 355, 358, 488, 489, 501, 517, 519, 520, 531, 613, 625, 666, 705, 712, 720, 721, 722, 724, 726, 750, 800, 810, 814, 815, 857, 863, 867, 897, 898, 913, 935, 970, 987, 1127, 1145, 1146, 1148, 1149, 1152, 1242, 1267, 1310, 1316, 1324, 1325, 1326, 1328, 1330, 1354, 1378, 1400, 1405], "IF": 1421, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 62, 63, 64, 73, 131, 132, 133, 134, 135, 136, 137, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 182, 183, 184, 195, 209, 211, 214, 226, 231, 234, 241, 243, 245, 253, 254, 255, 257, 258, 261, 263, 268, 275, 279, 283, 287, 289, 290, 291, 295, 298, 300, 302, 305, 306, 309, 310, 312, 313, 319, 320, 322, 323, 324, 355, 358, 381, 383, 401, 406, 415, 420, 442, 468, 472, 473, 480, 488, 489, 498, 501, 527, 542, 548, 553, 561, 566, 567, 571, 583, 592, 597, 598, 601, 604, 612, 613, 620, 621, 627, 629, 654, 659, 660, 661, 664, 666, 668, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 699, 701, 705, 706, 711, 721, 722, 724, 726, 727, 739, 740, 741, 742, 744, 745, 746, 749, 750, 751, 752, 756, 759, 766, 777, 781, 783, 786, 790, 791, 792, 795, 796, 798, 800, 801, 805, 806, 808, 809, 810, 813, 814, 820, 821, 822, 824, 825, 826, 827, 828, 832, 838, 840, 841, 842, 843, 844, 849, 850, 851, 854, 855, 857, 858, 867, 889, 890, 900, 904, 908, 912, 913, 918, 923, 929, 931, 932, 933, 935, 939, 941, 942, 943, 945, 950, 952, 953, 962, 970, 980, 987, 992, 993, 1000, 1001, 1015, 1016, 1019, 1024, 1032, 1035, 1037, 1059, 1072, 1090, 1094, 1095, 1102, 1114, 1115, 1124, 1127, 1152, 1169, 1170, 1175, 1181, 1190, 1191, 1195, 1196, 1197, 1201, 1213, 1222, 1227, 1228, 1231, 1234, 1242, 1261, 1262, 1263, 1265, 1267, 1270, 1271, 1272, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1297, 1299, 1301, 1303, 1306, 1310, 1311, 1315, 1325, 1326, 1328, 1330, 1331, 1332, 1339, 1343, 1344, 1345, 1346, 1348, 1349, 1350, 1353, 1354, 1355, 1356, 1360, 1363, 1370, 1371, 1374, 1375, 1378, 1380, 1389, 1400, 1405, 1409, 1410, 1412, 1420, 1423, 1428], "In": [57, 64, 152, 154, 166, 167, 170, 181, 185, 205, 210, 229, 231, 234, 243, 258, 259, 263, 275, 279, 287, 313, 322, 355, 358, 654, 674, 735, 736, 857, 867, 890, 908, 913, 914, 928, 935, 952, 987, 1145, 1152, 1261, 1266, 1340, 1400, 1405], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 73, 79, 96, 98, 130, 141, 142, 143, 144, 145, 146, 153, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 207, 221, 259, 264, 271, 278, 302, 312, 317, 324, 332, 341, 355, 358, 359, 367, 368, 373, 460, 461, 468, 480, 542, 612, 613, 624, 661, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 753, 791, 793, 824, 825, 827, 828, 844, 857, 863, 867, 885, 889, 890, 894, 900, 914, 918, 919, 924, 928, 929, 945, 953, 960, 961, 970, 987, 993, 995, 1067, 1083, 1084, 1090, 1102, 1170, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1298, 1300, 1378, 1383, 1400, 1405], "Its": [244, 355, 540, 867, 1168, 1400], "NO": 993, "NOT": [134, 254, 296, 355, 604, 623, 698, 867, 940, 987, 1428], "No": [21, 257, 271, 355, 857, 912, 924, 987], "Not": [211, 257, 355, 556, 557, 867, 889, 900, 912, 929, 942, 987], "ON": 1428, "OR": [259, 355, 783, 784, 904, 914, 987, 993, 1419], "ORs": [436, 867, 1053, 1400], "On": [136, 773, 867, 916, 987], "One": [57, 221, 257, 275, 312, 317, 355, 382, 653, 785, 797, 813, 819, 822, 831, 833, 836, 837, 847, 867, 894, 912, 987, 993, 1085, 1400], "Or": [153, 242, 243, 258, 287, 301, 325, 334, 355, 358, 518, 674, 708, 805, 806, 808, 809, 854, 855, 863, 867, 907, 908, 913, 935, 944, 963, 987, 1147, 1400], "That": [156, 918, 987], "The": [10, 21, 34, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 62, 63, 64, 65, 66, 71, 72, 74, 75, 76, 84, 88, 89, 96, 98, 99, 101, 130, 131, 133, 134, 135, 137, 138, 145, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 181, 182, 183, 185, 187, 195, 211, 213, 221, 222, 224, 225, 226, 227, 230, 231, 234, 241, 242, 243, 244, 249, 255, 257, 258, 259, 262, 263, 271, 277, 279, 283, 287, 288, 289, 290, 293, 294, 295, 302, 307, 312, 313, 318, 321, 325, 329, 330, 332, 333, 334, 341, 355, 365, 369, 370, 371, 372, 373, 380, 423, 424, 425, 426, 440, 441, 460, 461, 463, 466, 467, 468, 476, 480, 487, 491, 492, 496, 498, 501, 509, 510, 517, 519, 520, 521, 524, 527, 531, 532, 540, 549, 574, 579, 604, 612, 613, 627, 654, 661, 664, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 700, 702, 705, 711, 715, 716, 720, 725, 726, 727, 728, 733, 734, 735, 736, 744, 745, 746, 747, 748, 749, 750, 760, 764, 770, 771, 772, 791, 794, 812, 816, 825, 826, 828, 842, 843, 844, 845, 846, 849, 857, 859, 860, 862, 863, 867, 868, 869, 872, 874, 875, 876, 884, 889, 890, 894, 895, 897, 898, 900, 901, 904, 907, 908, 911, 912, 913, 914, 918, 924, 929, 932, 935, 937, 938, 939, 942, 945, 949, 951, 956, 957, 960, 961, 963, 970, 987, 991, 992, 993, 999, 1002, 1040, 1041, 1042, 1043, 1057, 1058, 1071, 1083, 1084, 1085, 1088, 1089, 1090, 1098, 1102, 1113, 1117, 1118, 1122, 1124, 1127, 1135, 1136, 1144, 1146, 1148, 1149, 1152, 1153, 1156, 1160, 1168, 1176, 1204, 1209, 1242, 1261, 1263, 1265, 1269, 1270, 1271, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1307, 1310, 1315, 1319, 1320, 1329, 1330, 1331, 1332, 1337, 1338, 1339, 1340, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1374, 1380, 1382, 1384, 1385, 1392, 1394, 1396, 1400, 1401, 1406, 1407, 1408, 1409, 1414, 1428, 1429, 1431], "Then": 170, "There": [171, 1428], "These": [1, 33, 41, 140, 147, 152, 153, 205, 319, 355, 866, 867], "To": [40, 64, 225, 226, 232, 233, 259, 355, 450, 466, 467, 525, 526, 712, 719, 720, 721, 724, 735, 736, 745, 746, 747, 748, 757, 867, 897, 898, 902, 903, 914, 987, 993, 1072, 1088, 1089, 1154, 1155, 1316, 1323, 1324, 1325, 1328, 1339, 1340, 1361, 1380, 1400, 1428], "Will": [63, 889, 900, 929, 942, 987, 1400], "With": [159, 253, 298, 355, 415, 597, 699, 867, 889, 941, 987, 1032, 1190, 1227, 1303, 1400], "_": [1, 57, 61, 205, 279, 310, 314, 355, 406, 445, 446, 583, 713, 721, 723, 725, 730, 731, 737, 740, 741, 1063, 1064, 1317, 1325, 1329, 1334, 1335, 1341, 1345, 1375, 1400], "__array_ufunc__": 995, "__call__": 863, "__enter__": 1428, "__exit__": 1428, "__getattr__": 863, "__getitem__": [365, 760], "__init__": [1, 32, 33, 34, 35, 52, 53, 54, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 141, 142, 143, 144, 178, 190, 196, 197, 199, 200, 961, 962, 1428], "__name__": [256, 355], "_auto_init_unhandled_kei": 33, "_awai": [694, 867], "_bar_": 815, "_btm_by_a": [441, 867], "_btm_by_b": [441, 867], "_by_ca": [441, 772, 867], "_by_cb": [441, 772, 867], "_check_ord": [942, 987], "_column_map": 170, "_default_valu": 170, "_deletion_fil": 170, "_df": [1, 58], "_expr": [1, 59], "_foo": 618, "_geventdataframeresult": [64, 890, 987], "_internal_cal": 55, "_is_not_nan": [557, 867], "_isnan": [556, 867], "_isnul": [559, 867], "_kwarg": [889, 929, 987], "_ldf": 1, "_lf": 60, "_lower_boundari": [243, 355, 908, 987], "_mean_squar": [334, 963], "_not_nul": [558, 867], "_o": [445, 446, 730, 731, 1063, 1064, 1334, 1335], "_revers": [638, 642, 671, 867], "_right": [257, 258, 259, 355, 912, 913, 914, 987], "_storage_account": 34, "_storage_options_has_endpoint_url": 33, "_suffix": 643, "_sum": [334, 963], "_to_even": [694, 867], "_top_by_a": [772, 867], "_top_by_b": [772, 867], "_train": [958, 987], "_type": [931, 987], "_type_check": [942, 987], "_upper_boundari": [243, 355, 908, 987], "_world": 815, "a1": [41, 58, 60, 355], "a101": 1431, "a123": [41, 355], "a2": [41, 58, 60, 355], "a_1": [741, 1345, 1375, 1400], "a_2": [1375, 1400], "a_3": [1375, 1400], "a_a": 847, "a_agg_list": [243, 355, 908, 987], "a_b_doubl": 811, "a_btm_by_a": [441, 867], "a_btm_by_b": [441, 867], "a_by_ca": [441, 772, 867], "a_by_cb": [441, 772, 867], "a_div_2": 1422, "a_div_5": 1422, "a_interpol": [547, 867], "a_is_even": [302, 355, 846, 945, 987], "a_is_integ": 373, "a_is_str": 373, "a_isnul": [559, 867], "a_lag_": 794, "a_log2": 1422, "a_mod_2": 1422, "a_not_nul": [558, 867], "a_revers": [638, 642, 671, 867], "a_rol": 794, "a_suffix": 643, "a_times_2": [613, 867], "a_times_b": [612, 867], "a_top_by_a": [772, 867], "a_top_by_b": [772, 867], "a_txt": 847, "aa": [521, 712, 724, 812, 867, 993, 1085, 1316, 1328, 1400, 1423], "aaa": [1, 41, 355, 712, 724, 760, 762, 763, 993, 1316, 1328], "aaaa": [1042, 1043], "aabcdef": 746, "aad": [1042, 1043], "aag": 27, "aazz": 1423, "ab": [245, 261, 306, 329, 355, 736, 760, 762, 763, 867, 956, 987, 993, 1169, 1195, 1371, 1400, 1421, 1423], "ab12": 736, "ab12cd34ef": 736, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 378, 718, 721, 735, 745, 867, 993, 1322, 1325, 1339, 1340, 1423], "abc123": 1423, "abc456": [735, 1339, 1340, 1423], "abcabc": 736, "abcd": 1423, "abcdeff": 745, "abf": [154, 166, 167], "abl": [105, 152, 604], "about": [52, 53, 54, 105, 145, 147, 152, 705, 712, 720, 721, 724, 735, 736, 867, 1310, 1316, 1324, 1325, 1328, 1339, 1340, 1400, 1431], "abov": [41, 211, 258, 279, 355, 358, 913, 987], "abs_a": 1422, "abs_tol": [174, 175, 176, 177, 549, 867, 1176, 1400], "absolut": [147, 154, 166, 167, 174, 175, 176, 177, 377, 517, 519, 520, 549, 867, 998, 1146, 1148, 1149, 1176, 1400, 1422], "acc": [800, 801, 814, 840], "accent": 993, "accept": [38, 43, 47, 48, 49, 50, 51, 54, 145, 147, 148, 150, 151, 154, 156, 158, 160, 162, 165, 168, 169, 170, 171, 181, 195, 213, 223, 242, 293, 294, 298, 301, 318, 329, 330, 334, 355, 378, 441, 450, 521, 548, 654, 668, 669, 708, 737, 764, 772, 780, 782, 784, 789, 792, 793, 794, 795, 803, 812, 830, 832, 835, 845, 849, 851, 857, 863, 867, 884, 896, 907, 937, 938, 941, 944, 949, 956, 957, 963, 987, 992, 993, 1058, 1072, 1175, 1261, 1270, 1271, 1303, 1341, 1385, 1400], "access": [38, 43, 47, 48, 49, 50, 51, 58, 59, 60, 61, 156, 160, 162, 165, 167, 168, 169, 170, 195, 209, 217, 255, 279, 288, 289, 302, 355, 365, 722, 760, 891, 945, 958, 987, 992, 1326, 1431], "accord": [288, 355, 661, 805, 806, 808, 809, 854, 855, 867, 1104, 1263, 1400], "accordingli": [145, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164], "account": [41, 138, 153, 167, 355, 491, 517, 519, 520, 867, 1117, 1146, 1148, 1149, 1400], "accumul": [800, 801, 814, 840], "acg": 27, "achiev": [263, 279, 341, 355, 446, 613, 731, 867, 1064, 1242, 1335, 1400], "aco": 1421, "acosd": 1421, "across": [41, 57, 153, 155, 222, 244, 257, 266, 268, 273, 295, 305, 355, 463, 540, 627, 782, 784, 800, 801, 803, 830, 832, 835, 851, 867, 895, 912, 939, 987, 1168, 1400], "action": [40, 355], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 575, 721, 1205, 1325], "actual": [41, 134, 181, 185, 290, 355, 1305, 1400, 1423, 1430], "ad": [39, 41, 134, 155, 243, 264, 302, 312, 317, 319, 324, 329, 330, 355, 384, 501, 524, 620, 621, 764, 800, 801, 846, 867, 908, 919, 945, 953, 956, 957, 987, 993, 1127, 1153, 1378, 1383, 1400], "adbc": [39, 152, 153, 355], "adbc_driver_manag": 173, "adbc_ingest": [39, 355], "add": [40, 41, 42, 47, 51, 151, 211, 231, 243, 263, 329, 330, 331, 332, 355, 358, 461, 640, 641, 642, 643, 661, 764, 810, 814, 857, 867, 908, 912, 956, 957, 958, 959, 960, 987, 1152, 1400, 1405], "add_calendar_dai": 810, "add_calendar_month": 810, "add_calendar_year": 810, "add_chart": [41, 355], "add_dai": 810, "add_format": [41, 355], "add_hour": 810, "add_milli": 810, "add_second": 810, "add_seri": [41, 355], "add_week": 810, "add_worksheet": [41, 355], "addit": [30, 37, 39, 40, 41, 134, 149, 154, 155, 166, 167, 179, 181, 183, 185, 195, 226, 230, 242, 260, 264, 277, 293, 294, 301, 314, 321, 329, 330, 334, 355, 378, 477, 521, 524, 654, 708, 712, 720, 721, 724, 735, 736, 760, 764, 789, 792, 793, 794, 795, 812, 845, 846, 849, 863, 867, 901, 907, 919, 937, 938, 944, 951, 956, 957, 963, 987, 993, 1091, 1099, 1153, 1316, 1324, 1325, 1328, 1339, 1340, 1381, 1400, 1410, 1428], "addition": [65, 155, 288, 355, 993], "address": 721, "adjac": [41, 355], "adjust": [517, 519, 520, 705, 867, 1146, 1148, 1149, 1310, 1400], "adl": [154, 166, 167], "adlf": 167, "advanc": [41, 279, 355, 420, 604, 1037, 1234, 1431], "advantag": [41, 205, 278, 355], "advis": [41, 56, 98, 355], "aedt": 807, "aeiuo": [724, 1328], "af1": 57, "af2": 57, "af3": 57, "affect": [39, 136, 174, 175, 176, 177, 355, 612, 827, 828, 867], "afm": 167, "afoo": [958, 987], "after": [41, 134, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 213, 214, 231, 318, 321, 355, 440, 441, 442, 468, 521, 654, 664, 679, 688, 692, 753, 759, 771, 772, 791, 867, 884, 949, 951, 987, 993, 1057, 1058, 1090, 1152, 1265, 1357, 1363, 1384, 1385, 1400, 1415], "afterward": [56, 857], "ag": [271, 355, 924, 987, 1429], "again": [613, 867], "against": [39, 107, 150, 152, 234, 283, 302, 355, 575, 724, 846, 904, 932, 945, 987, 1205, 1328, 1409, 1428, 1430, 1431], "agg": [242, 243, 279, 287, 355, 379, 431, 436, 439, 441, 527, 529, 534, 537, 612, 613, 654, 707, 708, 772, 779, 805, 808, 828, 844, 867, 889, 890, 900, 907, 908, 929, 931, 935, 942, 987, 993], "agg_group": [817, 867], "agg_list": [612, 867], "aggreg": [147, 150, 151, 154, 162, 166, 236, 242, 243, 265, 267, 269, 272, 275, 279, 280, 281, 287, 303, 304, 323, 326, 334, 335, 337, 339, 355, 379, 431, 436, 439, 527, 543, 612, 654, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 781, 782, 783, 784, 800, 801, 802, 803, 814, 819, 829, 830, 832, 834, 835, 840, 850, 851, 867, 908, 918, 920, 921, 922, 925, 926, 930, 935, 946, 947, 954, 963, 964, 966, 968, 987, 1048, 1053, 1056, 1171, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1400, 1416, 1418, 1421, 1427], "aggregate_funct": [279, 355, 993], "aho": [713, 723, 725, 737, 1317, 1327, 1329, 1341], "aiosqlit": 152, "alchemy_conn": 152, "algorithm": [212, 355, 385, 713, 723, 725, 737, 785, 867, 883, 987, 1003, 1317, 1327, 1329, 1341, 1400], "alia": [1, 13, 57, 59, 61, 65, 95, 198, 202, 217, 243, 248, 261, 279, 287, 321, 329, 332, 355, 358, 378, 382, 423, 424, 425, 426, 427, 430, 440, 443, 445, 446, 447, 455, 456, 457, 458, 459, 461, 464, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 508, 509, 510, 511, 512, 515, 516, 529, 531, 532, 536, 538, 544, 545, 548, 549, 552, 555, 563, 565, 588, 600, 606, 611, 613, 617, 620, 621, 623, 630, 633, 635, 637, 648, 649, 653, 655, 659, 661, 664, 666, 695, 697, 712, 713, 714, 715, 717, 718, 720, 721, 723, 724, 725, 726, 730, 731, 737, 738, 739, 740, 741, 742, 743, 747, 748, 750, 760, 761, 762, 763, 765, 770, 771, 773, 779, 780, 786, 787, 788, 792, 793, 794, 795, 805, 808, 810, 811, 814, 815, 820, 823, 824, 827, 828, 840, 845, 849, 854, 857, 867, 908, 910, 917, 935, 951, 956, 960, 987, 1040, 1084, 1091, 1092, 1095, 1098, 1099, 1100, 1101, 1107, 1108, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1160, 1195, 1263, 1268, 1324, 1325, 1329, 1340, 1345, 1346, 1400], "alias": [302, 355, 620, 621, 945, 987], "alic": [150, 367, 1429], "align": [11, 16, 17, 41, 57, 65, 355, 1429], "align_fram": 65, "align_ful": 65, "align_inn": 65, "align_left": 65, "align_right": 65, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 57, 63, 70, 116, 118, 131, 132, 136, 146, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 178, 179, 182, 185, 205, 210, 212, 214, 221, 223, 225, 226, 233, 245, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 268, 270, 274, 275, 279, 282, 284, 288, 289, 290, 294, 300, 301, 305, 306, 310, 312, 313, 317, 320, 322, 323, 324, 325, 330, 332, 355, 358, 373, 382, 384, 406, 441, 454, 460, 466, 467, 468, 469, 480, 501, 509, 521, 526, 539, 540, 543, 546, 551, 554, 558, 559, 564, 574, 575, 583, 601, 604, 612, 634, 637, 638, 640, 641, 642, 643, 644, 645, 652, 654, 664, 669, 671, 676, 694, 700, 706, 708, 714, 718, 721, 722, 726, 729, 732, 736, 744, 745, 746, 750, 772, 782, 791, 793, 800, 801, 802, 803, 812, 814, 819, 820, 823, 827, 828, 832, 840, 849, 850, 851, 857, 863, 867, 873, 879, 882, 883, 886, 889, 890, 894, 896, 897, 898, 900, 903, 912, 914, 918, 923, 929, 933, 938, 942, 943, 944, 950, 952, 953, 957, 958, 960, 987, 993, 1024, 1083, 1085, 1088, 1089, 1090, 1091, 1102, 1127, 1135, 1169, 1177, 1189, 1195, 1204, 1205, 1213, 1231, 1234, 1265, 1271, 1277, 1311, 1318, 1322, 1325, 1326, 1329, 1330, 1333, 1340, 1348, 1349, 1350, 1354, 1371, 1380, 1400, 1404, 1405, 1410, 1412, 1417, 1418, 1423, 1427, 1428, 1430, 1431], "all_compat": 1412, "all_data": 1428, "all_horizont": [225, 226, 355, 781, 857, 897, 898, 987], "all_stat": 31, "alloc": [147, 150, 151, 229, 282, 355, 867, 962, 1145, 1400], "allow": [1, 8, 40, 41, 48, 49, 50, 51, 55, 56, 65, 98, 107, 132, 152, 155, 165, 167, 168, 169, 170, 171, 178, 181, 182, 185, 205, 209, 255, 258, 260, 264, 288, 289, 291, 313, 314, 317, 320, 333, 355, 373, 443, 447, 491, 498, 501, 549, 592, 620, 621, 666, 696, 749, 751, 752, 867, 912, 913, 918, 919, 923, 928, 931, 950, 958, 987, 991, 993, 1117, 1124, 1127, 1176, 1222, 1242, 1267, 1297, 1353, 1355, 1356, 1380, 1381, 1400, 1423, 1431], "allow_alias": [620, 621], "allow_chunk": [181, 185], "allow_copi": [132, 209, 313, 355, 1380, 1400], "allow_dupl": [661, 867, 1263, 1400], "allow_exact_match": [258, 355, 913, 987], "allow_infin": [181, 185], "allow_masked_out": [181, 185], "allow_missing_column": [162, 170], "allow_nul": [178, 181, 185, 1431], "allow_object": 826, "allow_parallel": [258, 355, 912, 913, 987], "allow_pyarrow_filt": 171, "allow_time_zon": [181, 182, 185], "allowed_dtyp": [181, 182, 185, 1431], "almost": [41, 64, 262, 263, 341, 355, 549, 749, 751, 752, 867, 890, 987, 991, 1242, 1353, 1355, 1356, 1400], "along": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 355, 987], "alpha": [517, 519, 520, 867, 993, 1146, 1148, 1149, 1400], "alpha_i": [518, 867, 1147, 1400], "alphabet": [993, 1431], "alphanumer": [757, 993, 1361], "alreadi": [39, 40, 106, 312, 355, 575, 628, 777, 867, 942, 987, 1083, 1205, 1389, 1400], "also": [28, 38, 41, 48, 49, 50, 51, 56, 63, 64, 131, 134, 138, 152, 155, 156, 161, 162, 165, 170, 180, 181, 184, 185, 190, 199, 205, 227, 242, 243, 264, 271, 275, 279, 287, 289, 293, 301, 312, 324, 329, 332, 355, 365, 456, 459, 468, 480, 491, 495, 501, 527, 548, 613, 620, 621, 654, 664, 668, 669, 694, 708, 735, 736, 737, 744, 745, 760, 791, 800, 801, 804, 807, 814, 816, 840, 857, 866, 867, 873, 889, 890, 900, 907, 908, 919, 924, 928, 929, 935, 937, 942, 944, 953, 956, 958, 960, 987, 993, 1090, 1102, 1121, 1175, 1265, 1270, 1271, 1295, 1318, 1339, 1340, 1341, 1348, 1400, 1404, 1410, 1412, 1415, 1419, 1423, 1426, 1428, 1429], "alt": [355, 358, 1400, 1405], "altair": [173, 355, 358, 1400, 1405], "alter": [928, 987], "altern": [41, 190, 355, 863, 1420], "although": [302, 355, 945, 987], "alwai": [14, 38, 40, 48, 54, 69, 73, 79, 150, 156, 160, 162, 213, 242, 257, 258, 262, 263, 318, 341, 355, 440, 441, 612, 624, 749, 771, 772, 827, 857, 867, 884, 912, 913, 918, 949, 987, 993, 1057, 1058, 1062, 1242, 1353, 1384, 1385, 1400, 1409, 1410, 1428, 1431], "am": [738, 1342], "amarillo": 1423, "amaz": [355, 358, 1400, 1405], "amazonaw": 33, "ambigu": [494, 495, 496, 509, 749, 752, 807, 1120, 1121, 1122, 1135, 1353, 1356], "america": 808, "amount": [52, 56, 74, 98, 160, 165, 168, 169, 373, 613, 810, 867, 1417], "amsterdam": [495, 1121], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 55, 58, 60, 61, 65, 73, 74, 75, 96, 103, 107, 110, 113, 120, 122, 131, 133, 134, 137, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 165, 166, 167, 168, 169, 170, 179, 181, 185, 195, 211, 215, 216, 217, 223, 229, 232, 236, 238, 243, 254, 255, 256, 258, 259, 263, 264, 275, 279, 284, 285, 287, 288, 292, 302, 307, 313, 317, 319, 323, 324, 329, 332, 341, 355, 358, 373, 380, 402, 405, 419, 423, 425, 428, 431, 434, 436, 437, 439, 456, 457, 458, 459, 460, 461, 468, 472, 473, 491, 495, 498, 512, 518, 526, 527, 532, 533, 534, 537, 572, 575, 579, 581, 603, 604, 612, 613, 625, 627, 637, 638, 659, 660, 661, 669, 670, 674, 676, 677, 679, 681, 683, 685, 688, 690, 692, 711, 712, 715, 721, 724, 728, 749, 751, 752, 754, 756, 770, 773, 781, 786, 790, 792, 796, 798, 805, 806, 808, 809, 811, 813, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 838, 840, 841, 845, 849, 854, 855, 857, 858, 863, 867, 886, 887, 888, 890, 894, 896, 900, 904, 908, 913, 914, 918, 919, 933, 935, 936, 945, 953, 956, 958, 960, 962, 970, 984, 987, 991, 992, 993, 1020, 1023, 1036, 1040, 1042, 1045, 1048, 1051, 1053, 1054, 1056, 1071, 1073, 1079, 1080, 1081, 1082, 1083, 1090, 1094, 1124, 1138, 1145, 1147, 1160, 1190, 1202, 1205, 1209, 1211, 1233, 1242, 1271, 1272, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1298, 1300, 1315, 1316, 1319, 1325, 1328, 1332, 1353, 1355, 1356, 1358, 1360, 1380, 1382, 1400, 1418, 1420, 1423, 1427, 1428, 1430], "ana": [738, 1342], "anan": [738, 1342], "ananab": 1423, "and_": 867, "ang": 1423, "angl": [787, 788], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 69, 72, 73, 79, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 205, 207, 210, 211, 213, 219, 223, 225, 226, 231, 233, 234, 236, 238, 253, 255, 256, 257, 258, 259, 262, 263, 264, 268, 277, 278, 283, 284, 288, 289, 290, 302, 305, 308, 309, 312, 313, 314, 317, 318, 320, 323, 324, 332, 355, 358, 359, 367, 368, 373, 378, 381, 382, 406, 440, 441, 442, 460, 461, 468, 480, 497, 515, 516, 526, 527, 531, 534, 536, 538, 542, 553, 563, 570, 575, 583, 593, 594, 595, 596, 611, 612, 613, 620, 630, 633, 635, 648, 649, 653, 658, 661, 668, 669, 670, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 697, 701, 711, 713, 727, 745, 746, 747, 748, 749, 751, 752, 753, 754, 756, 765, 771, 772, 773, 780, 781, 782, 784, 791, 793, 795, 796, 797, 824, 825, 826, 827, 828, 832, 844, 851, 857, 867, 884, 889, 890, 896, 897, 898, 900, 903, 904, 912, 913, 914, 919, 927, 928, 929, 932, 933, 945, 949, 950, 953, 960, 961, 962, 987, 991, 993, 995, 997, 1000, 1024, 1057, 1058, 1067, 1083, 1084, 1090, 1102, 1123, 1142, 1143, 1152, 1155, 1161, 1163, 1165, 1170, 1181, 1190, 1193, 1200, 1205, 1213, 1223, 1224, 1225, 1226, 1241, 1242, 1253, 1254, 1263, 1270, 1271, 1272, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1298, 1299, 1315, 1317, 1331, 1353, 1355, 1356, 1358, 1360, 1378, 1379, 1380, 1381, 1383, 1384, 1385, 1400, 1405, 1428, 1431], "anna": [271, 355, 924, 987], "annex": [732, 1336], "announc": [931, 987], "anoth": [100, 180, 214, 222, 228, 242, 258, 295, 355, 428, 463, 470, 547, 579, 617, 623, 627, 668, 678, 680, 682, 684, 686, 689, 691, 693, 724, 867, 886, 895, 907, 913, 939, 958, 987, 1045, 1083, 1092, 1144, 1152, 1174, 1209, 1270, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1328, 1400, 1422, 1423], "another_index": 844, "anti": [257, 355, 912, 970, 987, 1298, 1300, 1400, 1416], "antipattern": [150, 156, 160, 162], "any_horizont": [783, 857], "anyth": [40, 288, 355], "anywher": [427, 430, 749, 751, 752, 1353, 1355, 1356], "ap": 1423, "apach": [36, 43, 44, 47, 132, 148, 152, 153, 156, 158, 167, 208, 355, 996], "apaya": [750, 1354], "api": [0, 33, 38, 43, 47, 48, 49, 50, 51, 132, 160, 162, 165, 168, 169, 170, 171, 190, 195, 209, 263, 341, 355, 613, 827, 828, 867, 970, 987, 1242, 1400, 1427], "apia": [469, 1091], "app": [447, 743, 1065, 1347], "appear": [41, 69, 134, 176, 177, 355, 736, 775, 867, 993, 1387, 1400, 1429], "append": [39, 40, 42, 181, 231, 257, 258, 259, 355, 665, 857, 867, 912, 913, 914, 987, 1152, 1400], "appl": [218, 247, 257, 284, 285, 308, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 355, 441, 443, 447, 671, 717, 743, 772, 867, 912, 933, 965, 966, 968, 969, 971, 972, 973, 974, 975, 976, 977, 987, 1060, 1065, 1321, 1347, 1416, 1423], "appli": [11, 21, 38, 41, 48, 63, 65, 130, 145, 152, 165, 178, 181, 185, 205, 221, 236, 259, 262, 263, 278, 301, 302, 312, 341, 355, 394, 471, 474, 475, 476, 479, 481, 482, 483, 484, 485, 486, 487, 490, 492, 493, 497, 499, 510, 511, 513, 519, 520, 612, 613, 658, 677, 678, 679, 680, 683, 684, 690, 691, 708, 735, 736, 749, 751, 752, 756, 789, 800, 801, 814, 827, 828, 840, 846, 857, 867, 894, 914, 918, 927, 944, 945, 970, 987, 993, 1072, 1093, 1096, 1097, 1098, 1101, 1103, 1104, 1108, 1109, 1110, 1112, 1113, 1116, 1118, 1119, 1123, 1125, 1136, 1137, 1139, 1148, 1149, 1242, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1287, 1290, 1291, 1292, 1294, 1339, 1340, 1353, 1355, 1356, 1360, 1400, 1409], "applic": [54, 153, 313, 355, 613, 867], "apply_on_context_ent": 205, "appropri": [41, 171, 234, 283, 313, 355, 501, 664, 867, 904, 932, 987, 1127, 1265, 1400], "approx": [385, 867], "approx_n_uniqu": [355, 867, 987, 1400], "approxim": [47, 212, 355, 385, 518, 785, 867, 883, 987, 1003, 1147, 1400, 1422, 1431], "april": [498, 1124, 1423, 1424], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 63, 64, 65, 96, 97, 98, 105, 111, 127, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 179, 181, 182, 183, 185, 195, 205, 209, 213, 214, 219, 221, 225, 226, 229, 234, 235, 236, 241, 242, 243, 255, 257, 258, 259, 260, 262, 263, 270, 271, 277, 279, 283, 287, 288, 289, 290, 293, 294, 298, 301, 308, 310, 312, 313, 314, 317, 318, 322, 324, 325, 329, 330, 333, 334, 355, 369, 370, 371, 372, 373, 381, 383, 397, 415, 420, 428, 440, 441, 442, 450, 456, 458, 459, 468, 496, 501, 509, 514, 516, 517, 518, 519, 520, 527, 542, 548, 549, 551, 553, 554, 556, 557, 558, 559, 561, 566, 567, 597, 601, 604, 649, 654, 660, 661, 664, 667, 668, 669, 670, 674, 675, 678, 679, 680, 682, 684, 686, 687, 688, 689, 691, 692, 693, 697, 699, 702, 705, 707, 708, 713, 722, 726, 728, 729, 733, 734, 735, 736, 737, 739, 750, 752, 754, 759, 764, 766, 770, 771, 772, 781, 782, 783, 784, 789, 792, 793, 794, 795, 796, 803, 805, 806, 808, 809, 824, 825, 830, 832, 835, 845, 849, 850, 851, 854, 855, 857, 859, 860, 862, 866, 867, 868, 869, 872, 873, 874, 875, 876, 879, 882, 884, 889, 890, 894, 897, 898, 904, 907, 908, 912, 913, 914, 918, 923, 924, 929, 931, 932, 933, 935, 937, 938, 941, 942, 944, 949, 952, 953, 956, 957, 958, 963, 987, 991, 993, 1000, 1001, 1015, 1016, 1032, 1035, 1037, 1045, 1057, 1058, 1066, 1072, 1081, 1082, 1090, 1122, 1127, 1135, 1141, 1143, 1145, 1146, 1147, 1148, 1149, 1156, 1158, 1170, 1175, 1176, 1179, 1181, 1182, 1184, 1185, 1186, 1187, 1191, 1196, 1197, 1227, 1231, 1234, 1254, 1262, 1263, 1265, 1269, 1270, 1271, 1272, 1276, 1279, 1281, 1283, 1285, 1287, 1288, 1290, 1292, 1294, 1299, 1303, 1307, 1310, 1317, 1326, 1330, 1332, 1337, 1338, 1339, 1340, 1343, 1354, 1356, 1358, 1363, 1370, 1375, 1378, 1380, 1381, 1382, 1384, 1385, 1392, 1394, 1396, 1400, 1401, 1404, 1406, 1407, 1408, 1410, 1412, 1415, 1420, 1428, 1431], "arbitrari": [52, 86, 238, 355, 463, 612, 613, 827, 828, 867, 895, 987, 993], "arbitrarili": [263, 355], "arcco": [867, 1400], "arccosh": [867, 1400], "arcsin": [867, 1400], "arcsinh": [867, 1400], "arctan": [787, 788, 867, 1400], "arctan2": 788, "arctanh": [867, 1400], "aren": [38, 48, 355, 987], "arg": [32, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 147, 198, 202, 234, 262, 278, 283, 355, 394, 658, 789, 815, 867, 904, 927, 932, 987, 1242, 1400, 1413], "arg_max": [867, 1400], "arg_min": [867, 1400], "arg_sort": [867, 1400], "arg_tru": [790, 867, 1400], "arg_uniqu": [867, 1400], "arg_wher": [395, 867], "argmax": [612, 867], "argument": [37, 40, 47, 96, 145, 147, 149, 150, 154, 162, 165, 166, 181, 183, 185, 195, 219, 223, 230, 242, 243, 258, 262, 277, 278, 287, 293, 294, 301, 314, 321, 325, 329, 330, 334, 355, 468, 496, 509, 521, 527, 548, 612, 613, 654, 658, 674, 708, 744, 745, 746, 753, 764, 781, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 812, 827, 828, 845, 849, 857, 863, 867, 896, 901, 907, 908, 913, 918, 927, 935, 937, 938, 944, 951, 956, 957, 963, 984, 987, 993, 1090, 1122, 1135, 1175, 1242, 1348, 1349, 1350, 1357, 1381, 1400, 1422, 1423], "aris": 152, "arithmet": [236, 355], "arm": 173, "arm64": 173, "around": [38, 48, 355, 987], "arr": [313, 355, 369, 859, 1380, 1392, 1400, 1423], "arr_bar": 1418, "arr_foo": 1418, "arrai": [131, 135, 150, 151, 154, 162, 166, 207, 211, 229, 230, 307, 312, 313, 314, 355, 361, 362, 363, 373, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 428, 456, 457, 458, 459, 570, 586, 587, 588, 589, 591, 600, 601, 603, 606, 608, 612, 670, 677, 679, 681, 683, 685, 688, 690, 692, 698, 770, 793, 811, 825, 846, 867, 901, 987, 992, 993, 995, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045, 1079, 1080, 1081, 1082, 1087, 1145, 1200, 1216, 1217, 1218, 1219, 1221, 1229, 1230, 1231, 1233, 1236, 1238, 1239, 1272, 1278, 1280, 1284, 1289, 1291, 1293, 1301, 1305, 1374, 1378, 1380, 1381, 1382, 1400, 1421, 1423, 1427, 1430], "array_agg": 1421, "array_contain": 1421, "array_get": 1421, "array_length": 1421, "array_low": 1421, "array_mean": 1421, "array_revers": 1421, "array_sum": 1421, "array_to_str": 1421, "array_uniqu": 1421, "array_upp": 1421, "arraylik": [1087, 1400], "arrow": [43, 44, 49, 131, 132, 152, 153, 156, 158, 168, 208, 255, 289, 290, 307, 309, 313, 355, 987, 996, 1374, 1380, 1400], "arrowarrayexport": [131, 132], "arrowinvaliderror": [40, 355], "arrowschemaexport": 992, "arrowstreamexport": [131, 132], "as_": [1400, 1405], "as_arrai": 825, "as_dict": [151, 277, 355], "as_expr": 993, "as_seri": [214, 308, 355, 886, 987, 993], "asarrai": [207, 995], "ascend": [243, 271, 287, 355, 654, 674, 867, 908, 924, 935, 987], "ascii": [7, 21, 445, 446, 713, 723, 725, 726, 730, 731, 737, 739, 750, 759, 993, 1063, 1064, 1317, 1327, 1329, 1330, 1334, 1335, 1341, 1343, 1354, 1363], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [713, 723, 725, 737, 1317, 1327, 1329, 1341], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1431, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 993, "ascii_t": 205, "ascii_uppercas": [323, 355], "asd": [714, 721, 1318, 1325], "asia": [138, 993, 1096, 1097, 1125], "asid": 501, "asin": 1421, "asind": 1421, "asof": [258, 355, 913, 987], "asofjoinstrategi": [258, 355, 913, 987], "assert": [174, 175, 176, 177, 181, 185, 287, 355, 879, 993], "assert_frame_equ": [175, 176, 228, 355, 1431], "assert_frame_not_equ": [174, 177], "assert_series_equ": [174, 177, 1144, 1400, 1431], "assert_series_not_equ": [175, 176], "assert_someth": 179, "assertionerror": [174, 175, 176, 177], "assign": [179, 211, 243, 340, 355, 420, 604, 654, 664, 741, 742, 867, 908, 969, 987, 1037, 1234, 1265, 1345, 1346, 1400], "associ": [39, 41, 57, 153, 155, 180, 183, 290, 355, 992, 1411, 1413, 1417], "assum": [33, 290, 355, 918, 970, 987, 1423], "assume_rol": 33, "assumpt": [612, 827, 867], "async": [63, 64, 152, 890, 987], "async_engin": 152, "asynchron": [64, 152, 890, 987], "asyncio": [64, 152, 890, 987], "asyncresult": [64, 890, 987], "asyncsurrealdb": 152, "ata": 27, "atan": 1421, "atan2": [787, 788, 1421], "atan2_ab": 1425, "atan2d": [788, 1421], "atan2d_ab": 1425, "atand": 1421, "atg": 27, "atgataaaggag": 27, "atol": [174, 175, 176, 177], "attack": 171, "attain": [708, 867], "attempt": [1, 10, 48, 49, 50, 51, 63, 64, 211, 463, 867, 889, 890, 895, 900, 929, 942, 987], "attr": [355, 358, 1400, 1405], "attribut": [66, 69, 72, 73, 74, 75, 76, 84, 88, 141, 142, 143, 144, 178, 196, 197, 199, 200, 355, 358, 369, 371, 372, 859, 860, 862, 863, 868, 869, 872, 874, 875, 876, 961, 962, 987, 1392, 1394, 1396, 1400, 1401, 1405, 1406, 1407, 1408], "attributeerror": 1, "audi": [308, 355, 671, 867], "august": 501, "australia": 807, "auth": 35, "authent": [40, 154, 162, 164, 165, 166, 167, 168, 170, 190, 355], "author": 1, "auto": [10, 38, 40, 43, 47, 48, 49, 50, 51, 63, 64, 65, 131, 133, 134, 135, 137, 154, 159, 160, 162, 165, 166, 168, 169, 170, 190, 195, 319, 355, 889, 890, 900, 929, 942, 987, 1431], "autofilt": [41, 355], "autofit": [41, 355], "autogener": [150, 151, 155, 161, 165], "automat": [8, 38, 48, 65, 131, 133, 134, 135, 137, 138, 147, 150, 151, 152, 153, 159, 160, 162, 165, 167, 168, 169, 181, 185, 187, 190, 302, 355, 612, 669, 744, 745, 746, 846, 867, 945, 987, 1270, 1271, 1348, 1349, 1350, 1383, 1400, 1410, 1412, 1415, 1428], "autumn": [735, 736], "avail": [41, 47, 51, 140, 152, 153, 154, 163, 166, 167, 179, 192, 193, 194, 205, 264, 279, 302, 354, 355, 369, 371, 372, 501, 664, 846, 859, 860, 862, 866, 867, 868, 869, 872, 873, 874, 875, 876, 879, 919, 945, 985, 986, 987, 993, 1085, 1265, 1392, 1394, 1396, 1400, 1401, 1404, 1406, 1407, 1408, 1419], "available_timezon": [72, 993], "averag": [41, 355, 517, 518, 519, 520, 664, 867, 1146, 1147, 1148, 1149, 1265, 1400, 1417], "avg": 1421, "avocado": 1423, "avoid": [131, 152, 181, 185, 234, 283, 289, 355, 380, 867, 904, 932, 987], "avro": [36, 148, 198, 355, 879], "avrocompress": [36, 355], "aw": [33, 38, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 355, 987], "awai": [694, 867, 1422], "await": [64, 152, 890, 981, 987], "await_result": [931, 987], "awar": [11, 152, 255, 289, 290, 309, 355, 518, 713, 723, 725, 737, 752, 867, 987, 1147, 1317, 1327, 1329, 1341, 1356, 1400], "aws_access_key_id": [40, 154, 166, 170, 355], "aws_region": [40, 166, 170, 355], "aws_secret_access_kei": [40, 154, 166, 170, 355], "awsassumerolekwarg": 33, "axi": [270, 322, 355, 358, 787, 788, 923, 952, 987, 1400, 1405], "aya": [739, 1343, 1354], "az": [154, 166, 167], "azur": [34, 38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 167, 168, 169, 170, 195, 355, 987], "azure_storage_account_kei": [154, 166, 167], "azure_storage_account_nam": [154, 166, 167], "b": [1, 11, 36, 38, 40, 43, 44, 47, 52, 60, 65, 88, 96, 102, 105, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 152, 155, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 267, 269, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 298, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 373, 378, 380, 381, 383, 384, 394, 396, 401, 406, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 441, 442, 454, 461, 465, 498, 501, 521, 523, 525, 526, 527, 529, 539, 540, 543, 546, 547, 548, 549, 551, 554, 556, 557, 558, 559, 564, 570, 575, 577, 583, 593, 594, 595, 596, 612, 613, 618, 634, 637, 638, 639, 640, 641, 642, 643, 651, 652, 654, 658, 661, 664, 668, 669, 671, 673, 700, 706, 708, 715, 719, 724, 728, 735, 736, 760, 761, 772, 775, 779, 781, 782, 783, 784, 785, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 842, 843, 844, 846, 848, 849, 850, 851, 852, 856, 863, 867, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 927, 928, 929, 930, 932, 933, 934, 936, 937, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 987, 993, 999, 1002, 1024, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1067, 1084, 1087, 1124, 1127, 1141, 1144, 1145, 1152, 1155, 1175, 1176, 1181, 1200, 1223, 1224, 1225, 1226, 1263, 1268, 1319, 1323, 1328, 1332, 1339, 1340, 1364, 1366, 1367, 1369, 1381, 1387, 1400, 1410, 1412, 1413, 1415, 1416, 1417, 1418, 1423, 1424, 1425, 1428], "b1": [58, 60], "b2": [58, 60], "b345": [41, 355], "b4": [41, 355], "b_b": [302, 355], "b_btm_by_a": [441, 867], "b_btm_by_b": [441, 867], "b_by_ca": [441, 772, 867], "b_by_cb": [441, 772, 867], "b_div_a": [248, 355], "b_is_not_nan": [557, 867], "b_isnan": [556, 867], "b_isnul": [559, 867], "b_not_nul": [558, 867], "b_revers": [638, 642, 671, 867], "b_suffix": 643, "b_sum": [334, 963], "b_top_by_a": [772, 867], "b_top_by_b": [772, 867], "ba": [463, 521, 627, 743, 812, 867, 993], "back": [4, 57, 170, 231, 243, 295, 313, 314, 355, 627, 654, 736, 867, 889, 900, 908, 929, 939, 942, 962, 987, 1152, 1381, 1400], "backend": [40, 152, 153, 154, 166, 167, 355, 358, 1400, 1405], "background": [63, 64, 355, 359, 889, 890, 986, 987], "backward": [47, 51, 233, 258, 355, 423, 468, 489, 526, 867, 903, 913, 987, 1040, 1090, 1115, 1155, 1400], "backward_fil": [526, 532, 867, 1155, 1160, 1400], "bad": [735, 736, 1339, 1340], "balanc": [184, 186, 1431], "ballon_dor": [720, 722, 1324, 1326], "banana": [218, 308, 337, 339, 342, 343, 344, 345, 346, 347, 348, 355, 441, 671, 717, 743, 772, 867, 966, 968, 971, 972, 973, 974, 975, 976, 977, 1423], "banded_column": [41, 355], "banded_row": [41, 355], "banker": [694, 867, 1295, 1400], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 146, 159, 160, 214, 217, 218, 219, 223, 224, 225, 226, 227, 228, 231, 234, 236, 238, 239, 240, 245, 247, 248, 249, 251, 257, 261, 263, 265, 266, 267, 268, 269, 272, 273, 276, 279, 281, 283, 284, 285, 288, 291, 292, 293, 295, 300, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 320, 321, 326, 327, 328, 333, 355, 358, 444, 463, 545, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 705, 714, 716, 719, 721, 722, 738, 740, 742, 747, 748, 785, 796, 797, 798, 813, 818, 819, 822, 823, 829, 831, 833, 834, 836, 837, 845, 848, 852, 856, 857, 863, 867, 886, 891, 892, 896, 897, 898, 899, 904, 910, 911, 912, 926, 932, 933, 936, 937, 950, 951, 955, 987, 992, 993, 1061, 1213, 1310, 1318, 1320, 1323, 1325, 1326, 1342, 1346, 1351, 1352, 1400, 1414, 1416, 1417, 1418, 1420, 1423, 1426], "bar2": 1423, "bar22": [236, 355], "bar_": 740, "bar_3": [310, 355], "bar_4": [310, 355], "bar_a": [279, 355], "bar_at_2": 1418, "bar_avg": 1417, "bar_b": [279, 355], "bar_color": [41, 355], "bar_max": 1417, "bar_median": 1417, "bar_min": 1417, "bar_negative_border_color_sam": [41, 355], "bar_negative_color_sam": [41, 355], "bar_std": 1417, "bar_sum": 1417, "bar_var": 1417, "bare": [620, 621, 993], "base": [32, 41, 52, 53, 54, 70, 116, 118, 155, 183, 211, 226, 234, 243, 259, 283, 287, 355, 469, 477, 514, 517, 518, 519, 520, 527, 542, 547, 607, 608, 659, 661, 669, 674, 678, 680, 682, 684, 686, 689, 691, 693, 754, 800, 801, 814, 840, 867, 904, 908, 914, 932, 935, 987, 993, 1091, 1099, 1141, 1146, 1147, 1148, 1149, 1170, 1174, 1237, 1238, 1242, 1261, 1263, 1270, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1358, 1391, 1400, 1416, 1422, 1431], "base64": [425, 426, 715, 716, 1042, 1043, 1319, 1320], "base_nam": [319, 355], "base_path": [52, 53, 54], "base_utc_offset": [477, 1099], "baseexcept": 1428, "basepartitioncontext": 53, "basi": [41, 155, 181, 355], "basic": [41, 207, 355, 619, 995, 1431], "basic_chart": [41, 355], "batch": [44, 96, 140, 145, 151, 152, 158, 160, 169, 171, 289, 317, 355, 889, 918, 987], "batch_siz": [38, 48, 145, 150, 151, 152, 160, 169, 171, 317, 355, 987], "batchedcsvread": 151, "baz": [238, 248, 249, 321, 355, 722, 740, 742, 813, 822, 837, 863, 911, 951, 987, 992, 993, 1326, 1346, 1414, 1420, 1423], "bb": [993, 1085, 1400, 1423, 1428], "bbb": [1, 41, 355, 760, 762, 763, 993], "bc": [724, 736, 850, 1328], "bcbc45": 1423, "bea": 13, "bear": 993, "bearer": 190, "bearer_token": 190, "beauti": 13, "becaus": [160, 169, 229, 243, 260, 263, 323, 341, 355, 531, 575, 867, 908, 970, 987, 1145, 1205, 1242, 1400], "becom": [183, 354, 428, 985, 986, 1045], "bed3": [41, 355], "been": [5, 31, 41, 188, 209, 336, 355, 533, 631, 664, 867, 965, 1265, 1400], "beetl": [308, 355, 671, 867], "befor": [41, 48, 49, 50, 51, 52, 71, 72, 145, 147, 150, 152, 153, 155, 165, 171, 174, 175, 176, 177, 187, 205, 231, 243, 258, 302, 312, 317, 321, 355, 434, 435, 437, 438, 458, 459, 460, 654, 655, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 719, 759, 766, 794, 842, 843, 867, 908, 910, 913, 951, 987, 1051, 1052, 1054, 1055, 1081, 1082, 1083, 1152, 1258, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1323, 1363, 1370, 1400, 1416], "beforehand": [749, 751, 752, 1353, 1355, 1356], "begin": [13, 41, 249, 355, 517, 519, 520, 546, 547, 720, 750, 867, 911, 987, 1146, 1148, 1149, 1173, 1174, 1324, 1354, 1400], "behav": [69, 234, 283, 355, 527, 613, 745, 746, 857, 867, 904, 932, 987], "behavior": [47, 51, 55, 150, 162, 170, 211, 225, 226, 234, 257, 258, 355, 405, 533, 549, 579, 581, 719, 813, 822, 867, 897, 898, 912, 913, 984, 987, 1023, 1176, 1209, 1211, 1323, 1400], "behaviour": [11, 57, 152, 225, 226, 234, 283, 302, 355, 712, 720, 721, 724, 735, 736, 773, 846, 867, 897, 898, 904, 932, 945, 987, 1316, 1324, 1325, 1328, 1339, 1340], "behind": 187, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 130, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 214, 230, 259, 264, 302, 310, 312, 317, 324, 355, 358, 359, 367, 368, 373, 460, 461, 468, 480, 542, 612, 613, 661, 675, 676, 678, 679, 680, 682, 684, 686, 687, 688, 689, 691, 692, 693, 719, 753, 791, 793, 811, 824, 825, 827, 828, 844, 857, 867, 886, 889, 890, 900, 901, 914, 919, 928, 929, 945, 953, 961, 987, 993, 1067, 1083, 1084, 1090, 1102, 1170, 1176, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1323, 1375, 1378, 1383, 1400, 1405, 1431], "belong": [1, 243, 355, 908, 987], "below": [20, 40, 154, 155, 166, 167, 226, 234, 279, 283, 355, 501, 526, 726, 735, 736, 750, 805, 806, 808, 809, 854, 855, 857, 863, 867, 904, 932, 987, 1127, 1330, 1339, 1340, 1354], "best": [167, 263, 341, 355, 613, 867, 1242, 1400], "better": [263, 312, 313, 341, 355, 446, 612, 613, 731, 827, 828, 867, 885, 970, 987, 1064, 1298, 1300, 1335, 1400], "between": [25, 65, 101, 153, 178, 179, 181, 185, 210, 219, 257, 271, 281, 289, 347, 355, 406, 442, 464, 465, 501, 548, 549, 573, 583, 593, 594, 595, 596, 655, 661, 662, 685, 686, 711, 727, 787, 788, 791, 796, 798, 825, 839, 842, 843, 867, 912, 924, 930, 976, 987, 1024, 1059, 1086, 1087, 1127, 1175, 1176, 1203, 1213, 1223, 1224, 1225, 1226, 1258, 1263, 1264, 1286, 1287, 1315, 1331, 1400, 1417, 1425], "between_ab": [548, 867], "beyond": [52, 757, 1361], "bia": [519, 520, 561, 675, 687, 705, 867, 1148, 1149, 1191, 1276, 1288, 1310, 1400], "bias": [561, 705, 867, 1191, 1310, 1400], "big": [151, 428, 1045], "big_fil": 151, "bigidx": 139, "bigqueri": 153, "bigquery_format": 198, "bin": [461, 542, 661, 754, 780, 860, 867, 1084, 1170, 1263, 1358, 1394, 1400, 1405], "bin2int": 428, "bin_count": [542, 867, 1170, 1400], "bin_i": [780, 867], "bin_x": [780, 867], "bin_xor_xi": [780, 867], "binari": [41, 43, 146, 152, 222, 295, 355, 373, 424, 425, 426, 427, 428, 429, 430, 463, 627, 715, 867, 895, 939, 987, 993, 1041, 1042, 1044, 1045, 1046, 1047, 1319, 1419], "binary_str": [780, 867], "bind": 155, "birthdai": 150, "bit": [71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 432, 433, 434, 435, 437, 438, 666, 712, 867, 1049, 1051, 1052, 1054, 1055, 1267, 1316, 1400, 1419, 1423], "bit_and": 1421, "bit_count": 1421, "bit_length": 1421, "bit_or": 1421, "bit_xor": 1421, "bitmap": [229, 355, 1145, 1400], "bitsiz": 373, "bitwis": [382, 431, 436, 439, 653, 780, 781, 782, 783, 784, 867, 1048, 1053, 1056, 1400, 1421, 1427], "bitwise_and": [867, 1400], "bitwise_count_on": [867, 1400], "bitwise_count_zero": [867, 1400], "bitwise_leading_on": [867, 1400], "bitwise_leading_zero": [867, 1400], "bitwise_or": [867, 1400], "bitwise_trailing_on": [867, 1400], "bitwise_trailing_zero": [867, 1400], "bitwise_xor": [867, 1400], "bla": [714, 721, 1318, 1325], "black": [263, 355, 424, 425, 426, 427, 430], "blindli": [575, 1205], "block": [21, 64, 242, 320, 355, 890, 907, 933, 950, 959, 960, 970, 987, 1298, 1300, 1400], "blue": [56, 97, 98, 424, 425, 426, 427, 430, 777, 867, 1389, 1400], "bob": [150, 271, 355, 367, 924, 987, 1429], "bodi": [41, 355, 359], "bold": [41, 355], "bom": [38, 48, 355, 987], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 38, 40, 41, 47, 48, 49, 50, 51, 52, 54, 55, 57, 63, 64, 65, 96, 131, 132, 133, 134, 136, 137, 138, 141, 145, 146, 147, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 207, 209, 213, 214, 215, 216, 221, 223, 228, 233, 234, 235, 236, 240, 241, 242, 243, 247, 250, 251, 252, 255, 257, 258, 268, 277, 279, 283, 284, 288, 289, 290, 291, 296, 299, 301, 302, 305, 308, 310, 313, 314, 318, 319, 320, 321, 324, 325, 327, 329, 337, 339, 342, 345, 355, 373, 380, 381, 382, 383, 384, 394, 397, 398, 401, 405, 406, 416, 421, 424, 425, 427, 430, 441, 442, 443, 447, 455, 456, 457, 458, 459, 461, 468, 480, 481, 497, 514, 515, 516, 517, 519, 520, 536, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 571, 575, 579, 581, 583, 592, 599, 605, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 628, 629, 648, 649, 651, 653, 654, 656, 657, 661, 664, 666, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 696, 697, 698, 700, 705, 707, 708, 711, 712, 713, 714, 715, 717, 723, 724, 725, 727, 735, 736, 737, 740, 741, 743, 749, 751, 752, 754, 756, 760, 762, 763, 772, 774, 777, 780, 781, 782, 783, 784, 786, 789, 790, 791, 792, 795, 796, 798, 799, 800, 801, 805, 806, 808, 809, 814, 820, 821, 824, 825, 826, 827, 828, 832, 837, 838, 840, 841, 845, 846, 849, 851, 854, 855, 857, 858, 867, 884, 886, 887, 889, 890, 894, 896, 900, 903, 904, 907, 908, 912, 913, 918, 923, 929, 932, 933, 940, 942, 944, 945, 949, 950, 951, 952, 953, 956, 961, 962, 966, 968, 971, 974, 987, 992, 993, 995, 1000, 1001, 1012, 1015, 1016, 1019, 1023, 1024, 1033, 1038, 1041, 1042, 1044, 1047, 1058, 1059, 1060, 1062, 1065, 1067, 1071, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1090, 1102, 1103, 1123, 1141, 1143, 1144, 1146, 1148, 1149, 1156, 1158, 1166, 1167, 1170, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1196, 1197, 1201, 1205, 1209, 1211, 1213, 1222, 1229, 1235, 1242, 1254, 1256, 1259, 1260, 1263, 1265, 1266, 1267, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1297, 1299, 1300, 1301, 1305, 1310, 1312, 1315, 1316, 1317, 1318, 1319, 1321, 1327, 1328, 1329, 1331, 1339, 1340, 1341, 1344, 1345, 1347, 1353, 1355, 1356, 1358, 1360, 1375, 1380, 1381, 1385, 1386, 1389, 1400, 1409, 1410, 1412, 1418, 1423, 1428], "boolean": [57, 96, 181, 213, 234, 236, 283, 301, 318, 355, 381, 382, 383, 397, 398, 401, 424, 427, 430, 441, 480, 481, 527, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 567, 571, 577, 651, 653, 656, 657, 697, 708, 728, 772, 779, 780, 789, 790, 849, 857, 867, 884, 904, 932, 944, 949, 987, 993, 1000, 1001, 1013, 1015, 1016, 1019, 1041, 1058, 1102, 1103, 1156, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1196, 1197, 1201, 1207, 1256, 1259, 1260, 1299, 1300, 1316, 1385, 1391, 1400, 1420], "border": 21, "both": [11, 26, 38, 48, 56, 97, 98, 152, 155, 170, 217, 243, 257, 258, 259, 271, 287, 288, 314, 324, 355, 384, 450, 461, 501, 521, 548, 661, 674, 678, 680, 682, 684, 686, 689, 691, 693, 739, 805, 806, 808, 809, 824, 825, 854, 855, 857, 863, 867, 878, 908, 912, 913, 914, 924, 935, 942, 953, 987, 993, 1072, 1127, 1175, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1343, 1381, 1400, 1428, 1429], "boto3": 33, "bottom": [213, 355, 441, 867, 884, 987], "bottom_k": [318, 355, 441, 771, 772, 867, 949, 987, 1058, 1384, 1385, 1400], "bottom_k_bi": [440, 771, 772, 867, 1057, 1384, 1385, 1400], "bound": [112, 150, 151, 229, 243, 355, 405, 450, 548, 579, 581, 604, 610, 776, 786, 805, 806, 808, 809, 824, 825, 854, 855, 867, 908, 987, 1023, 1072, 1145, 1175, 1209, 1211, 1240, 1388, 1400, 1418], "boundari": [243, 355, 450, 757, 867, 908, 987, 1072, 1361, 1400], "box": [21, 263, 355], "box_draw": 21, "branch": [63, 857, 889, 900, 929, 942, 987], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 130, 141, 142, 143, 144, 145, 146, 153, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 257, 259, 264, 302, 312, 317, 324, 355, 358, 359, 367, 368, 373, 460, 461, 468, 480, 542, 613, 661, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 753, 791, 793, 824, 825, 844, 867, 889, 890, 900, 912, 914, 919, 928, 929, 945, 953, 961, 987, 993, 1067, 1083, 1084, 1090, 1102, 1170, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1378, 1383, 1400, 1405], "breakpoint": [461, 542, 661, 867, 1084, 1170, 1263, 1400], "breezah": 165, "breviti": 205, "broadcast": [737, 793, 993, 1341], "broader": 993, "brotli": [47, 51, 355, 987], "brussel": [495, 1121], "bst": [473, 477, 495, 1095, 1099, 1121], "bucket": [40, 154, 166, 167, 170, 355, 496, 509, 542, 867, 1122, 1135, 1170, 1400], "bud": [735, 736, 1339, 1340], "budget": 1409, "buffer": [52, 150, 151, 152, 229, 255, 355, 1145, 1400], "buffer_s": [255, 355], "bug": [96, 145, 918, 970, 987, 1242, 1400], "build": [62, 132, 993, 1431], "built": 101, "builtin": [148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 355, 463, 867, 895, 987], "bundl": 205, "busi": [468, 480, 791, 1090, 1102], "by_alternate_row": 1, "by_dtyp": 993, "by_first_letter_of_column_nam": 58, "by_first_letter_of_column_valu": 58, "by_index": 993, "by_left": [258, 355, 913, 987], "by_nam": 993, "by_pred": [288, 355], "by_right": [258, 355, 913, 987], "bye": 1, "byi": 1423, "bys": [243, 355, 908, 987], "byte": [36, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 146, 148, 149, 150, 151, 156, 157, 158, 159, 160, 163, 164, 165, 168, 169, 222, 229, 295, 355, 428, 445, 446, 463, 627, 724, 725, 726, 730, 731, 739, 750, 867, 895, 939, 987, 1045, 1063, 1064, 1145, 1328, 1329, 1330, 1334, 1335, 1343, 1354, 1400, 1423], "bytesio": [41, 43, 44, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 295, 355, 463, 627, 867, 895, 939, 987], "c": [1, 11, 36, 38, 40, 41, 43, 44, 47, 52, 58, 60, 65, 105, 132, 134, 136, 138, 141, 147, 155, 165, 209, 210, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 228, 230, 234, 236, 239, 240, 241, 242, 243, 245, 247, 248, 256, 257, 260, 261, 262, 264, 265, 267, 269, 272, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 288, 291, 292, 293, 300, 301, 302, 303, 304, 306, 307, 310, 311, 312, 313, 314, 315, 318, 322, 323, 324, 326, 327, 329, 334, 337, 338, 339, 342, 343, 345, 348, 349, 355, 359, 373, 378, 380, 381, 383, 401, 441, 461, 501, 539, 548, 570, 583, 613, 620, 637, 638, 652, 654, 658, 661, 700, 741, 749, 772, 775, 782, 784, 785, 787, 788, 789, 792, 793, 795, 796, 797, 798, 800, 801, 803, 813, 814, 815, 818, 819, 822, 823, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 846, 848, 850, 851, 852, 856, 863, 867, 884, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 904, 907, 908, 912, 916, 919, 926, 928, 929, 932, 933, 934, 936, 937, 942, 943, 944, 945, 949, 952, 953, 956, 958, 963, 966, 967, 968, 971, 972, 974, 977, 978, 987, 993, 1084, 1175, 1200, 1263, 1345, 1353, 1367, 1387, 1400, 1410, 1412, 1413, 1415, 1416, 1417, 1418, 1423, 1428], "c00": 993, "c01": 993, "c02": 993, "c03": 993, "c05": 993, "c1": 420, "c123": 1423, "c2": 420, "c20": 993, "c25": 993, "c3": 420, "c40": 993, "c45": 1423, "c4d79b": [41, 355], "c50": 993, "c567": [41, 355], "c60": 993, "c75": 993, "c80": 993, "c8ae6d2b276": [41, 355], "c93": 993, "c95": 993, "c96": 993, "c97": 993, "c98": 993, "c99": 993, "c_btm_by_a": [441, 867], "c_btm_by_b": [441, 867], "c_by_ca": [441, 772, 867], "c_by_cb": [441, 772, 867], "c_c_c": [846, 945, 987], "c_contigu": [313, 355], "c_max": [654, 867], "c_mean_squar": [334, 963], "c_min": [654, 867], "c_top_by_a": [772, 867], "c_top_by_b": [772, 867], "c_total": 1428, "ca": 799, "cach": [56, 63, 97, 98, 125, 156, 165, 168, 170, 174, 175, 176, 177, 189, 668, 669, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 749, 751, 752, 756, 867, 878, 889, 900, 929, 942, 987, 1270, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1355, 1356, 1360, 1400], "cadi": [279, 355], "cafe": [754, 1358], "caf\u00e9": [445, 446, 730, 731, 993, 1063, 1064, 1334, 1335], "calamin": 155, "calcul": [41, 47, 51, 57, 221, 243, 303, 326, 355, 464, 517, 518, 519, 520, 561, 573, 593, 600, 606, 610, 675, 687, 705, 710, 776, 778, 798, 842, 843, 848, 856, 867, 894, 908, 946, 954, 987, 1085, 1086, 1146, 1147, 1148, 1149, 1191, 1203, 1223, 1276, 1288, 1310, 1314, 1390, 1400], "calendar": [71, 72, 243, 258, 287, 325, 355, 471, 482, 484, 491, 496, 509, 513, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 810, 854, 855, 867, 908, 913, 935, 987, 1093, 1104, 1109, 1117, 1122, 1135, 1139, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "calendar_year": [482, 513], "call": [10, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 136, 145, 147, 150, 151, 152, 154, 155, 156, 160, 162, 165, 166, 168, 169, 170, 174, 175, 176, 177, 181, 185, 195, 205, 213, 242, 243, 260, 263, 287, 302, 313, 318, 354, 355, 440, 441, 456, 459, 468, 480, 612, 613, 668, 669, 701, 771, 772, 791, 797, 827, 828, 863, 867, 884, 889, 900, 907, 908, 929, 935, 942, 945, 949, 984, 985, 986, 987, 993, 1057, 1058, 1090, 1102, 1242, 1271, 1306, 1380, 1384, 1385, 1400, 1410, 1414, 1428], "callabl": [52, 53, 54, 58, 59, 60, 61, 96, 145, 165, 236, 262, 263, 278, 284, 341, 355, 420, 604, 612, 613, 638, 639, 658, 676, 800, 801, 814, 827, 828, 840, 867, 918, 927, 928, 933, 970, 987, 1037, 1234, 1242, 1277, 1400], "callback": [47, 51, 52, 53, 54, 142, 144, 355, 987], "caller": [96, 153, 271, 355, 604, 918, 924, 970, 987], "cam": [284, 355, 933, 987], "can": [1, 15, 28, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 56, 57, 63, 71, 72, 74, 88, 96, 97, 98, 131, 134, 145, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 165, 166, 168, 169, 170, 171, 179, 180, 181, 185, 187, 190, 195, 205, 207, 213, 215, 225, 226, 227, 236, 238, 242, 243, 250, 252, 254, 257, 258, 263, 264, 275, 279, 287, 289, 290, 293, 295, 296, 301, 312, 313, 317, 318, 319, 323, 329, 332, 341, 355, 358, 365, 373, 381, 420, 441, 456, 459, 460, 463, 468, 480, 488, 489, 491, 495, 498, 501, 518, 524, 527, 548, 575, 577, 604, 612, 613, 620, 624, 627, 628, 634, 654, 659, 660, 661, 666, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 698, 700, 705, 708, 713, 722, 728, 729, 733, 735, 736, 737, 744, 745, 746, 749, 760, 766, 772, 789, 791, 804, 807, 814, 816, 820, 821, 824, 827, 828, 846, 850, 857, 863, 866, 867, 878, 884, 885, 889, 890, 895, 897, 898, 900, 908, 912, 913, 919, 935, 937, 939, 940, 942, 944, 945, 949, 956, 959, 960, 987, 993, 995, 1037, 1058, 1083, 1090, 1102, 1114, 1115, 1117, 1121, 1124, 1127, 1147, 1153, 1175, 1205, 1234, 1242, 1247, 1261, 1262, 1263, 1267, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1298, 1300, 1301, 1304, 1310, 1317, 1318, 1326, 1333, 1339, 1340, 1341, 1348, 1349, 1350, 1353, 1370, 1378, 1380, 1385, 1400, 1405, 1415, 1428], "cancel": [889, 987], "candid": [720, 722, 1324, 1326], "cannot": [1, 47, 48, 49, 50, 51, 63, 64, 107, 110, 150, 151, 155, 156, 158, 160, 161, 162, 170, 187, 205, 258, 262, 263, 290, 291, 313, 332, 341, 355, 425, 501, 521, 592, 612, 613, 628, 696, 700, 715, 741, 762, 827, 828, 867, 889, 890, 900, 913, 918, 929, 942, 960, 962, 970, 987, 993, 1042, 1127, 1222, 1242, 1297, 1319, 1345, 1380, 1400], "capabl": [1, 41, 355], "capac": [229, 299, 355, 1145, 1305, 1400], "capit": [757, 1361], "captur": [720, 722, 735, 736, 1324, 1326, 1339, 1340], "car": [284, 308, 355, 671, 867, 933, 987], "cardin": [212, 355, 385, 785, 867, 883, 987, 1003, 1400], "care": [41, 296, 355, 613, 654, 698, 867, 940, 987, 1301, 1400], "cars_revers": [671, 867], "cartesian": [257, 355, 912, 987], "case": [41, 56, 57, 64, 96, 105, 131, 133, 134, 135, 137, 145, 147, 152, 159, 160, 169, 170, 187, 231, 243, 255, 262, 263, 279, 287, 289, 290, 309, 312, 313, 355, 469, 518, 612, 624, 625, 638, 654, 674, 712, 713, 721, 723, 724, 725, 735, 736, 737, 757, 857, 867, 890, 908, 932, 935, 987, 993, 1091, 1147, 1152, 1316, 1317, 1325, 1327, 1328, 1329, 1339, 1340, 1341, 1361, 1378, 1400], "cast": [1, 40, 55, 59, 60, 131, 133, 134, 137, 147, 170, 174, 175, 176, 177, 236, 243, 264, 278, 287, 312, 313, 317, 329, 355, 384, 458, 459, 470, 498, 501, 512, 653, 658, 659, 666, 668, 674, 728, 729, 759, 766, 770, 794, 795, 847, 867, 879, 908, 919, 927, 928, 935, 956, 987, 993, 1067, 1081, 1082, 1092, 1124, 1127, 1138, 1261, 1267, 1332, 1333, 1358, 1363, 1370, 1376, 1380, 1382, 1383, 1400, 1421], "cast_opt": 170, "cast_str_to_int": [278, 355, 927, 987], "cast_to_float_if_necessari": [928, 987], "cast_to_supertyp": [147, 867], "cat": [27, 56, 97, 98, 461, 661, 712, 714, 755, 758, 770, 795, 862, 867, 993, 1084, 1170, 1263, 1316, 1318, 1359, 1362, 1396, 1400], "catalog": [0, 879], "catalog_nam": [191, 193, 194, 195], "cataloginfo": [192, 203], "categor": [40, 56, 75, 97, 98, 100, 174, 175, 176, 177, 257, 310, 355, 373, 443, 444, 445, 446, 447, 461, 661, 668, 669, 770, 867, 993, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1084, 1263, 1270, 1271, 1382, 1400], "categori": [41, 56, 69, 75, 98, 310, 355, 373, 444, 461, 542, 661, 867, 1061, 1084, 1170, 1263, 1375, 1400], "categorical_as_str": [174, 175, 176, 177], "categoricalord": 69, "categoricaltyp": [307, 355], "caus": [113, 122, 132, 150, 151, 152, 165, 209, 231, 313, 355, 1152, 1380, 1400], "cb": 799, "cba": 746, "cbrt": [867, 1400, 1421], "cbrt_a": 1422, "cc": [521, 812, 867, 993, 1085, 1400, 1423], "ccc": [1, 41, 355, 760, 762, 763, 993, 1423], "ccy": 1431, "cd": [736, 760, 762, 763, 993], "cd34": 736, "cdatainterfac": [132, 208, 996], "cde": [993, 1423], "cdot": [549, 867, 1176, 1400], "cdt": [496, 509, 1122, 1135], "ceil": [59, 867, 1400, 1421], "ceil_a": 1422, "cell": [16, 17, 41, 279, 355], "cent": [471, 1339], "center": [16, 17, 41, 355, 517, 519, 520, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 867, 1146, 1148, 1149, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1400], "central": [166, 167, 205, 561, 705, 867, 1191, 1310, 1400], "centuri": 1424, "certain": [52, 248, 325, 355, 373, 745, 746, 863, 882, 889, 929, 987, 993, 1400], "certainli": [749, 751, 752, 1353, 1355, 1356], "cest": [495, 1121], "cet": [495, 1121], "cfg": [2, 4, 18, 205], "cfg_ascii_fram": 205, "cfg_markdown": 205, "cfg_verbos": 205, "cfoo": [958, 987], "chain": 857, "chanc": [178, 181, 185, 1431], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 73, 79, 130, 132, 138, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 213, 243, 257, 259, 264, 279, 287, 302, 307, 312, 317, 318, 324, 325, 331, 355, 358, 359, 367, 368, 373, 441, 460, 461, 464, 468, 480, 501, 517, 519, 520, 542, 613, 654, 655, 661, 668, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 753, 772, 791, 793, 824, 825, 842, 843, 844, 857, 867, 884, 889, 890, 900, 908, 912, 914, 919, 928, 929, 935, 945, 949, 953, 959, 961, 987, 993, 1067, 1083, 1084, 1090, 1102, 1127, 1144, 1146, 1148, 1149, 1170, 1258, 1263, 1270, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1305, 1357, 1374, 1378, 1383, 1400, 1405, 1428], "changes_length": [147, 867], "char": [28, 150, 151, 165, 721, 1325], "char_length": 1423, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 48, 99, 149, 150, 151, 153, 165, 355, 445, 446, 491, 718, 719, 721, 726, 730, 731, 733, 734, 735, 736, 739, 740, 741, 744, 745, 746, 747, 748, 750, 757, 759, 929, 987, 993, 1063, 1064, 1117, 1322, 1323, 1325, 1330, 1334, 1335, 1337, 1338, 1339, 1340, 1343, 1344, 1345, 1348, 1349, 1350, 1354, 1361, 1363, 1423], "character_length": 1423, "characterist": [181, 185], "charli": [150, 367, 1429], "chart": [41, 355, 358, 929, 987, 1400, 1405], "cheap": [215, 216, 294, 330, 355, 887, 888, 938, 957, 987, 1071, 1073, 1400], "cheaper": [579, 1209], "check": [40, 72, 107, 150, 151, 152, 165, 174, 175, 176, 177, 189, 228, 253, 257, 258, 355, 401, 424, 427, 430, 443, 447, 539, 548, 549, 553, 571, 712, 717, 724, 743, 867, 912, 913, 918, 987, 1019, 1041, 1044, 1047, 1060, 1065, 1144, 1166, 1167, 1178, 1181, 1188, 1190, 1201, 1316, 1321, 1328, 1347, 1400], "check_column_ord": [174, 175], "check_dtyp": [174, 175, 176, 177, 992, 1144, 1400], "check_exact": [174, 175, 176, 177], "check_nam": [176, 177, 1144, 1400], "check_ord": [176, 177], "check_order_observ": 961, "check_row_ord": [174, 175], "check_sorted": [258, 355, 913, 987], "children": 141, "choos": [47, 49, 51, 243, 279, 355, 501, 908, 987, 993, 1127], "chrono": [38, 48, 101, 355, 498, 501, 749, 751, 752, 756, 987, 1124, 1127, 1353, 1355, 1356, 1360, 1423, 1424], "chunk": [15, 51, 140, 150, 151, 154, 160, 162, 165, 166, 168, 169, 170, 181, 185, 231, 256, 274, 313, 355, 384, 665, 867, 987, 1002, 1070, 1152, 1164, 1248, 1266, 1374, 1380, 1400], "chunk_length": 1400, "chunkedarrai": [131, 274, 355], "citi": [735, 736], "clang": 173, "clarifi": 367, "clariti": [288, 355], "class": [1, 18, 32, 33, 34, 35, 52, 53, 54, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 116, 118, 141, 142, 143, 144, 178, 179, 190, 196, 197, 199, 200, 290, 295, 355, 373, 627, 824, 854, 863, 867, 873, 879, 892, 899, 936, 955, 961, 962, 987, 992, 993, 1379, 1400, 1404, 1412, 1428], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 222, 355, 463, 533, 867, 895, 987, 1410, 1428], "claus": [879, 1418, 1427], "clean": [749, 751, 752, 1353, 1355, 1356], "cleaner": 205, "cleanli": [11, 241, 355, 1428], "clear": [56, 97, 216, 355, 888, 987, 1073, 1400], "clearer": 134, "clickhous": 153, "client": [33, 152, 190], "clip": [867, 1400], "clipboard": [37, 149, 355, 879], "clone": [133, 134, 135, 136, 137, 215, 313, 355, 887, 987, 1071, 1400], "close": [41, 48, 49, 50, 51, 53, 152, 243, 287, 302, 355, 461, 548, 549, 609, 661, 674, 678, 680, 682, 684, 686, 689, 691, 693, 705, 805, 806, 808, 809, 824, 825, 854, 855, 867, 908, 935, 945, 987, 1084, 1175, 1176, 1263, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1310, 1400], "closedinterv": [243, 287, 355, 548, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 824, 825, 854, 855, 867, 908, 935, 987, 1175, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "closest": [131, 258, 355, 913, 987, 1417, 1422], "closur": [678, 680, 689, 691, 693, 867], "cloud": [35, 38, 40, 43, 47, 48, 49, 50, 51, 96, 152, 154, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 195, 355, 879, 931, 987], "cloudi": [735, 736], "cloudpickl": 173, "cluster": 170, "cluster_with_column": [63, 889, 900, 929, 942, 961, 987], "co": [721, 867, 1325, 1400, 1421], "coalesc": [65, 257, 258, 324, 355, 546, 723, 725, 749, 857, 867, 912, 913, 953, 987, 1329, 1353, 1416, 1421], "code": [205, 217, 257, 355, 424, 425, 426, 427, 430, 463, 613, 698, 867, 895, 912, 916, 987, 1301, 1400, 1410], "codebas": 205, "coeffici": [219, 355, 705, 867, 1310, 1400, 1417], "coerc": [65, 667, 867, 1269, 1400], "coerce_int96_timestamp_unit": 55, "coercion": [63, 264, 355, 667, 867, 889, 900, 919, 929, 942, 987, 1269, 1400], "col": [1, 13, 38, 41, 48, 52, 57, 58, 59, 60, 135, 137, 165, 179, 181, 234, 242, 243, 248, 251, 253, 257, 258, 259, 263, 264, 275, 278, 279, 283, 287, 288, 293, 301, 312, 317, 321, 323, 329, 334, 355, 359, 367, 373, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 639, 641, 643, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 789, 790, 792, 793, 794, 795, 797, 799, 802, 804, 805, 807, 808, 810, 814, 815, 816, 817, 818, 819, 829, 831, 833, 834, 836, 839, 840, 845, 846, 848, 850, 852, 853, 856, 857, 867, 904, 907, 908, 910, 912, 913, 914, 919, 927, 928, 932, 935, 937, 944, 945, 951, 956, 958, 963, 987, 993, 1117, 1121, 1205, 1298, 1300, 1329, 1333, 1353, 1400, 1431], "col0": [181, 1431], "col1": [181, 279, 355, 987, 1431], "col2": [181, 279, 355, 987, 1431], "col3": [279, 355, 1431], "col4": 1431, "col_idx": 211, "col_nam": [278, 355, 613, 857, 867, 927, 987], "col_or_expr": 367, "cole": 146, "coli": [41, 355, 644, 645, 993, 1431], "collaps": [63, 889, 900, 929, 942, 987], "collapse_join": [63, 889, 900, 929, 942, 961, 987], "collect": [10, 48, 49, 50, 51, 55, 60, 63, 64, 96, 130, 165, 166, 167, 171, 181, 182, 185, 225, 226, 260, 279, 302, 307, 320, 321, 355, 373, 521, 553, 593, 594, 595, 596, 613, 794, 812, 816, 845, 846, 849, 867, 882, 883, 884, 886, 887, 890, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 937, 939, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 960, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 984, 986, 987, 993, 1181, 1223, 1224, 1225, 1226, 1400, 1410, 1411, 1412, 1415, 1416, 1428, 1429, 1431], "collect_al": [60, 64, 130, 889, 890, 987], "collect_all_async": [890, 987], "collect_async": [64, 987], "collect_dtyp": [360, 365, 373], "collect_schema": [60, 164, 260, 355, 892, 899, 927, 936, 955, 987], "collis": 65, "colnam": [25, 41, 165, 355], "color": [56, 97, 98, 341, 355, 358, 424, 425, 426, 427, 430, 715, 777, 867, 970, 1041, 1042, 1043, 1044, 1047, 1319, 1389, 1400, 1423], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 51, 52, 53, 54, 56, 57, 58, 65, 72, 88, 98, 102, 106, 131, 133, 134, 135, 136, 137, 138, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 181, 197, 200, 210, 211, 213, 214, 217, 219, 220, 223, 224, 225, 226, 227, 230, 234, 235, 238, 239, 241, 242, 243, 247, 248, 253, 254, 255, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 296, 301, 303, 304, 305, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 340, 355, 358, 359, 367, 373, 380, 381, 383, 394, 403, 414, 416, 419, 428, 441, 450, 454, 455, 461, 471, 472, 474, 475, 476, 479, 481, 482, 483, 484, 485, 486, 487, 490, 492, 493, 494, 497, 498, 499, 501, 510, 511, 513, 521, 523, 527, 529, 542, 547, 548, 564, 570, 576, 579, 599, 603, 613, 619, 620, 622, 624, 626, 637, 639, 640, 641, 642, 643, 644, 645, 654, 661, 665, 667, 668, 669, 670, 672, 673, 674, 678, 680, 682, 684, 686, 689, 691, 693, 700, 701, 707, 708, 711, 719, 724, 726, 727, 737, 741, 742, 749, 750, 751, 752, 753, 754, 756, 761, 764, 772, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 867, 884, 886, 893, 896, 897, 898, 899, 901, 904, 907, 908, 912, 913, 914, 918, 919, 920, 921, 922, 923, 925, 926, 930, 932, 933, 935, 936, 937, 938, 940, 944, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 969, 970, 987, 992, 993, 1000, 1001, 1021, 1031, 1033, 1036, 1045, 1058, 1062, 1066, 1072, 1077, 1078, 1084, 1093, 1096, 1097, 1098, 1101, 1103, 1104, 1108, 1109, 1110, 1112, 1113, 1116, 1118, 1119, 1123, 1124, 1125, 1127, 1136, 1137, 1139, 1151, 1170, 1174, 1200, 1206, 1209, 1229, 1233, 1263, 1269, 1271, 1272, 1275, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1304, 1315, 1323, 1328, 1331, 1345, 1346, 1353, 1355, 1356, 1357, 1358, 1360, 1366, 1369, 1375, 1376, 1385, 1389, 1400, 1416, 1417, 1418, 1420, 1422, 1423, 1425, 1426, 1429, 1430, 1431], "column_0": [1, 263, 319, 355, 931, 987], "column_1": [263, 319, 355, 1425], "column_2": [319, 355, 1425], "column_abc": 16, "column_format": [41, 355], "column_nam": [262, 284, 319, 355, 373, 933, 987], "column_tot": [41, 355], "column_width": [41, 355], "column_x": [150, 151, 155, 161, 165], "column_xyz": 16, "columnar": [135, 137, 255, 289, 355], "columnformatdict": [41, 355], "columninfo": [200, 203], "columnmap": 170, "columnnameorselector": [214, 223, 225, 226, 230, 270, 277, 279, 290, 310, 320, 321, 322, 323, 355, 886, 896, 897, 898, 901, 923, 950, 951, 952, 987], "columnnotfounderror": [238, 239, 355], "columntotalsdefinit": [41, 355], "columnwidthsdefinit": [41, 355], "colx": [41, 355, 644, 645, 993, 1415, 1431], "colz": [993, 1431], "com": [33, 41, 153, 355, 517, 519, 520, 720, 721, 722, 867, 1146, 1148, 1149, 1324, 1325, 1326, 1400], "combin": [47, 51, 63, 65, 130, 234, 243, 244, 258, 279, 283, 287, 325, 355, 382, 395, 518, 531, 628, 653, 669, 674, 744, 745, 746, 805, 806, 808, 809, 854, 855, 857, 867, 889, 900, 908, 913, 929, 932, 935, 942, 987, 1147, 1271, 1348, 1349, 1350, 1400, 1416, 1429], "come": [125, 153, 243, 320, 322, 355, 468, 480, 488, 489, 561, 791, 857, 867, 908, 950, 952, 987, 1090, 1102, 1114, 1115, 1191, 1400], "comm_subexpr_elim": [63, 889, 900, 929, 942, 961, 987], "comm_subplan_elim": [63, 889, 900, 929, 942, 961, 987], "comma": [37, 38, 48, 150, 151, 165, 355, 753, 987, 1357], "comment": [150, 151, 165, 196, 197, 199, 200], "comment_prefix": [150, 151, 165], "common": [55, 57, 63, 65, 105, 130, 150, 151, 165, 324, 355, 638, 873, 889, 900, 929, 942, 953, 987, 1404], "commonli": 857, "compact": 1426, "compani": 153, "compar": [170, 174, 175, 176, 177, 228, 234, 283, 355, 515, 516, 536, 538, 548, 563, 611, 648, 649, 867, 904, 932, 987, 1143, 1144, 1254, 1400], "comparison": [171, 234, 283, 355, 904, 932, 987], "compat": [21, 41, 43, 44, 47, 49, 51, 100, 138, 307, 355, 712, 714, 720, 721, 722, 724, 735, 736, 987, 993, 1127, 1316, 1318, 1324, 1325, 1326, 1328, 1339, 1340, 1374, 1400, 1410, 1423, 1424, 1428], "compat_level": [43, 44, 49, 307, 355, 987, 1374, 1400], "compatibleframetyp": [1411, 1413, 1428], "compatlevel": [43, 44, 49, 307, 355, 987, 1374, 1400], "competit": [664, 867, 1265, 1400], "compil": [62, 399, 400, 568, 569, 991, 1017, 1018, 1198, 1199], "complement": 993, "complet": [150, 152, 165, 1429], "complex": [182, 440, 441, 460, 771, 772, 867, 1057, 1058, 1083, 1384, 1385, 1400], "compliant": [41, 355, 501, 1127], "compon": [472, 497, 501, 749, 752, 810, 1094, 1123, 1127, 1353, 1356], "compos": 1429, "composit": [88, 1431], "compound": [138, 290, 355, 993], "comprehens": 179, "compress": [36, 40, 43, 44, 47, 49, 51, 355, 672, 867, 987, 1274, 1400], "compression_level": [47, 51, 355, 987], "comput": [63, 65, 103, 229, 242, 258, 279, 314, 320, 334, 347, 355, 377, 386, 387, 388, 389, 390, 391, 409, 410, 411, 412, 417, 418, 422, 448, 451, 452, 453, 456, 457, 458, 459, 465, 514, 517, 518, 519, 520, 522, 561, 586, 587, 588, 589, 593, 594, 595, 596, 600, 606, 607, 608, 609, 634, 654, 655, 660, 664, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 702, 703, 704, 705, 709, 768, 769, 777, 782, 784, 787, 788, 789, 796, 798, 811, 832, 842, 843, 857, 867, 882, 889, 907, 910, 912, 913, 931, 950, 958, 963, 976, 987, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1027, 1028, 1029, 1034, 1035, 1039, 1068, 1074, 1075, 1076, 1079, 1080, 1081, 1082, 1087, 1141, 1145, 1146, 1147, 1148, 1149, 1150, 1191, 1216, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1230, 1236, 1237, 1238, 1239, 1247, 1258, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1307, 1308, 1309, 1310, 1313, 1372, 1373, 1381, 1389, 1400, 1422, 1425], "computecontext": [931, 987], "computeerror": [624, 754, 857, 1358], "concat": [56, 97, 98, 106, 151, 258, 355, 913, 958, 987, 1070, 1164, 1248, 1266, 1400, 1421], "concat_list": [575, 577, 811], "concat_w": [302, 355, 846, 945, 987, 1421, 1428], "concaten": [56, 65, 97, 98, 236, 278, 355, 658, 711, 727, 793, 794, 795, 867, 927, 987, 1070, 1248, 1315, 1331, 1400, 1423], "concatmethod": 65, "conclus": [135, 137, 355, 987], "concret": [181, 185], "condit": [41, 226, 234, 259, 283, 288, 355, 443, 447, 527, 548, 549, 717, 743, 790, 814, 857, 867, 904, 914, 932, 987, 1175, 1176, 1400, 1416, 1421, 1427], "conditional_format": [41, 355], "conditionalformatdict": [41, 355], "config": [0, 57, 221, 312, 355, 713, 723, 725, 737, 805, 806, 808, 809, 810, 879, 889, 894, 987, 1317, 1329, 1341], "configur": [5, 33, 40, 55, 152, 153, 154, 162, 164, 166, 167, 170, 205, 355, 358, 880, 889, 900, 929, 942, 962, 987, 1400, 1405], "configure_axisx": [355, 358, 1400, 1405], "configure_point": [355, 358, 1400, 1405], "conflat": [548, 867], "conform": [150, 1431], "confus": [105, 381, 556, 557, 737, 867], "conjunct": [41, 97, 152, 155, 161, 179, 355, 820, 823, 987], "conn": 152, "connect": [38, 39, 43, 47, 48, 49, 50, 51, 75, 150, 152, 153, 156, 158, 160, 162, 165, 168, 169, 170, 171, 195, 355, 880, 987], "connectionorcursor": [39, 152, 355], "connector": 153, "connectorx": [152, 153, 173], "consecut": [233, 355, 423, 526, 532, 711, 727, 735, 867, 903, 987, 1040, 1155, 1160, 1315, 1331, 1340, 1400], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 97, 98, 130, 136, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 213, 225, 226, 228, 254, 259, 263, 264, 270, 289, 302, 312, 317, 318, 320, 322, 324, 355, 358, 359, 367, 368, 373, 441, 450, 460, 461, 468, 480, 531, 542, 549, 613, 620, 636, 661, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 753, 772, 791, 793, 800, 814, 824, 825, 844, 863, 867, 884, 889, 890, 897, 898, 900, 914, 919, 923, 928, 929, 942, 945, 949, 950, 952, 953, 961, 970, 987, 993, 1058, 1067, 1072, 1083, 1084, 1090, 1102, 1144, 1170, 1176, 1242, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1298, 1300, 1378, 1383, 1385, 1400, 1405, 1410], "consider": 146, "consist": [242, 277, 313, 355, 749, 805, 806, 824, 857, 907, 987, 993, 1002, 1152, 1353, 1380, 1400], "consola": [41, 355], "const": 11, "constant": [229, 287, 355, 469, 518, 524, 825, 867, 935, 987, 1091, 1145, 1147, 1153, 1400], "constrain": [57, 165, 225, 226, 355, 897, 898, 987, 993], "constraint": [234, 283, 355, 527, 857, 867, 904, 932, 987, 993, 1430], "construct": [56, 97, 98, 105, 131, 133, 134, 135, 136, 137, 138, 146, 152, 355, 533, 838, 841, 858, 863, 867, 895, 987, 1400, 1415], "construct_categor": 56, "constructor": [146, 155, 185], "consumpt": [52, 53, 54], "contain": [5, 38, 39, 40, 41, 48, 52, 53, 54, 57, 62, 101, 133, 136, 138, 147, 152, 153, 154, 162, 166, 167, 170, 180, 181, 183, 185, 213, 218, 225, 226, 227, 243, 251, 256, 275, 312, 313, 317, 318, 324, 336, 355, 373, 381, 383, 406, 427, 430, 443, 447, 463, 539, 553, 583, 613, 711, 713, 717, 720, 722, 724, 727, 729, 742, 743, 759, 781, 782, 783, 784, 795, 828, 857, 867, 884, 892, 895, 897, 898, 899, 908, 929, 949, 953, 965, 987, 993, 1000, 1001, 1024, 1060, 1065, 1166, 1167, 1213, 1248, 1315, 1317, 1321, 1324, 1326, 1328, 1331, 1333, 1346, 1347, 1363, 1374, 1380, 1400, 1418], "contains_with_expr": 424, "contains_with_lit": 424, "content": [14, 48, 49, 50, 51, 701, 867, 987, 991, 1306, 1400], "context": [56, 97, 98, 142, 144, 187, 275, 302, 355, 373, 379, 527, 575, 613, 624, 707, 708, 777, 797, 813, 816, 822, 823, 828, 837, 841, 844, 845, 866, 867, 878, 879, 931, 945, 958, 987, 1205, 1389, 1400, 1415, 1428, 1430], "contigu": [65, 131, 132, 136, 150, 151, 154, 156, 158, 160, 162, 165, 166, 168, 169, 170, 282, 313, 355], "continu": [461, 661, 705, 867, 1084, 1263, 1310, 1400, 1417], "contrast": [810, 928, 987], "control": [11, 12, 41, 51, 64, 65, 155, 179, 181, 301, 302, 312, 355, 669, 708, 846, 867, 889, 890, 900, 929, 942, 944, 945, 962, 984, 987, 1271, 1378, 1400, 1412, 1415, 1428], "conveni": [231, 317, 355, 979, 1002, 1152, 1400, 1410], "convers": [132, 209, 255, 256, 289, 290, 309, 313, 314, 355, 473, 749, 751, 752, 756, 879, 1095, 1353, 1355, 1356, 1360, 1380, 1381, 1400, 1426, 1428], "convert": [40, 55, 101, 132, 136, 147, 154, 155, 161, 166, 209, 290, 308, 309, 310, 311, 312, 313, 314, 316, 317, 355, 419, 420, 462, 473, 498, 501, 603, 604, 612, 638, 663, 722, 749, 751, 752, 753, 754, 756, 761, 867, 987, 1036, 1037, 1095, 1124, 1127, 1233, 1234, 1326, 1353, 1355, 1356, 1357, 1358, 1360, 1366, 1369, 1377, 1378, 1379, 1380, 1381, 1383, 1400, 1423, 1425, 1426, 1428], "convert_time_zon": [495, 1121], "coo": [284, 355, 933, 987], "coord": 764, "coordin": [41, 355, 1174, 1400], "copi": [37, 131, 132, 136, 149, 207, 209, 215, 216, 256, 307, 313, 314, 329, 355, 524, 867, 887, 888, 956, 987, 995, 1071, 1073, 1153, 1374, 1379, 1380, 1381, 1400, 1428], "corasick": [713, 723, 725, 737, 1317, 1327, 1329, 1341], "core": [1, 259, 355, 914, 987, 1428, 1431], "cores_right": [259, 355, 914, 987], "corner": [21, 41, 138, 355], "corr": [355, 1421], "corrcoef": [219, 355], "correct": [96, 147, 155, 161, 519, 520, 561, 675, 687, 705, 867, 918, 987, 1148, 1149, 1191, 1276, 1288, 1310, 1400], "correctli": [41, 355, 800, 814, 840], "correl": [219, 355, 796, 842, 1417], "correlationmethod": 796, "correspond": [243, 258, 287, 313, 325, 355, 441, 482, 491, 496, 509, 664, 674, 678, 680, 682, 684, 686, 689, 691, 693, 772, 805, 806, 808, 809, 854, 855, 867, 889, 908, 913, 935, 987, 1104, 1117, 1122, 1135, 1265, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1417], "cosd": 1421, "cosh": [867, 1400], "cosin": [386, 387, 451, 452, 612, 867, 1004, 1005, 1074, 1075, 1400, 1425], "cost": [259, 290, 355, 735, 914, 987, 1340], "cost_usd": [735, 1340], "cot": [867, 1400, 1421], "cotang": [453, 867, 1076, 1400, 1425], "cotd": 1421, "could": [40, 94, 103, 355, 702, 800, 810, 814, 857, 867, 886, 894, 987, 1307, 1400], "count": [41, 171, 212, 221, 243, 275, 276, 287, 319, 325, 331, 346, 355, 385, 402, 413, 455, 468, 480, 518, 542, 564, 572, 585, 590, 613, 636, 652, 660, 664, 674, 678, 680, 682, 684, 686, 689, 691, 693, 714, 766, 775, 777, 785, 791, 799, 823, 836, 850, 867, 883, 894, 908, 926, 935, 959, 975, 987, 993, 1003, 1020, 1030, 1078, 1085, 1090, 1102, 1147, 1170, 1194, 1202, 1215, 1220, 1249, 1257, 1262, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1318, 1370, 1387, 1389, 1400, 1405, 1409, 1421], "count_digit": 714, "count_num": [41, 355], "counterpart": 146, "countri": [258, 355, 469, 913, 987, 1091], "country_holidai": [468, 480, 791, 1090, 1102], "covar": 1417, "covar_samp": 1417, "covari": [147, 798, 843, 867, 1417], "cover": 11, "cow": [733, 734, 1337, 1338], "cpu": [150, 151, 173, 312, 355, 962, 1378, 1400], "crab": [712, 724, 1316, 1328], "crate": [38, 48, 101, 355, 712, 714, 720, 721, 722, 724, 735, 736, 749, 751, 752, 756, 987, 993, 1316, 1318, 1324, 1325, 1326, 1328, 1339, 1340, 1353, 1355, 1356, 1360], "creat": [39, 41, 47, 48, 49, 50, 51, 52, 54, 56, 98, 131, 135, 137, 150, 151, 152, 153, 156, 158, 162, 166, 167, 179, 180, 181, 182, 183, 184, 185, 186, 205, 215, 216, 243, 276, 279, 287, 312, 313, 325, 329, 332, 355, 358, 359, 472, 496, 509, 518, 542, 604, 612, 665, 674, 678, 680, 682, 684, 686, 689, 691, 693, 794, 804, 805, 806, 807, 808, 809, 810, 824, 853, 854, 855, 857, 863, 867, 887, 888, 894, 900, 908, 935, 956, 960, 987, 991, 992, 1071, 1073, 1084, 1094, 1122, 1135, 1147, 1170, 1255, 1263, 1266, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1378, 1380, 1400, 1405, 1427, 1428, 1431], "create_async_engin": 152, "create_engin": [39, 355], "created_at": [196, 199, 200], "created_bi": [196, 199, 200], "creation": [142, 144, 151], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 355, 879, 987], "credential_provid": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 355, 987], "credentialproviderfunct": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 355, 987], "cross": [257, 355, 912, 987, 1416], "crustacean": [724, 1328], "cst": [496, 509, 1122, 1135], "csv": [37, 38, 48, 49, 50, 51, 52, 53, 54, 149, 150, 151, 155, 156, 165, 198, 355, 879, 987], "csvencod": [150, 151, 165], "csvquotestyl": [38, 48, 355, 987], "ctx": [52, 53, 54, 1409, 1411, 1412, 1413, 1414, 1415, 1428], "cube": [1, 61, 448, 659, 867, 1068, 1400, 1422], "cuda": 962, "cum_count": [867, 1400], "cum_count_revers": [455, 867], "cum_max": [867, 1400], "cum_max_all_fil": [456, 867], "cum_max_revers": [456, 867], "cum_min": [867, 1400], "cum_min_revers": [457, 867], "cum_prod": [378, 867, 1400], "cum_prod_revers": [458, 867], "cum_reduc": 800, "cum_sum": [545, 654, 765, 803, 867, 910, 987, 1190, 1400], "cum_sum_revers": [459, 867], "cumsum_horizont": 802, "cumul": [455, 456, 457, 458, 459, 799, 800, 801, 802, 803, 867, 1078, 1079, 1080, 1081, 1082, 1400], "cumulative_ev": [867, 1400], "cumulative_sal": [654, 867], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 138, 142, 143, 144, 152, 153, 160, 162, 165, 168, 169, 170, 178, 179, 181, 182, 183, 184, 185, 186, 195, 215, 216, 223, 257, 258, 284, 302, 312, 317, 355, 358, 359, 477, 577, 655, 867, 882, 887, 888, 896, 912, 913, 933, 942, 945, 962, 987, 993, 1071, 1073, 1091, 1099, 1207, 1258, 1378, 1383, 1400, 1405, 1412, 1428], "cursor": [39, 152, 355], "custom": [1, 28, 40, 41, 58, 59, 60, 61, 104, 146, 163, 184, 186, 221, 263, 279, 341, 355, 420, 468, 480, 498, 501, 604, 612, 613, 676, 777, 791, 827, 828, 844, 867, 894, 918, 970, 987, 1037, 1090, 1102, 1124, 1127, 1234, 1242, 1277, 1389, 1400, 1431], "cut": [661, 867, 1263, 1400], "cxx": 1423, "cypher": 152, "d": [29, 36, 38, 40, 41, 43, 44, 47, 134, 171, 210, 234, 241, 243, 244, 245, 257, 261, 283, 306, 307, 317, 323, 327, 337, 339, 342, 343, 344, 345, 346, 347, 348, 355, 378, 380, 455, 478, 498, 501, 548, 619, 658, 694, 700, 714, 721, 735, 736, 741, 749, 751, 752, 792, 793, 810, 816, 846, 867, 904, 908, 912, 932, 945, 966, 968, 971, 972, 973, 974, 975, 976, 977, 987, 993, 1078, 1100, 1124, 1127, 1175, 1200, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1318, 1325, 1339, 1340, 1345, 1353, 1355, 1356, 1367, 1400, 1416, 1418, 1420, 1423, 1424], "d1": [41, 355, 472], "d2": 472, "d3": 472, "d789": [41, 355], "d_4": [741, 1345], "d_awai": [694, 867], "d_to_even": [694, 867], "dai": [71, 72, 89, 243, 256, 258, 287, 325, 355, 358, 468, 480, 488, 489, 491, 492, 494, 496, 498, 501, 502, 509, 511, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 791, 804, 805, 806, 807, 808, 809, 810, 854, 855, 867, 908, 913, 935, 987, 993, 1090, 1102, 1114, 1115, 1117, 1118, 1120, 1122, 1124, 1127, 1128, 1135, 1137, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "dark": 1409, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 65, 70, 71, 72, 74, 85, 86, 88, 89, 98, 101, 105, 107, 110, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 203, 207, 209, 216, 217, 227, 229, 230, 231, 241, 242, 243, 255, 256, 257, 260, 262, 263, 277, 278, 279, 282, 288, 289, 290, 292, 296, 299, 307, 312, 313, 314, 317, 319, 329, 333, 353, 355, 359, 373, 381, 382, 383, 386, 387, 388, 389, 390, 391, 394, 397, 398, 399, 400, 401, 403, 406, 408, 409, 410, 411, 412, 417, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 442, 444, 445, 446, 450, 451, 452, 453, 454, 461, 462, 463, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 523, 534, 536, 537, 538, 542, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 563, 564, 568, 569, 571, 576, 583, 585, 592, 603, 605, 611, 612, 613, 648, 649, 653, 654, 661, 663, 664, 667, 668, 669, 670, 672, 673, 678, 680, 682, 684, 686, 689, 691, 693, 694, 696, 698, 700, 703, 704, 705, 711, 714, 715, 716, 719, 720, 721, 722, 726, 727, 729, 730, 731, 739, 740, 741, 742, 749, 750, 751, 752, 754, 756, 759, 768, 769, 770, 773, 774, 780, 786, 794, 797, 804, 805, 806, 807, 808, 809, 810, 820, 821, 823, 824, 825, 826, 827, 828, 838, 841, 853, 854, 855, 858, 863, 867, 879, 887, 888, 895, 899, 901, 907, 908, 936, 940, 956, 987, 992, 993, 995, 1000, 1001, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1026, 1036, 1038, 1041, 1042, 1043, 1045, 1046, 1059, 1061, 1063, 1064, 1071, 1072, 1073, 1084, 1085, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1151, 1152, 1170, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1196, 1197, 1198, 1199, 1201, 1206, 1213, 1215, 1222, 1233, 1235, 1242, 1256, 1263, 1265, 1269, 1270, 1271, 1272, 1274, 1275, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1295, 1297, 1305, 1310, 1315, 1316, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1330, 1331, 1332, 1333, 1334, 1335, 1343, 1344, 1345, 1346, 1353, 1354, 1355, 1356, 1358, 1360, 1363, 1374, 1379, 1380, 1381, 1382, 1386, 1399, 1400, 1409, 1416, 1423, 1428, 1430], "data_bar": [41, 355], "data_bar_2010": [41, 355], "data_label": [41, 355], "data_page_s": [47, 51, 355, 987], "data_source_format": 200, "databas": [39, 129, 152, 153, 355, 879], "databrick": 190, "databricks_format": 198, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 84, 96, 102, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 174, 175, 178, 179, 205, 353, 354, 358, 359, 367, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 863, 867, 879, 882, 889, 890, 892, 894, 896, 899, 901, 905, 908, 912, 913, 914, 915, 916, 918, 923, 924, 929, 934, 936, 943, 945, 950, 951, 952, 953, 955, 958, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 987, 992, 993, 1084, 1085, 1121, 1147, 1170, 1242, 1263, 1329, 1333, 1345, 1346, 1369, 1375, 1376, 1389, 1400, 1409, 1410, 1411, 1412, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1431], "dataframeplot": [355, 358], "dataload": [317, 355], "datapoint": [243, 355, 908, 987], "dataset": [15, 47, 75, 150, 151, 154, 155, 161, 165, 166, 170, 171, 257, 317, 355, 561, 867, 879, 912, 918, 987, 1191, 1400, 1429], "datasourceformat": [200, 203], "datat": [41, 355], "datatyp": [0, 38, 48, 131, 133, 134, 135, 137, 157, 159, 160, 162, 164, 169, 170, 182, 183, 185, 227, 236, 262, 355, 361, 364, 365, 367, 442, 521, 604, 612, 613, 700, 728, 770, 793, 800, 801, 812, 814, 826, 827, 828, 840, 844, 863, 867, 879, 899, 987, 992, 993, 1059, 1085, 1140, 1242, 1304, 1382, 1400, 1426], "datatypeexpr": [360, 367, 368, 369, 370, 371, 372, 373, 428, 442, 612, 613, 669, 728, 786, 800, 801, 814, 820, 821, 827, 828, 840, 867, 886, 987], "date": [17, 41, 57, 72, 150, 151, 153, 155, 161, 162, 165, 168, 170, 171, 214, 221, 241, 243, 256, 258, 287, 302, 355, 358, 468, 470, 471, 472, 473, 476, 478, 480, 481, 482, 484, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 654, 674, 678, 680, 682, 684, 686, 689, 691, 693, 749, 751, 770, 791, 805, 806, 808, 809, 816, 824, 826, 853, 867, 886, 894, 908, 913, 935, 987, 993, 1090, 1092, 1093, 1094, 1095, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1147, 1251, 1252, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1355, 1382, 1400, 1421, 1424, 1426], "date32": [256, 355], "date_format": [38, 48, 355, 987], "date_min": 491, "date_minus_1y_2mon": 1117, "date_part": 1421, "date_plus_1i": [491, 1117], "date_rang": [258, 325, 355, 476, 478, 492, 500, 511, 808, 809, 913, 987, 1098, 1113, 1118, 1119, 1136, 1137], "date_right": [258, 355, 913, 987], "datetim": [17, 38, 41, 48, 55, 57, 101, 138, 154, 162, 166, 168, 170, 181, 182, 183, 185, 195, 196, 199, 200, 214, 221, 241, 243, 256, 258, 287, 302, 325, 355, 358, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 621, 654, 674, 678, 680, 682, 684, 686, 689, 691, 693, 749, 752, 770, 791, 804, 805, 806, 808, 809, 810, 816, 824, 826, 854, 855, 867, 886, 894, 908, 913, 935, 987, 992, 993, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1147, 1251, 1252, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1356, 1380, 1382, 1400, 1423, 1424], "datetime_cast": 55, "datetime_format": [38, 48, 355, 987], "datetime_rang": [243, 355, 470, 473, 488, 489, 491, 495, 496, 502, 503, 504, 505, 506, 507, 508, 509, 512, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 867, 908, 987, 1091, 1092, 1095, 1099, 1100, 1101, 1107, 1108, 1110, 1112, 1114, 1115, 1116, 1117, 1121, 1122, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "datetime_str": 498, "datetimecastopt": 55, "datetimeindex": 136, "david": 1429, "day_nam": [498, 501], "day_of_month": [476, 492, 511], "day_of_year": [476, 492, 511], "daylight": [243, 258, 287, 325, 355, 469, 477, 491, 496, 509, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 810, 854, 855, 867, 908, 913, 935, 987, 1099, 1117, 1122, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "dayofweek": 1424, "dayofyear": 1424, "days_diff": 502, "db": [39, 152, 153, 355], "dbapi2": 152, "dbc": [714, 1318], "dbreadengin": 153, "dbwriteengin": [39, 355], "dbwritemod": [39, 355], "dd": [41, 355, 1423], "ddd": [1, 41, 355, 760, 762, 763], "dddd": 1423, "ddof": [303, 326, 355, 417, 422, 600, 606, 688, 689, 692, 693, 710, 778, 796, 798, 842, 843, 848, 856, 867, 946, 954, 987, 1034, 1039, 1230, 1236, 1289, 1290, 1293, 1294, 1314, 1390, 1400], "ddww": 1423, "de": 1423, "deal": [47, 51, 255, 355, 381, 383, 494, 495, 664, 749, 752, 781, 782, 783, 784, 807, 867, 987, 1000, 1001, 1120, 1121, 1265, 1353, 1356, 1400], "debug": [30, 373, 918, 987, 1431], "decad": [1409, 1424], "decai": [517, 518, 519, 520, 867, 1146, 1147, 1148, 1149, 1400], "decemb": [501, 1127], "decim": [9, 11, 12, 28, 29, 38, 41, 48, 150, 151, 165, 355, 359, 373, 694, 753, 867, 987, 993, 1295, 1357, 1400, 1422], "decimal_comma": [38, 48, 150, 151, 165, 355, 987], "decimal_separ": [9, 28], "declar": [131, 133, 134, 135, 137, 152, 159, 160, 169, 312, 317, 355, 857, 987, 993, 1409], "decod": [150, 151, 728], "decompos": [321, 355, 951, 987], "decompress": [47, 49, 51, 355, 987], "decor": [56, 58, 59, 60, 61, 181, 185, 263, 355, 613, 867, 878, 879, 1242, 1400], "dedic": [1, 132, 255, 289, 355, 993, 1428], "deem": [221, 355, 894, 987], "deepcopi": [215, 355, 887, 987, 1071, 1400], "def": [1, 56, 58, 59, 60, 61, 152, 179, 181, 185, 205, 278, 319, 355, 367, 378, 658, 718, 721, 746, 780, 827, 867, 890, 927, 928, 987, 993, 1322, 1325, 1431], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 63, 64, 65, 69, 72, 73, 74, 131, 132, 133, 134, 135, 136, 137, 138, 147, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 165, 167, 168, 169, 170, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 205, 221, 222, 225, 226, 229, 238, 242, 243, 244, 255, 257, 258, 264, 268, 270, 277, 279, 287, 288, 289, 290, 291, 295, 298, 302, 303, 305, 310, 312, 313, 317, 320, 322, 323, 324, 326, 331, 340, 355, 373, 380, 381, 383, 401, 406, 415, 420, 428, 461, 463, 468, 480, 494, 495, 501, 514, 516, 517, 519, 520, 540, 553, 571, 579, 583, 592, 597, 598, 600, 604, 606, 607, 612, 620, 621, 624, 627, 646, 647, 649, 654, 655, 661, 664, 668, 669, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 699, 701, 710, 711, 720, 727, 739, 744, 745, 746, 749, 751, 752, 754, 756, 777, 778, 781, 783, 786, 790, 791, 792, 795, 796, 798, 805, 806, 807, 808, 809, 810, 813, 816, 820, 821, 822, 824, 825, 826, 827, 832, 838, 841, 845, 848, 849, 851, 854, 855, 856, 857, 858, 867, 889, 890, 894, 895, 897, 898, 900, 907, 908, 912, 913, 919, 923, 929, 931, 935, 939, 941, 942, 945, 946, 950, 952, 953, 954, 959, 962, 969, 987, 991, 993, 1000, 1001, 1019, 1024, 1032, 1037, 1045, 1072, 1084, 1085, 1090, 1102, 1120, 1121, 1127, 1141, 1145, 1146, 1148, 1149, 1168, 1181, 1201, 1209, 1213, 1222, 1227, 1228, 1234, 1251, 1252, 1258, 1263, 1265, 1270, 1271, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1303, 1306, 1314, 1315, 1316, 1324, 1328, 1331, 1343, 1348, 1349, 1350, 1353, 1355, 1356, 1358, 1360, 1378, 1380, 1389, 1390, 1400, 1422, 1423, 1431], "default_match": [712, 724], "default_scop": 35, "default_valu": 373, "defaultazurecredenti": 34, "defaultdict": [290, 355], "defaultfieldvalu": 170, "defer": [205, 355, 358, 359, 1400, 1405], "defin": [38, 41, 48, 55, 72, 75, 152, 159, 162, 170, 178, 179, 181, 214, 225, 226, 230, 243, 263, 275, 278, 287, 324, 341, 355, 446, 548, 579, 613, 658, 661, 673, 674, 678, 680, 682, 684, 686, 689, 691, 693, 726, 731, 739, 750, 757, 805, 806, 808, 809, 824, 825, 828, 849, 854, 855, 867, 886, 897, 898, 901, 908, 927, 935, 953, 970, 987, 991, 992, 993, 1064, 1175, 1209, 1242, 1263, 1275, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1330, 1335, 1343, 1354, 1361, 1400], "definit": [41, 76, 355, 561, 675, 867, 992, 993, 1191, 1276, 1400], "deflat": [36, 355], "deg": 1425, "degre": [303, 326, 355, 600, 606, 663, 688, 689, 692, 693, 710, 778, 788, 798, 842, 843, 848, 856, 867, 946, 954, 987, 1289, 1290, 1293, 1294, 1314, 1390, 1400, 1421], "delai": 96, "delet": [75, 1416, 1427], "deletionfil": 170, "delimit": [46, 48, 160, 169, 279, 310, 355, 711, 727, 987, 1315, 1331, 1375, 1400, 1423], "delta": [40, 154, 166, 198, 303, 326, 355, 600, 606, 688, 689, 692, 693, 710, 778, 798, 842, 843, 848, 856, 867, 879, 946, 954, 987, 1289, 1290, 1293, 1294, 1314, 1390, 1400], "delta_merge_opt": [40, 355], "delta_table_opt": [154, 166, 195], "delta_table_vers": 195, "delta_write_opt": [40, 355], "deltalak": [40, 154, 166, 173, 195, 355], "deltashar": 198, "deltat": [40, 154, 166, 355], "demo": [41, 355], "demonstr": [150, 531, 867, 993], "dens": [21, 241, 355, 664, 867, 1265, 1400], "densiti": [1400, 1405], "depend": [47, 52, 56, 62, 98, 152, 155, 161, 173, 210, 211, 355, 399, 400, 568, 569, 612, 613, 624, 661, 664, 810, 813, 816, 822, 827, 828, 867, 918, 987, 997, 1017, 1018, 1198, 1199, 1242, 1263, 1265, 1400, 1431], "deploi": [181, 185], "deprec": [8, 40, 63, 66, 69, 150, 151, 162, 170, 178, 179, 180, 181, 185, 188, 212, 270, 313, 331, 336, 355, 475, 512, 533, 604, 612, 613, 631, 668, 700, 711, 719, 728, 779, 788, 796, 797, 867, 883, 889, 900, 923, 929, 939, 942, 952, 958, 959, 965, 987, 1066, 1097, 1106, 1107, 1138, 1167, 1270, 1315, 1323, 1380, 1400], "depth": 146, "desc": [993, 1409, 1412, 1416, 1418], "descend": [57, 213, 296, 301, 318, 355, 394, 416, 441, 599, 654, 664, 697, 698, 707, 708, 772, 777, 789, 867, 884, 940, 944, 949, 987, 1012, 1033, 1188, 1229, 1265, 1299, 1301, 1312, 1389, 1400], "describ": [181, 241, 355, 732, 987, 1336, 1400], "descript": [243, 355, 908, 987, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1426, 1429, 1430], "deseri": [146, 295, 355, 533, 627, 867, 939, 987], "deserializ": [222, 295, 355, 463, 627, 867, 895, 939, 987], "design": [312, 317, 355, 882], "desir": [181, 257, 355, 420, 512, 604, 912, 987, 1037, 1138, 1234], "destin": 153, "detail": [62, 132, 152, 153, 174, 176, 209, 243, 324, 355, 501, 770, 867, 908, 953, 962, 987, 1127, 1382, 1400, 1431], "determin": [15, 38, 41, 48, 57, 65, 94, 146, 150, 151, 152, 155, 161, 162, 165, 170, 172, 213, 217, 236, 243, 255, 256, 263, 287, 318, 319, 325, 355, 373, 441, 480, 481, 494, 495, 542, 624, 661, 667, 669, 705, 713, 726, 728, 749, 750, 752, 772, 807, 825, 838, 841, 858, 867, 884, 891, 892, 899, 908, 935, 949, 955, 987, 1058, 1102, 1103, 1120, 1121, 1170, 1234, 1263, 1269, 1270, 1271, 1310, 1317, 1353, 1356, 1357, 1385, 1400], "determinist": [777, 867, 1389, 1400], "dev": [208, 996, 1289, 1400], "develop": [153, 181, 185], "deviat": [303, 355, 519, 688, 689, 710, 848, 867, 946, 987, 1148, 1290, 1314, 1400, 1417], "devic": [312, 355, 889, 900, 929, 942, 962, 987, 1378, 1400], "devicememoryresourc": 962, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 58, 59, 84, 102, 106, 132, 133, 134, 135, 136, 137, 138, 151, 152, 153, 165, 178, 179, 181, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 367, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 428, 429, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 863, 867, 908, 935, 951, 953, 967, 970, 978, 987, 993, 1121, 1147, 1329, 1333, 1345, 1346, 1376, 1400, 1405, 1409, 1410, 1411, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1431], "df0": [271, 355, 924, 987, 1415], "df1": [57, 65, 174, 175, 228, 231, 271, 302, 327, 355, 924, 987, 1412, 1414, 1415, 1416, 1428], "df2": [57, 65, 174, 175, 228, 231, 327, 355, 1412, 1414, 1415, 1416, 1428], "df3": [57, 355], "df4": 355, "df5": 355, "df6": 355, "df_a": 1428, "df_a1": 65, "df_a2": 65, "df_a3": 65, "df_agg_nuniqu": [275, 355], "df_b": 1428, "df_count": [777, 867], "df_current_batch": 151, "df_d1": 65, "df_d2": 65, "df_from_str_repr": [311, 355], "df_h1": 65, "df_h2": 65, "df_new_grid": [546, 867], "df_nuniqu": [275, 355], "df_original_grid": [546, 867], "df_panda": 1410, "df_pd": 132, "df_tempor": [678, 680, 682, 684, 686, 689, 691, 693, 867], "dfi": 209, "diagon": [65, 319, 355], "diagonal_relax": 65, "diagram": [931, 987], "diana": 367, "dict": [31, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 58, 60, 62, 131, 133, 134, 135, 136, 137, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 181, 195, 196, 199, 200, 235, 255, 277, 288, 289, 290, 308, 309, 312, 317, 319, 355, 867, 987, 992, 993, 1158, 1400, 1413], "dictat": [147, 491, 867, 1117], "dictionari": [31, 38, 40, 41, 43, 47, 48, 49, 50, 51, 62, 88, 131, 133, 134, 135, 137, 146, 150, 151, 152, 153, 154, 157, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 195, 255, 277, 288, 289, 290, 308, 309, 312, 317, 355, 987, 992], "did": [469, 1091], "diff": [502, 503, 504, 505, 506, 507, 508, 593, 867, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1223, 1400], "differ": [41, 47, 55, 101, 104, 125, 150, 155, 170, 171, 174, 176, 205, 225, 231, 243, 244, 255, 257, 279, 287, 289, 290, 309, 312, 313, 319, 355, 464, 476, 491, 492, 495, 501, 510, 516, 531, 540, 549, 573, 593, 595, 646, 647, 649, 654, 668, 669, 749, 775, 813, 816, 822, 867, 880, 897, 898, 900, 908, 912, 935, 987, 991, 993, 1086, 1098, 1117, 1118, 1121, 1127, 1136, 1143, 1152, 1168, 1176, 1203, 1223, 1225, 1242, 1251, 1252, 1254, 1270, 1271, 1353, 1400, 1424, 1426, 1428], "digit": [73, 658, 694, 695, 721, 753, 867, 993, 1295, 1296, 1318, 1325, 1357, 1400, 1431], "dimens": [131, 133, 135, 137, 159, 160, 169, 355, 670, 867, 987, 1272, 1380, 1400], "dimension": [133, 135, 137, 313, 355, 987, 1400], "direct": [41, 153, 162, 167, 170, 298, 312, 323, 355, 415, 597, 699, 867, 941, 987, 1032, 1227, 1303, 1400], "directli": [6, 31, 41, 64, 65, 131, 152, 181, 185, 205, 211, 290, 312, 355, 517, 519, 520, 669, 841, 867, 890, 987, 1146, 1148, 1149, 1271, 1378, 1400, 1412, 1428, 1431], "directori": [41, 47, 48, 49, 50, 51, 52, 54, 147, 162, 165, 168, 170, 355, 987], "dirpath": [36, 38, 43, 44, 47, 165, 355], "disabl": [47, 51, 56, 97, 98, 162, 168, 182, 255, 355, 889, 987], "disable_string_cach": 98, "disallow": 181, "discard": [234, 283, 355, 527, 867, 904, 932, 987, 1156, 1400], "disco": [723, 725, 1327, 1329], "discont": [723, 725, 1327, 1329], "discourag": [613, 867], "discoveri": [279, 355], "discret": [461, 464, 514, 573, 593, 661, 867, 1084, 1086, 1141, 1203, 1223, 1263, 1400], "disk": [47, 48, 49, 50, 51, 156, 355, 628, 880, 942, 987], "dispatch": 993, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 221, 241, 355, 373, 894, 900, 942, 987], "distanc": [258, 355, 913, 987], "distinct": [41, 185, 277, 279, 333, 355, 401, 421, 552, 553, 555, 571, 605, 664, 673, 810, 867, 1019, 1038, 1180, 1181, 1183, 1201, 1235, 1265, 1275, 1400, 1417, 1427, 1429, 1431], "distinct_count": [47, 51, 355, 987], "distinguish": [501, 1127], "distribut": [561, 705, 867, 931, 987, 1191, 1310, 1400], "div": 1421, "diverg": [63, 130], "divid": [21, 461, 496, 509, 517, 519, 520, 531, 561, 661, 664, 867, 1084, 1122, 1135, 1146, 1148, 1149, 1191, 1263, 1400, 1417, 1422], "divis": [531, 773, 867, 1422], "divisor": [303, 326, 355, 600, 606, 688, 689, 692, 693, 710, 778, 798, 842, 843, 848, 856, 867, 946, 954, 987, 1289, 1290, 1293, 1294, 1314, 1390, 1400], "dl": [317, 355], "do": [1, 41, 55, 57, 63, 133, 134, 137, 150, 162, 165, 170, 174, 175, 176, 177, 210, 221, 223, 231, 254, 257, 258, 279, 284, 307, 319, 323, 355, 358, 468, 575, 735, 736, 744, 745, 746, 796, 838, 841, 858, 885, 889, 894, 896, 900, 912, 913, 918, 929, 931, 933, 942, 962, 987, 993, 1083, 1090, 1152, 1205, 1339, 1340, 1348, 1349, 1350, 1383, 1400, 1405], "do_polars_oper": 30, "do_someth": 152, "do_various_th": 205, "doc": [40, 43, 44, 132, 153, 156, 158, 174, 176, 207, 208, 219, 355, 995, 996], "document": [33, 101, 150, 152, 153, 207, 355, 359, 498, 501, 729, 749, 751, 752, 756, 863, 962, 995, 1124, 1127, 1333, 1353, 1355, 1356, 1360], "doe": [11, 38, 40, 48, 49, 50, 51, 57, 63, 64, 119, 131, 133, 134, 135, 137, 138, 150, 151, 152, 153, 154, 155, 159, 160, 165, 166, 169, 171, 211, 216, 231, 238, 243, 244, 256, 257, 264, 283, 288, 289, 290, 320, 329, 332, 355, 358, 359, 428, 512, 527, 531, 540, 700, 713, 723, 725, 737, 745, 746, 775, 863, 867, 882, 888, 889, 890, 894, 900, 904, 908, 912, 918, 919, 928, 929, 932, 942, 950, 956, 960, 987, 1045, 1073, 1138, 1152, 1156, 1168, 1305, 1317, 1327, 1329, 1341, 1400, 1405, 1423], "doesn": [40, 150, 165, 243, 258, 355, 514, 867, 908, 913, 987, 1141, 1400], "dog": [712, 755, 758, 795, 1316, 1359, 1362], "doi": 1424, "dollar": [735, 736, 1339, 1340], "domain": [1, 721, 1325], "don": [65, 136, 171, 243, 258, 263, 320, 323, 355, 460, 575, 613, 654, 867, 908, 913, 950, 987, 993, 1083, 1205, 1242, 1400], "done": [48, 49, 50, 51, 63, 64, 130, 151, 171, 205, 212, 258, 355, 384, 385, 654, 867, 883, 886, 889, 890, 900, 913, 929, 987, 1003, 1400], "dot": [57, 628, 863, 867, 931, 942, 987, 1400], "doubl": [314, 355, 735, 736, 1339, 1340], "dow": 1424, "down": [165, 168, 169, 170, 171, 214, 355, 442, 530, 867, 1159, 1400], "downcast": 55, "download": [160, 165, 168, 169, 628, 942, 987], "downstream": [313, 355, 698, 867, 1301, 1400], "dr": 167, "drago": [726, 1330], "dragon": 726, "dragonfr": 1330, "dragonfruit": [726, 739, 750, 1330, 1343, 1354], "dramat": 155, "draw": [21, 26, 181, 185, 1431], "drawback": 863, "drawfn": 1431, "drawing_charact": 21, "dremio": 152, "driver": [39, 152, 153, 355], "drop": [1, 134, 224, 225, 226, 263, 283, 320, 355, 464, 466, 467, 573, 574, 661, 867, 897, 898, 932, 950, 987, 1086, 1088, 1089, 1203, 1204, 1263, 1400, 1427], "drop_dupl": [320, 355, 950, 987], "drop_empty_col": [155, 161], "drop_empty_row": [155, 161], "drop_first": [310, 355, 1375, 1400], "drop_in_plac": 355, "drop_nan": [226, 355, 467, 867, 898, 987, 1089, 1400], "drop_nul": [225, 310, 355, 466, 867, 897, 987, 1088, 1375, 1400], "dset": 171, "dst": [496, 509, 1122, 1135], "dst_offset": [469, 1091], "dt": [1, 41, 57, 155, 161, 287, 355, 674, 810, 867, 876, 935, 987, 993, 1408, 1423, 1424], "dt1": 1423, "dt2": 1423, "dtm": [41, 355, 472, 501, 993, 1094, 1127, 1423], "dtm_iso": 501, "dtm_iso_strict": 501, "dtype": [11, 41, 55, 56, 60, 66, 72, 76, 88, 97, 98, 108, 131, 133, 135, 137, 138, 150, 151, 152, 153, 155, 159, 160, 161, 165, 169, 178, 179, 180, 181, 185, 207, 209, 214, 217, 229, 243, 258, 287, 311, 312, 313, 314, 317, 323, 332, 355, 368, 373, 428, 442, 443, 444, 445, 446, 447, 458, 459, 501, 512, 521, 534, 570, 579, 610, 620, 659, 666, 667, 674, 700, 702, 728, 749, 754, 766, 770, 776, 786, 793, 800, 801, 812, 814, 816, 820, 821, 823, 824, 825, 826, 838, 840, 841, 849, 858, 867, 886, 891, 908, 913, 928, 935, 960, 987, 992, 993, 995, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045, 1059, 1060, 1061, 1063, 1064, 1065, 1071, 1081, 1082, 1085, 1086, 1127, 1138, 1145, 1178, 1196, 1197, 1200, 1209, 1233, 1240, 1242, 1261, 1269, 1273, 1304, 1307, 1332, 1353, 1358, 1370, 1377, 1378, 1380, 1381, 1382, 1383, 1388, 1400, 1428, 1431], "dtype_format": [41, 355], "dtype_of": 373, "dtypekind": 209, "dtypelik": [207, 995], "dtypeoper": [1, 60], "dubiou": 101, "duckdb": 138, "due": [243, 258, 287, 290, 325, 355, 380, 477, 491, 496, 509, 637, 674, 678, 680, 682, 684, 686, 689, 691, 693, 791, 805, 806, 808, 809, 854, 855, 867, 886, 908, 913, 935, 987, 1099, 1117, 1122, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "dummi": [310, 355, 612, 613, 827, 828, 867, 1375, 1400], "dump": 146, "duplic": [57, 106, 250, 257, 258, 259, 320, 324, 355, 380, 550, 637, 661, 857, 867, 912, 913, 914, 950, 953, 987, 1177, 1263, 1400, 1429], "duplicateerror": [661, 867, 1263, 1400], "dur": [259, 355, 914, 987], "durat": [205, 258, 325, 355, 469, 477, 501, 502, 503, 504, 505, 506, 507, 508, 512, 518, 770, 805, 806, 808, 809, 854, 855, 867, 913, 987, 992, 993, 1091, 1099, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1138, 1147, 1380, 1382, 1400], "dure": [48, 49, 50, 51, 56, 63, 64, 105, 130, 150, 151, 165, 170, 205, 231, 355, 700, 867, 880, 889, 890, 900, 928, 929, 961, 987, 1152, 1400], "dutch": [468, 480, 791, 1090, 1102], "dynam": [147, 243, 355, 420, 604, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 867, 908, 928, 987, 991, 1037, 1234, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "dynamicgroupbi": [243, 355], "e": [11, 34, 36, 38, 40, 43, 44, 47, 48, 146, 150, 156, 158, 162, 164, 168, 170, 171, 183, 222, 234, 241, 245, 254, 258, 261, 306, 307, 313, 323, 355, 378, 463, 514, 518, 521, 548, 549, 607, 613, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 700, 705, 724, 745, 746, 757, 812, 828, 846, 857, 867, 895, 904, 913, 916, 933, 987, 991, 993, 1141, 1147, 1175, 1310, 1328, 1361, 1400, 1418, 1423, 1431], "e101": [41, 355], "e_filt": [624, 626], "e_sum_ov": [624, 626], "e_sum_slic": [624, 626], "each": [38, 41, 48, 52, 53, 54, 57, 66, 73, 84, 151, 152, 155, 160, 169, 174, 175, 176, 177, 179, 218, 220, 227, 234, 241, 242, 243, 256, 258, 263, 277, 279, 283, 287, 289, 291, 312, 317, 321, 324, 325, 333, 334, 336, 338, 340, 341, 349, 355, 394, 408, 441, 445, 446, 461, 480, 496, 509, 527, 552, 555, 577, 582, 585, 592, 602, 609, 613, 661, 664, 672, 673, 681, 685, 696, 701, 708, 721, 725, 726, 730, 731, 739, 741, 742, 750, 757, 772, 786, 789, 795, 820, 821, 825, 849, 857, 867, 889, 892, 893, 899, 904, 908, 913, 929, 932, 935, 951, 953, 963, 965, 967, 969, 970, 978, 987, 1012, 1026, 1063, 1064, 1070, 1084, 1102, 1122, 1135, 1180, 1183, 1207, 1212, 1215, 1222, 1232, 1263, 1265, 1274, 1275, 1297, 1306, 1325, 1329, 1330, 1334, 1335, 1343, 1345, 1346, 1354, 1361, 1369, 1400, 1417, 1423, 1428, 1429, 1431], "eager": [96, 243, 258, 262, 279, 323, 355, 470, 473, 476, 478, 488, 489, 491, 492, 495, 496, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 678, 680, 682, 684, 686, 689, 691, 693, 786, 790, 792, 796, 798, 805, 806, 808, 809, 816, 820, 821, 824, 825, 838, 841, 845, 846, 849, 854, 855, 858, 866, 867, 908, 913, 918, 987, 992, 1091, 1092, 1095, 1098, 1099, 1100, 1101, 1107, 1108, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1428], "eager_execut": 1428, "eagerli": 1409, "ear": [739, 750, 1343], "earlier": [258, 355, 913, 987], "earliest": [243, 355, 494, 495, 749, 752, 807, 908, 979, 987, 1120, 1121, 1353, 1356], "easi": 205, "easiest": 210, "easili": [57, 293, 317, 329, 334, 355, 849, 863, 937, 956, 963, 987], "east": [75, 170, 259, 355, 914, 987], "ebf1d": [41, 355], "ed": [259, 355, 914, 987], "edg": [542, 867, 1170, 1400], "eee": [1, 41, 355, 993], "ef": 736, "effect": [41, 48, 49, 50, 51, 55, 236, 243, 355, 477, 531, 613, 639, 641, 643, 796, 867, 908, 959, 960, 987, 1091, 1099], "effici": [132, 152, 254, 256, 355, 882], "efgh": 1423, "eg": [18, 26, 27, 41, 65, 153, 205, 312, 355, 749, 752, 773, 867, 993, 1353, 1356], "egnaro": 1423, "either": [63, 64, 88, 147, 181, 253, 257, 258, 259, 277, 287, 288, 312, 313, 355, 518, 612, 659, 661, 674, 697, 749, 781, 789, 793, 849, 867, 889, 890, 912, 913, 914, 916, 935, 987, 991, 993, 1147, 1261, 1263, 1299, 1353, 1400, 1413, 1431], "element": [14, 15, 26, 176, 177, 180, 181, 183, 185, 210, 211, 213, 220, 253, 279, 288, 301, 303, 318, 326, 355, 386, 387, 388, 389, 390, 391, 402, 403, 408, 440, 441, 448, 451, 452, 453, 454, 456, 457, 458, 459, 460, 466, 467, 522, 523, 527, 540, 544, 553, 564, 566, 567, 572, 574, 575, 576, 577, 580, 585, 593, 594, 595, 596, 600, 601, 606, 608, 609, 613, 654, 655, 664, 667, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 697, 702, 703, 704, 708, 709, 710, 741, 742, 768, 769, 771, 772, 778, 789, 798, 824, 842, 843, 848, 856, 867, 884, 893, 944, 946, 949, 954, 987, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1016, 1020, 1021, 1026, 1035, 1057, 1058, 1068, 1071, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1088, 1089, 1150, 1151, 1156, 1157, 1169, 1172, 1181, 1190, 1192, 1194, 1195, 1196, 1197, 1202, 1204, 1205, 1206, 1207, 1210, 1215, 1223, 1224, 1225, 1226, 1231, 1238, 1239, 1242, 1258, 1265, 1269, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1299, 1307, 1308, 1309, 1313, 1314, 1345, 1346, 1357, 1371, 1372, 1373, 1377, 1384, 1385, 1386, 1390, 1400, 1417, 1418], "elementwis": [612, 654, 676, 677, 679, 681, 683, 685, 688, 690, 692, 827, 828, 867, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1400], "elig": [918, 987], "elimin": [63, 130, 561, 867, 1191, 1400], "elis": [271, 355, 924, 987], "ellips": 21, "ellipsi": [241, 355], "elppa": 1423, "els": [151, 1262, 1370, 1400], "email": [721, 1325], "email_part": [721, 1325], "emit": [928, 987], "emphas": [355, 359], "emploi": 993, "employe": 153, "empti": [14, 36, 38, 48, 110, 134, 150, 151, 155, 161, 163, 165, 215, 216, 243, 270, 322, 355, 373, 660, 711, 719, 766, 826, 845, 850, 867, 887, 888, 908, 923, 952, 987, 992, 993, 1071, 1073, 1157, 1178, 1192, 1262, 1315, 1323, 1370, 1400], "en": [21, 41, 355], "enabl": [29, 30, 47, 51, 56, 63, 64, 97, 98, 136, 154, 162, 166, 168, 174, 175, 176, 177, 189, 207, 314, 355, 381, 383, 668, 669, 698, 713, 723, 725, 737, 777, 863, 867, 889, 890, 900, 929, 942, 987, 995, 1000, 1001, 1270, 1271, 1301, 1317, 1327, 1329, 1341, 1381, 1389, 1400], "enable_string_cach": 97, "encapsul": [38, 48, 355, 987], "enclos": [533, 867], "encod": [69, 75, 87, 146, 150, 151, 165, 310, 355, 358, 425, 533, 672, 715, 761, 867, 1042, 1274, 1319, 1375, 1400, 1405], "encompass": [542, 867, 1170, 1400], "encount": [55, 121, 150, 151, 165, 170, 243, 355, 646, 647, 728, 729, 796, 800, 814, 867, 908, 987, 1251, 1252, 1332, 1333, 1400], "end": [38, 41, 48, 150, 151, 165, 243, 249, 279, 355, 424, 427, 430, 443, 447, 469, 496, 521, 546, 547, 598, 712, 717, 721, 726, 733, 739, 743, 744, 745, 748, 786, 791, 804, 805, 806, 807, 808, 809, 812, 820, 821, 824, 825, 854, 855, 857, 863, 867, 908, 911, 929, 987, 993, 1044, 1060, 1065, 1091, 1122, 1173, 1174, 1188, 1228, 1321, 1325, 1330, 1337, 1343, 1347, 1348, 1349, 1354, 1400, 1423], "endian": [428, 1045], "endpoint": [190, 461, 661, 824, 867, 1084, 1263, 1400], "ends_a": 1423, "ends_in_digit": 1423, "ends_with": [424, 430, 447, 712, 743, 993, 1065, 1347, 1421], "ends_with_expr": 427, "ends_with_lit": 427, "engin": [10, 15, 39, 48, 49, 50, 51, 63, 64, 96, 145, 152, 153, 155, 161, 187, 242, 257, 263, 313, 320, 341, 355, 846, 889, 890, 900, 907, 912, 918, 923, 929, 942, 950, 962, 970, 984, 987, 991, 1242, 1380, 1400, 1412, 1428], "engine_opt": [39, 155, 355], "enginetyp": [48, 49, 50, 51, 63, 64, 889, 890, 900, 929, 942, 987], "enough": [575, 705, 867, 1205, 1310, 1400], "ensur": [11, 41, 52, 54, 96, 136, 147, 153, 180, 183, 207, 234, 242, 264, 277, 279, 283, 288, 313, 355, 548, 728, 867, 904, 907, 918, 919, 932, 962, 987, 993, 995, 1380, 1400], "enter": 205, "entir": [41, 152, 155, 161, 355], "entri": [205, 355, 987, 992, 1428], "entropi": [867, 1400], "enum": [373, 993], "enumer": [75, 136, 150, 151, 155, 161, 165, 256, 355], "env": [4, 186], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 48, 49, 50, 51, 63, 64, 147, 160, 162, 165, 168, 169, 170, 184, 187, 190, 195, 312, 355, 889, 890, 900, 929, 942, 987], "eol_char": [150, 151, 165], "eparg": 1423, "epoch": [71, 72, 509, 816, 1135, 1424], "epoch_": [478, 1100], "epoch_n": [478, 1100], "epochtimeunit": [478, 816, 1100], "eq": [234, 283, 355, 516, 527, 867, 904, 932, 987, 1143, 1400], "eq_miss": [867, 1254, 1400], "equal": [56, 98, 150, 151, 165, 174, 175, 176, 177, 243, 258, 259, 271, 301, 355, 461, 509, 515, 516, 536, 549, 563, 612, 649, 661, 667, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 708, 733, 734, 737, 759, 789, 824, 827, 828, 842, 843, 857, 863, 867, 904, 908, 913, 914, 924, 932, 944, 987, 1084, 1122, 1143, 1176, 1234, 1254, 1263, 1269, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1337, 1338, 1341, 1363, 1400, 1417, 1420, 1431], "equiprob": [221, 281, 347, 355, 662, 685, 686, 839, 867, 894, 930, 976, 987, 1085, 1264, 1286, 1287, 1400], "equival": [41, 65, 131, 133, 134, 135, 137, 159, 160, 169, 243, 253, 275, 355, 378, 382, 446, 515, 516, 518, 531, 536, 538, 563, 611, 633, 635, 648, 649, 650, 653, 659, 731, 755, 757, 758, 765, 773, 780, 867, 908, 987, 1064, 1142, 1143, 1147, 1163, 1165, 1190, 1193, 1241, 1253, 1254, 1335, 1359, 1361, 1362, 1400, 1410, 1418, 1430], "err": 722, "error": [15, 40, 55, 64, 65, 96, 116, 120, 122, 133, 134, 137, 145, 150, 151, 155, 162, 165, 170, 258, 264, 279, 288, 313, 355, 380, 405, 406, 425, 468, 579, 581, 583, 637, 669, 712, 715, 720, 722, 724, 728, 729, 749, 751, 752, 756, 867, 886, 890, 913, 919, 962, 970, 987, 1023, 1024, 1042, 1090, 1209, 1211, 1213, 1271, 1316, 1319, 1324, 1326, 1328, 1332, 1333, 1353, 1355, 1356, 1360, 1380, 1400, 1426], "escap": [99, 150, 151, 153, 165, 718, 735, 736, 1322, 1339, 1340], "esp": 15, "especi": [179, 673, 867, 987, 1275, 1400], "espresso": 993, "est": 808, "establish": [152, 205], "estim": [150, 151, 212, 229, 355, 385, 519, 520, 561, 785, 867, 883, 987, 1003, 1145, 1148, 1149, 1191, 1400], "estimated_s": [355, 1400], "etc": [22, 40, 41, 147, 150, 154, 155, 156, 158, 166, 167, 355, 867, 993, 1298, 1300, 1400, 1424], "ethan": 367, "eu": [166, 167], "eur": [241, 355, 1431], "europ": [473, 477, 495, 1095, 1099, 1121], "eval": [171, 311, 355, 613, 811, 867, 1242, 1377, 1400], "evalu": [48, 49, 50, 51, 170, 171, 232, 234, 258, 283, 355, 367, 382, 395, 397, 398, 432, 433, 434, 435, 437, 438, 460, 527, 545, 566, 567, 577, 604, 653, 654, 781, 783, 786, 790, 792, 796, 798, 805, 806, 808, 809, 811, 820, 821, 824, 825, 838, 841, 845, 849, 854, 855, 857, 858, 867, 889, 904, 910, 912, 913, 932, 987, 1013, 1015, 1016, 1049, 1050, 1051, 1052, 1054, 1055, 1083, 1156, 1196, 1197, 1207, 1391, 1400, 1420], "even": [38, 48, 150, 257, 355, 518, 577, 658, 661, 694, 811, 867, 912, 987, 993, 1147, 1263, 1295, 1400], "evenli": [243, 355, 824, 825, 908, 987], "event": [64, 890, 987], "eventu": [39, 355], "ever": [654, 867], "everi": [15, 38, 48, 150, 151, 155, 161, 165, 237, 243, 309, 325, 355, 397, 398, 399, 400, 403, 405, 413, 456, 457, 458, 459, 460, 496, 509, 523, 535, 568, 569, 573, 576, 580, 581, 582, 590, 593, 598, 602, 673, 719, 800, 801, 867, 906, 908, 987, 1015, 1016, 1017, 1018, 1021, 1023, 1030, 1079, 1080, 1081, 1082, 1083, 1122, 1135, 1151, 1162, 1198, 1199, 1203, 1206, 1210, 1211, 1212, 1220, 1223, 1228, 1232, 1275, 1323, 1400], "everybodi": [713, 737, 1317, 1341], "everyth": 993, "evolv": [264, 355, 919, 987], "ew": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "ewm_mean": [867, 1400], "ewm_mean_bi": [867, 1400], "ewm_std": [867, 1400], "ewm_var": [867, 1400], "ewma": [518, 867, 1147, 1400], "exact": [176, 179, 181, 185, 258, 299, 355, 385, 531, 719, 747, 748, 749, 751, 752, 773, 867, 913, 987, 1323, 1353, 1355, 1356], "exactli": [133, 134, 137, 174, 175, 176, 177, 180, 181, 185, 264, 355, 741, 742, 747, 748, 810, 919, 987, 1305, 1345, 1346, 1351, 1352, 1400], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 98, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 147, 150, 151, 152, 153, 154, 155, 159, 160, 161, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 360, 362, 363, 366, 367, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 867, 879, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 992, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1400, 1405, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1429, 1430], "exc_tb": 1428, "exc_typ": 1428, "exc_val": 1428, "exce": [241, 355], "excel": [37, 41, 149, 155, 355, 879], "excelspreadsheetengin": 155, "except": [0, 223, 238, 243, 245, 258, 261, 262, 264, 284, 306, 355, 669, 726, 750, 812, 867, 879, 896, 908, 913, 919, 928, 933, 987, 993, 1059, 1169, 1195, 1271, 1330, 1354, 1371, 1380, 1400, 1427], "exclud": [181, 185, 243, 355, 441, 456, 459, 468, 480, 548, 620, 772, 791, 863, 867, 908, 987, 993, 1090, 1102, 1175, 1400], "excluded_dtyp": [181, 182, 185], "exclus": [288, 355, 780, 786, 820, 821, 867], "execut": [10, 40, 48, 49, 50, 51, 56, 63, 64, 65, 96, 147, 152, 153, 260, 302, 355, 463, 575, 700, 777, 846, 857, 867, 885, 889, 890, 895, 900, 918, 928, 929, 931, 942, 945, 962, 987, 1205, 1389, 1400, 1410, 1411, 1412, 1414, 1428, 1430], "execute_glob": 1428, "execute_opt": [152, 153], "execution_opt": 152, "exist": [1, 39, 40, 41, 42, 57, 75, 106, 154, 162, 166, 170, 181, 223, 238, 279, 284, 319, 324, 329, 330, 355, 373, 380, 424, 427, 430, 472, 495, 735, 736, 794, 867, 892, 896, 899, 933, 936, 953, 955, 956, 957, 987, 993, 1094, 1121, 1339, 1340, 1430], "existing_t": 1430, "existing_table_path": [40, 355], "exit": [56, 97, 205, 1415, 1428], "exp": [517, 518, 519, 520, 867, 1146, 1147, 1148, 1149, 1400, 1421], "exp_a": 1422, "expand": [147, 150, 162, 165, 170, 523, 618, 622, 667, 763, 867, 993, 1151, 1269, 1400], "expand_selector": 993, "expans": 760, "expect": [38, 40, 43, 47, 48, 49, 50, 51, 54, 73, 79, 111, 119, 127, 150, 152, 154, 160, 162, 165, 166, 168, 169, 170, 175, 177, 195, 211, 355, 826, 916, 918, 987], "expens": [150, 151, 160, 162, 165, 169, 170, 184, 186, 255, 263, 288, 289, 290, 319, 320, 355, 613, 867, 892, 894, 899, 936, 950, 955, 987, 1152, 1242, 1400, 1431], "experiment": [47, 51, 163, 259, 317, 355, 824, 825, 914, 987], "expiri": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 355, 987], "explain": [130, 210, 260, 355, 889, 987, 1427], "explainformat": [900, 987], "explicit": [41, 105, 152, 165, 179, 302, 324, 355, 501, 840, 945, 953, 987, 1127], "explicitli": [75, 105, 152, 153, 179, 181, 205, 238, 257, 355, 668, 849, 867, 878, 912, 987, 1428], "explod": [147, 355, 441, 529, 613, 654, 670, 772, 867, 987, 1272, 1400, 1418], "explor": [221, 355, 894, 987], "expon": [659, 867, 1261, 1400, 1422], "exponenti": [517, 518, 519, 520, 522, 659, 867, 1146, 1147, 1148, 1149, 1150, 1400, 1422], "export": [41, 43, 44, 49, 208, 255, 256, 289, 290, 307, 309, 312, 355, 863, 987, 993, 996, 1374, 1400], "expos": 879, "expr": [1, 52, 53, 54, 57, 58, 59, 60, 61, 145, 147, 232, 233, 248, 257, 258, 259, 262, 264, 275, 279, 288, 293, 294, 312, 317, 329, 330, 355, 362, 363, 366, 367, 373, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 867, 868, 869, 872, 873, 874, 875, 876, 902, 903, 912, 913, 914, 919, 930, 937, 938, 956, 957, 987, 993, 1083, 1142, 1143, 1147, 1154, 1155, 1161, 1163, 1165, 1193, 1205, 1207, 1212, 1228, 1232, 1241, 1253, 1254, 1269, 1316, 1321, 1328, 1347, 1400, 1426], "expr1": [1420, 1428], "expr2": [1420, 1428], "expr_unique_subset": [275, 355], "express": [0, 8, 52, 53, 54, 63, 145, 147, 178, 181, 185, 213, 230, 232, 234, 242, 248, 257, 258, 259, 262, 263, 264, 275, 279, 283, 288, 293, 294, 298, 301, 312, 317, 318, 329, 330, 332, 334, 341, 355, 367, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 399, 400, 401, 402, 403, 406, 419, 424, 425, 426, 427, 428, 429, 430, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 460, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 521, 523, 524, 526, 527, 531, 533, 534, 536, 537, 538, 539, 545, 548, 549, 550, 551, 552, 553, 554, 555, 563, 564, 568, 569, 571, 572, 575, 576, 577, 583, 585, 603, 604, 610, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 633, 635, 637, 638, 640, 642, 648, 649, 651, 653, 654, 658, 659, 660, 661, 663, 667, 668, 669, 670, 672, 673, 696, 697, 698, 701, 703, 704, 706, 708, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 733, 735, 736, 737, 739, 740, 741, 742, 750, 754, 764, 765, 768, 769, 772, 773, 774, 776, 777, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 835, 838, 840, 841, 842, 843, 845, 847, 849, 851, 853, 854, 855, 857, 858, 863, 866, 879, 884, 889, 900, 901, 904, 907, 912, 913, 914, 919, 929, 932, 937, 938, 941, 942, 944, 949, 956, 957, 958, 960, 963, 970, 987, 993, 1020, 1058, 1072, 1083, 1090, 1094, 1127, 1142, 1143, 1147, 1153, 1163, 1165, 1175, 1193, 1202, 1205, 1207, 1241, 1242, 1253, 1254, 1269, 1270, 1271, 1299, 1303, 1316, 1317, 1318, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1339, 1340, 1341, 1354, 1358, 1385, 1400, 1418, 1420, 1422, 1423, 1427], "exprmetanamespac": [617, 623], "ext": [52, 53, 54, 152], "extend": [0, 134, 327, 355, 524, 867, 879, 991, 1002, 1153, 1400], "extend_const": [867, 1400], "extens": [314, 355, 1381, 1400], "extern": [202, 958, 987], "external_shallow_clon": 202, "extra": [40, 55, 147, 150, 151, 154, 156, 158, 162, 165, 166, 167, 170, 231, 243, 264, 355, 867, 908, 919, 987, 1152, 1400], "extra_column": [170, 264, 355, 919, 987], "extra_struct_field": [55, 264, 355, 919, 987], "extract": [138, 210, 302, 355, 471, 474, 476, 479, 482, 483, 484, 485, 486, 487, 490, 492, 493, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 658, 721, 722, 723, 728, 729, 739, 741, 867, 1093, 1096, 1097, 1098, 1101, 1104, 1108, 1109, 1110, 1112, 1113, 1116, 1118, 1119, 1123, 1125, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1325, 1326, 1327, 1332, 1333, 1343, 1421], "extract_mani": 1329, "extract_numb": [658, 867], "extracted_nr": 721, "extrem": [524, 676, 867, 1153, 1277, 1400], "extrema": [700, 867, 1304, 1400], "f": [52, 58, 151, 152, 234, 241, 256, 307, 313, 319, 323, 355, 378, 420, 429, 604, 700, 719, 749, 752, 794, 867, 904, 987, 993, 1037, 1234, 1323, 1353, 1356, 1400, 1405, 1418], "f32": [1, 60, 214, 302, 311, 317, 355, 700, 846, 867, 886, 928, 945, 987, 993, 1240, 1400, 1426], "f4": [313, 355], "f5ed2452": [41, 355], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 57, 59, 61, 65, 84, 96, 132, 134, 159, 171, 178, 181, 214, 215, 216, 219, 221, 222, 223, 225, 227, 232, 233, 236, 240, 241, 242, 243, 248, 249, 257, 258, 264, 266, 267, 268, 269, 273, 279, 280, 281, 300, 301, 303, 305, 317, 326, 329, 334, 337, 339, 342, 343, 344, 345, 347, 348, 355, 373, 377, 380, 386, 387, 388, 389, 390, 391, 410, 411, 417, 422, 429, 442, 448, 449, 451, 452, 453, 461, 462, 466, 467, 497, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 530, 531, 536, 538, 546, 547, 549, 556, 557, 558, 559, 561, 563, 575, 587, 588, 600, 606, 607, 608, 609, 611, 614, 615, 616, 632, 635, 637, 646, 647, 648, 649, 655, 659, 661, 662, 663, 664, 668, 669, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 702, 703, 704, 705, 709, 710, 764, 768, 769, 773, 777, 778, 787, 788, 792, 794, 796, 798, 811, 812, 824, 825, 828, 831, 832, 833, 846, 848, 856, 863, 867, 886, 887, 894, 896, 897, 902, 903, 907, 908, 911, 912, 913, 919, 921, 922, 928, 930, 944, 946, 954, 956, 958, 963, 966, 968, 971, 972, 973, 974, 976, 977, 987, 993, 1004, 1005, 1006, 1007, 1008, 1009, 1028, 1034, 1039, 1046, 1068, 1069, 1074, 1075, 1076, 1084, 1085, 1088, 1089, 1123, 1146, 1147, 1148, 1149, 1150, 1154, 1159, 1170, 1173, 1174, 1205, 1217, 1218, 1230, 1236, 1237, 1238, 1239, 1258, 1261, 1263, 1265, 1271, 1276, 1277, 1280, 1281, 1282, 1283, 1286, 1287, 1288, 1289, 1290, 1293, 1294, 1295, 1296, 1307, 1308, 1309, 1313, 1372, 1373, 1388, 1389, 1400, 1409, 1417, 1418, 1422, 1425, 1428, 1431], "f64_awai": [694, 867], "f64_to_even": [694, 867], "f_string": 815, "fa1e": [754, 1358], "face": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 355, 987], "facil": 152, "facilit": [217, 355], "factor": [517, 519, 520, 770, 867, 1146, 1148, 1149, 1382, 1400], "fail": [38, 39, 40, 43, 47, 48, 49, 50, 51, 132, 154, 156, 160, 162, 165, 166, 168, 169, 170, 195, 209, 313, 320, 355, 395, 499, 749, 751, 752, 756, 867, 950, 987, 1242, 1353, 1355, 1356, 1360, 1380, 1400, 1426], "fall": [170, 461, 661, 867, 889, 900, 929, 942, 962, 987, 1084, 1263, 1400, 1417], "fallback": [132, 155], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 38, 40, 41, 47, 48, 49, 50, 51, 52, 55, 57, 63, 64, 65, 132, 133, 134, 136, 137, 138, 145, 147, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 209, 213, 214, 215, 216, 221, 228, 234, 236, 240, 241, 242, 243, 247, 250, 251, 252, 255, 257, 258, 260, 262, 267, 268, 274, 275, 277, 279, 280, 283, 288, 289, 290, 291, 296, 299, 301, 302, 305, 308, 310, 313, 314, 318, 319, 320, 324, 325, 327, 329, 337, 339, 342, 343, 345, 348, 355, 373, 381, 382, 383, 394, 397, 398, 401, 405, 406, 416, 421, 424, 427, 430, 441, 442, 443, 447, 455, 456, 457, 458, 459, 461, 468, 480, 481, 497, 514, 515, 516, 517, 519, 520, 538, 539, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 571, 575, 579, 581, 583, 592, 599, 605, 611, 612, 613, 617, 619, 620, 621, 623, 625, 628, 629, 648, 649, 651, 653, 654, 656, 657, 661, 664, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 696, 697, 698, 700, 705, 707, 708, 711, 712, 713, 714, 717, 723, 724, 725, 727, 728, 735, 736, 737, 740, 741, 743, 749, 751, 752, 754, 772, 774, 777, 780, 781, 782, 783, 784, 786, 789, 790, 791, 792, 795, 796, 798, 799, 800, 801, 805, 806, 808, 809, 814, 820, 821, 824, 825, 826, 827, 828, 832, 838, 840, 841, 845, 846, 849, 851, 854, 855, 857, 858, 867, 884, 886, 887, 888, 889, 890, 894, 900, 904, 907, 908, 912, 913, 916, 918, 929, 932, 940, 942, 944, 945, 949, 950, 953, 956, 962, 966, 968, 971, 972, 974, 977, 987, 992, 993, 1000, 1001, 1012, 1015, 1016, 1019, 1023, 1024, 1033, 1038, 1041, 1042, 1044, 1047, 1058, 1059, 1060, 1062, 1065, 1070, 1071, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1090, 1102, 1103, 1123, 1143, 1144, 1146, 1148, 1149, 1156, 1158, 1164, 1166, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1196, 1197, 1201, 1205, 1209, 1211, 1213, 1222, 1229, 1235, 1248, 1254, 1256, 1259, 1260, 1263, 1265, 1266, 1267, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1297, 1299, 1301, 1305, 1310, 1312, 1315, 1316, 1317, 1318, 1321, 1327, 1328, 1329, 1331, 1332, 1339, 1340, 1341, 1344, 1345, 1347, 1353, 1355, 1356, 1358, 1375, 1380, 1381, 1385, 1386, 1389, 1391, 1400, 1410, 1412, 1418, 1423, 1428], "far": [41, 355], "fashion": [257, 355], "fast": [47, 49, 51, 147, 184, 186, 355, 524, 698, 867, 987, 991, 1153, 1301, 1400, 1431], "fast_executemani": [39, 355], "fast_project": 961, "faster": [48, 49, 50, 51, 63, 152, 155, 231, 313, 323, 355, 613, 775, 867, 889, 900, 929, 942, 987, 1152, 1242, 1400], "fastexcel": [155, 173], "favor": [39, 170, 355], "fay": 146, "feat1": [312, 317, 355], "feat2": [312, 317, 355], "feather": [43, 156, 168, 355, 879], "featur": [1, 47, 62, 73, 79, 167, 312, 317, 355], "feature_0": [958, 987], "feature_0_train": [958, 987], "feature_1": [958, 987], "feature_nam": [317, 355], "feb": [173, 1423], "februari": 1423, "fed": 745, "feel": [713, 737, 1317, 1341], "fetch": [140, 889, 987], "fetch_california_h": [317, 355], "few": [241, 262, 355], "fewer": [726, 750, 987, 1330, 1354], "ff": 1417, "ff00": [754, 1358], "fff": 1, "ffff00": [425, 426, 715, 1042, 1043, 1319], "ffffff": [41, 355], "ffi": [229, 355, 1145, 1400], "fgg": 993, "fghi": 1423, "fh": 151, "fiction": 1409, "field": [37, 38, 40, 48, 51, 55, 88, 123, 126, 134, 141, 264, 321, 355, 365, 366, 373, 420, 604, 612, 613, 639, 641, 643, 672, 721, 722, 728, 741, 742, 762, 763, 764, 770, 777, 800, 801, 827, 849, 857, 867, 919, 951, 987, 1037, 1234, 1242, 1274, 1326, 1345, 1346, 1367, 1369, 1382, 1400, 1424], "field_0": [420, 604, 1037, 1234], "field_1": [420, 604, 1037, 1234], "field_2": [1037, 1234], "field_id": 141, "field_n": [420, 604, 1037, 1234], "field_nam": [365, 613, 867, 1242, 1400], "field_overwrit": [51, 141, 987], "fiftyf": [544, 867], "figsiz": [628, 929, 942, 987], "figur": [628, 695, 867, 942, 987, 1296, 1400], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 222, 231, 295, 355, 463, 533, 627, 631, 867, 895, 939, 987, 991, 1152, 1400], "file_cache_ttl": [160, 165, 168, 169], "file_idx": [53, 142, 144], "file_path": [52, 53, 54, 142, 144], "filenam": 156, "filesourc": [155, 161, 162, 170], "filesystem": [40, 154, 166, 167, 355], "fill": [57, 65, 215, 232, 233, 298, 323, 355, 359, 423, 456, 459, 525, 526, 532, 546, 547, 677, 679, 681, 683, 685, 688, 690, 692, 699, 815, 838, 841, 858, 867, 902, 903, 941, 958, 987, 1040, 1154, 1155, 1160, 1174, 1255, 1278, 1280, 1284, 1289, 1291, 1293, 1303, 1400], "fill_char": [733, 734, 1337, 1338], "fill_nan": [233, 355, 526, 867, 903, 987, 1155, 1400], "fill_nul": [57, 232, 325, 355, 423, 456, 459, 525, 532, 699, 867, 902, 958, 987, 1040, 1154, 1160, 1400], "fill_valu": [298, 323, 355, 699, 867, 941, 987, 1303, 1400], "fillnullstrategi": [233, 355, 526, 867, 903, 987, 1155, 1400], "film": 1409, "filter": [1, 58, 63, 96, 145, 165, 166, 170, 171, 225, 226, 250, 251, 252, 279, 283, 341, 355, 443, 447, 624, 626, 717, 743, 779, 804, 807, 811, 814, 845, 846, 857, 867, 882, 889, 897, 898, 900, 910, 929, 932, 942, 945, 970, 987, 993, 1300, 1400, 1416], "final": [14, 41, 57, 147, 170, 258, 260, 355, 517, 519, 520, 867, 894, 913, 987, 1146, 1148, 1149, 1400, 1429], "find": [65, 239, 355, 544, 697, 712, 713, 725, 867, 1172, 1299, 1317, 1329, 1339, 1400], "find_pat": 724, "fine": [889, 900, 929, 942, 984, 987], "finish": [52, 53, 54, 231, 355, 1152, 1400], "finish_callback": [52, 53, 54], "finit": [551, 773, 796, 867, 1179, 1400], "first": [47, 57, 150, 151, 155, 156, 158, 161, 162, 165, 170, 174, 175, 176, 177, 210, 241, 243, 245, 257, 258, 261, 262, 263, 274, 278, 279, 287, 306, 310, 311, 319, 320, 325, 332, 338, 355, 373, 394, 396, 405, 460, 464, 489, 491, 496, 512, 531, 541, 544, 552, 565, 573, 575, 581, 582, 612, 625, 634, 658, 659, 674, 697, 708, 712, 719, 720, 724, 726, 728, 729, 735, 736, 750, 757, 792, 793, 800, 814, 818, 857, 863, 867, 908, 909, 912, 913, 917, 927, 928, 935, 950, 958, 960, 967, 987, 993, 1012, 1023, 1083, 1085, 1086, 1115, 1117, 1122, 1138, 1169, 1172, 1180, 1195, 1203, 1205, 1211, 1212, 1234, 1242, 1299, 1312, 1323, 1324, 1326, 1328, 1330, 1332, 1333, 1339, 1340, 1354, 1361, 1371, 1375, 1377, 1380, 1400, 1420, 1421, 1423, 1429, 1431], "first_column": [41, 355], "first_non_nul": [604, 1234], "first_part": [741, 742, 1345, 1346], "fisher": [561, 675, 705, 867, 1191, 1276, 1310, 1400], "fit": [146, 255, 299, 323, 355, 700, 841, 867, 1304, 1305, 1400], "five": [316, 355, 1431], "fix": [11, 66, 75, 179, 512, 810, 825, 1138], "flag": [62, 154, 166, 178, 296, 313, 355, 698, 712, 720, 721, 724, 735, 736, 867, 900, 918, 940, 987, 993, 1301, 1316, 1324, 1325, 1328, 1339, 1340, 1380, 1400, 1423], "flat": [146, 290, 355, 576, 670, 867, 1206, 1272, 1400], "flat_from_polar": 141, "flatten": 867, "flavour": [41, 152, 355], "flight": 152, "flight_sql": 152, "flightsql": 152, "float": [11, 12, 38, 41, 48, 55, 77, 78, 150, 151, 165, 171, 174, 175, 176, 177, 178, 181, 185, 209, 221, 225, 229, 232, 258, 264, 281, 291, 312, 313, 347, 355, 373, 449, 461, 466, 467, 497, 514, 515, 516, 517, 519, 520, 525, 530, 531, 536, 538, 546, 549, 551, 554, 556, 557, 558, 559, 563, 592, 607, 611, 614, 628, 632, 646, 647, 648, 649, 659, 661, 662, 676, 677, 679, 681, 683, 685, 686, 688, 690, 692, 694, 696, 702, 773, 839, 841, 867, 894, 897, 902, 913, 919, 930, 942, 976, 987, 993, 1059, 1069, 1084, 1085, 1087, 1088, 1089, 1123, 1141, 1145, 1146, 1148, 1149, 1154, 1159, 1170, 1176, 1191, 1222, 1237, 1251, 1252, 1261, 1262, 1263, 1264, 1277, 1278, 1280, 1282, 1284, 1286, 1287, 1289, 1291, 1293, 1295, 1297, 1300, 1307, 1310, 1314, 1370, 1380, 1390, 1400, 1428, 1431], "float16": [317, 355], "float32": [1, 11, 38, 48, 60, 214, 236, 264, 311, 312, 313, 317, 355, 518, 867, 886, 919, 928, 987, 993, 1147, 1178, 1240, 1378, 1380, 1383, 1400], "float4": [302, 355, 846, 945, 987, 1426], "float64": [11, 38, 41, 48, 96, 134, 150, 159, 178, 181, 217, 227, 229, 236, 264, 292, 317, 329, 355, 386, 387, 388, 389, 390, 391, 429, 442, 451, 452, 453, 462, 497, 518, 521, 556, 557, 663, 703, 704, 768, 769, 812, 828, 838, 841, 858, 863, 867, 891, 899, 919, 928, 936, 956, 987, 992, 993, 1123, 1147, 1381, 1388, 1400], "float_cast": [55, 264, 355, 919, 987], "float_list": 84, "float_precis": [9, 11, 28, 38, 41, 48, 355, 987], "float_scientif": [38, 48, 355, 987], "floatcastopt": 55, "floatfmt": 12, "floor": [59, 531, 867, 1400, 1421], "floor_a": 1422, "floordiv": [773, 867], "fmt": [12, 258, 355, 545, 815, 867, 910, 913, 987], "fmt_number": [355, 359], "fmt_str_length": [13, 805, 806, 808, 809], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 355], "fn": [800, 801, 814, 840], "foggi": [735, 736, 1339, 1340], "fold": [355, 625, 792, 800, 801, 840, 857], "folder": 171, "follow": [41, 47, 62, 136, 145, 150, 151, 152, 154, 155, 161, 165, 166, 167, 243, 258, 262, 263, 278, 287, 313, 325, 355, 369, 370, 371, 372, 491, 496, 509, 518, 549, 658, 659, 664, 674, 678, 680, 682, 684, 686, 687, 689, 691, 693, 702, 762, 773, 788, 805, 806, 808, 809, 828, 854, 855, 857, 859, 860, 862, 867, 868, 869, 872, 874, 875, 876, 908, 913, 927, 935, 987, 993, 1117, 1122, 1135, 1147, 1176, 1261, 1265, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1298, 1300, 1307, 1380, 1392, 1394, 1396, 1400, 1401, 1406, 1407, 1408, 1426, 1431], "font": [41, 355], "font_color": [41, 355], "font_siz": [41, 355], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 146, 159, 160, 214, 217, 218, 219, 223, 224, 225, 226, 227, 228, 231, 234, 236, 238, 239, 240, 244, 245, 246, 247, 248, 249, 251, 257, 261, 263, 265, 266, 267, 268, 269, 272, 273, 276, 279, 281, 283, 284, 285, 288, 291, 292, 293, 295, 297, 300, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 319, 320, 321, 326, 327, 328, 333, 355, 444, 461, 463, 491, 535, 541, 545, 565, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 661, 670, 711, 714, 716, 719, 721, 722, 727, 738, 740, 742, 744, 745, 746, 747, 748, 755, 758, 767, 785, 796, 797, 798, 813, 817, 818, 819, 822, 823, 829, 831, 833, 834, 836, 837, 839, 845, 848, 852, 856, 857, 863, 867, 886, 891, 892, 896, 897, 898, 899, 904, 910, 911, 912, 926, 932, 933, 936, 937, 950, 951, 955, 958, 987, 992, 993, 1061, 1084, 1117, 1213, 1261, 1263, 1272, 1318, 1320, 1323, 1325, 1326, 1342, 1346, 1351, 1352, 1359, 1362, 1400, 1414, 1416, 1417, 1418, 1420, 1423, 1426], "foo1": 1423, "foo11": [236, 355], "foo_": [622, 740, 815], "foo_1": [310, 355], "foo_2": [310, 355], "foo_3_4": 1423, "foo_a": [279, 355], "foo_a_bar_1": 815, "foo_at_1": 1418, "foo_b": [279, 355], "foo_b_bar_2": 815, "foo_bar": [617, 623, 740, 826, 1414], "foo_bar2": [617, 623], "foo_bar_baz": 740, "foo_c_bar_3": 815, "foo_low": [755, 1423], "foo_mean": 1418, "foo_q25": 1417, "foo_q50": 1417, "foo_q75": 1417, "foo_std": 1417, "foo_strip": 744, "foo_strip_end": 745, "foo_strip_start": 746, "foo_sum": [1417, 1418], "foo_uniqu": 1418, "foo_upp": [758, 1423], "foo_var": 1417, "foobar": [747, 748, 1351, 1352, 1423], "foobarbar": [748, 1352], "foofoobar": [747, 1351], "foral": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "forbid": [55, 264, 355, 919, 987], "forc": [150, 156, 160, 162, 258, 263, 313, 341, 355, 912, 913, 970, 987, 1242, 1380, 1400], "force_parallel": [258, 355, 912, 913, 987], "foreign": 202, "form": [38, 48, 131, 133, 134, 135, 137, 159, 160, 169, 211, 255, 289, 323, 355, 501, 655, 732, 757, 867, 882, 987, 1127, 1258, 1336, 1361, 1400, 1423], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 48, 101, 132, 148, 150, 151, 152, 155, 156, 158, 161, 165, 171, 208, 222, 230, 241, 255, 270, 279, 289, 290, 295, 309, 322, 353, 355, 359, 373, 463, 496, 498, 501, 627, 628, 629, 749, 751, 752, 756, 810, 867, 895, 900, 901, 923, 939, 952, 987, 991, 996, 1124, 1127, 1353, 1355, 1356, 1360, 1399, 1423, 1424], "formul": [225, 355, 897, 898, 987], "formula": [41, 355, 514, 867, 1141, 1400], "fortran": [312, 313, 355], "forward": [233, 258, 298, 325, 355, 415, 456, 459, 468, 488, 526, 532, 597, 699, 867, 903, 913, 941, 987, 1032, 1090, 1114, 1155, 1160, 1227, 1303, 1400], "forward_fil": [423, 526, 867, 1040, 1155, 1400], "found": [21, 38, 41, 48, 102, 123, 126, 134, 138, 155, 162, 170, 227, 302, 355, 544, 697, 724, 729, 747, 748, 749, 752, 867, 945, 987, 1172, 1299, 1328, 1333, 1351, 1352, 1353, 1356, 1400, 1412, 1423, 1428], "four": [316, 355, 1428], "fourth": [561, 867, 1191, 1400], "frac": [517, 518, 519, 520, 705, 867, 1146, 1147, 1148, 1149, 1310, 1400], "fraction": [38, 48, 174, 175, 176, 177, 291, 355, 497, 592, 655, 696, 749, 752, 777, 867, 987, 1123, 1222, 1258, 1297, 1353, 1356, 1389, 1400], "fragment": 1428, "frame": [38, 39, 41, 48, 57, 64, 65, 134, 151, 155, 161, 174, 175, 214, 215, 221, 255, 256, 260, 263, 271, 275, 278, 288, 289, 290, 302, 317, 323, 324, 355, 501, 846, 886, 887, 894, 924, 927, 928, 945, 953, 987, 993, 1071, 1127, 1400, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1427, 1431], "frame_data": [1411, 1414], "frameinittyp": [355, 987], "frametyp": [57, 1428], "framework": [279, 322, 355, 952, 987], "freedom": [303, 326, 355, 600, 606, 688, 689, 692, 693, 710, 778, 798, 842, 843, 848, 856, 867, 946, 954, 987, 1289, 1290, 1293, 1294, 1314, 1390, 1400], "freeli": [264, 355, 846, 919, 945, 987, 993], "freez": [41, 355], "freeze_pan": [41, 355], "frequenc": [325, 355, 777, 867, 1389, 1400], "frequent": [1298, 1300, 1400], "fri": [355, 358], "fridai": [243, 355, 468, 480, 498, 791, 908, 987, 1090, 1102, 1124, 1127], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 48, 49, 50, 51, 55, 57, 65, 75, 88, 96, 101, 105, 121, 125, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 190, 195, 210, 214, 221, 222, 223, 229, 231, 234, 235, 241, 243, 255, 256, 257, 258, 259, 260, 264, 270, 279, 283, 284, 287, 288, 290, 291, 293, 294, 302, 310, 317, 319, 320, 322, 323, 324, 325, 331, 355, 358, 359, 420, 429, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 521, 531, 533, 546, 561, 580, 592, 604, 621, 646, 647, 649, 654, 655, 658, 661, 663, 674, 676, 678, 680, 682, 684, 686, 689, 691, 693, 694, 696, 708, 720, 721, 726, 728, 729, 739, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 775, 787, 788, 791, 792, 804, 805, 806, 807, 808, 809, 810, 824, 826, 841, 846, 853, 854, 855, 857, 863, 866, 867, 886, 894, 895, 896, 904, 908, 912, 913, 914, 919, 923, 932, 933, 935, 937, 938, 945, 950, 952, 953, 958, 959, 987, 991, 992, 993, 1037, 1046, 1084, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1143, 1145, 1147, 1152, 1191, 1210, 1222, 1234, 1251, 1252, 1254, 1255, 1258, 1263, 1277, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1297, 1324, 1325, 1330, 1332, 1343, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1360, 1375, 1391, 1400, 1409, 1410, 1411, 1412, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431], "from_arrai": 846, "from_arrow": 132, "from_json": 867, "from_panda": 132, "from_repr": [311, 355, 1377, 1400], "fromkei": [58, 60], "front": [243, 355, 908, 987], "fruit": [308, 355, 443, 447, 671, 717, 743, 750, 867, 1060, 1065, 1321, 1347, 1354], "fruits_revers": [671, 867], "fsspec": [150, 151, 156, 158, 166, 167, 173], "fsspecfileio": 167, "full": [12, 27, 47, 51, 57, 72, 101, 134, 137, 150, 151, 152, 154, 156, 159, 160, 162, 165, 166, 167, 169, 170, 171, 257, 324, 355, 726, 735, 736, 749, 750, 751, 752, 756, 805, 806, 912, 918, 953, 987, 991, 993, 1330, 1332, 1339, 1340, 1353, 1354, 1355, 1356, 1360, 1400, 1416, 1431], "full_path": [142, 144], "full_sent": 795, "fulli": [183, 278, 291, 313, 355, 542, 867, 1170, 1400], "funcnam": [41, 355], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 73, 79, 96, 97, 98, 128, 130, 132, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 201, 205, 207, 209, 213, 219, 222, 229, 236, 259, 262, 263, 264, 270, 278, 279, 284, 302, 312, 313, 314, 317, 318, 319, 322, 324, 341, 355, 358, 359, 367, 368, 373, 381, 420, 440, 441, 460, 461, 463, 468, 480, 517, 519, 520, 542, 604, 612, 613, 638, 639, 654, 658, 661, 673, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 702, 705, 725, 753, 770, 771, 772, 781, 785, 791, 793, 797, 799, 800, 801, 813, 814, 816, 818, 819, 822, 824, 825, 827, 828, 831, 833, 836, 838, 840, 844, 848, 852, 856, 858, 863, 867, 879, 884, 889, 890, 895, 900, 914, 918, 919, 923, 927, 928, 929, 933, 945, 949, 952, 953, 960, 961, 970, 987, 991, 995, 1037, 1057, 1058, 1067, 1083, 1084, 1090, 1102, 1145, 1146, 1148, 1149, 1170, 1234, 1242, 1263, 1275, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1298, 1300, 1305, 1307, 1310, 1329, 1378, 1381, 1383, 1384, 1385, 1400, 1405, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1431], "function_nam": 147, "further": 863, "futur": [43, 44, 64, 209, 221, 257, 296, 307, 355, 890, 894, 912, 940, 987, 1374, 1400], "g": [34, 38, 48, 146, 150, 154, 156, 158, 164, 166, 171, 183, 209, 222, 254, 313, 323, 355, 378, 463, 518, 521, 613, 700, 812, 857, 867, 895, 933, 987, 991, 1147, 1400, 1431], "g1": [527, 779, 867], "g2": [527, 779, 867], "g_1": [705, 867, 1310, 1400], "gag": 27, "gamma": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "gantt": [929, 987], "gather": [151, 237, 355, 394, 535, 580, 789, 867, 906, 987, 1012, 1162, 1210, 1400], "gather_everi": [355, 867, 987, 1400], "gb": [229, 355, 429, 1145, 1400], "gbp": 1431, "gc": [40, 154, 166, 167, 355], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 167, 168, 169, 170, 195, 355, 987], "gdp": [258, 355, 913, 987], "gdp2": [258, 355, 913, 987], "gdp_date": [258, 355, 913, 987], "ge": [867, 1400], "gener": [1, 41, 52, 53, 96, 145, 146, 152, 153, 172, 178, 179, 180, 181, 182, 183, 185, 209, 217, 219, 279, 291, 310, 313, 319, 355, 592, 696, 701, 786, 805, 808, 820, 821, 823, 824, 825, 841, 844, 854, 855, 867, 987, 1059, 1222, 1297, 1306, 1375, 1400, 1431], "geq": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "germani": [258, 355, 913, 987], "get": [52, 53, 54, 57, 64, 75, 147, 157, 163, 164, 171, 201, 210, 213, 217, 218, 227, 235, 238, 240, 243, 245, 246, 250, 252, 253, 259, 261, 266, 273, 274, 279, 287, 288, 292, 297, 300, 306, 314, 318, 328, 338, 349, 355, 361, 362, 363, 364, 365, 366, 367, 368, 373, 379, 392, 393, 394, 396, 404, 407, 421, 429, 441, 444, 456, 457, 458, 459, 468, 478, 480, 528, 534, 541, 544, 560, 562, 565, 578, 584, 605, 614, 615, 616, 624, 626, 632, 646, 647, 656, 657, 662, 673, 674, 706, 710, 719, 766, 767, 771, 772, 774, 778, 789, 791, 813, 818, 822, 828, 829, 830, 831, 833, 834, 835, 837, 848, 852, 856, 867, 884, 889, 890, 892, 899, 904, 905, 908, 909, 914, 915, 917, 935, 936, 943, 948, 949, 955, 967, 978, 987, 992, 997, 1010, 1011, 1012, 1013, 1014, 1022, 1025, 1038, 1046, 1061, 1070, 1079, 1080, 1081, 1082, 1090, 1100, 1102, 1140, 1157, 1158, 1164, 1169, 1172, 1175, 1176, 1177, 1189, 1192, 1195, 1208, 1214, 1235, 1243, 1245, 1246, 1248, 1250, 1251, 1252, 1259, 1260, 1264, 1275, 1311, 1314, 1323, 1371, 1375, 1381, 1386, 1390, 1400], "get_chunk": 1400, "get_column": [209, 315, 355], "get_column_index": 355, "get_index_dtyp": 844, "get_polars_schema": 203, "get_table_info": 203, "get_token": 34, "get_worksheet_by_nam": [41, 355], "gevent": [64, 173, 890, 987], "gh": 736, "gh45": 736, "gh45ij67kl": 736, "ghi": [378, 721, 867, 993, 1325], "gil": [613, 867, 991], "git": 62, "github": [153, 355], "give": [160, 168, 169, 258, 270, 320, 322, 355, 373, 478, 531, 561, 667, 773, 777, 857, 867, 879, 913, 923, 931, 950, 952, 987, 1100, 1191, 1269, 1389, 1400, 1427], "given": [41, 52, 53, 54, 57, 96, 107, 112, 129, 131, 133, 134, 135, 137, 145, 146, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 176, 177, 178, 179, 181, 183, 184, 185, 186, 207, 229, 230, 232, 234, 243, 248, 253, 262, 263, 271, 277, 278, 283, 288, 289, 290, 298, 301, 317, 324, 355, 401, 415, 420, 429, 441, 450, 469, 473, 498, 500, 501, 514, 518, 542, 548, 571, 597, 604, 607, 613, 654, 658, 664, 667, 668, 670, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 699, 721, 722, 733, 734, 749, 752, 759, 762, 772, 790, 792, 796, 798, 812, 813, 822, 827, 828, 841, 842, 843, 857, 867, 901, 908, 918, 924, 927, 931, 932, 941, 944, 953, 970, 987, 992, 993, 995, 1019, 1032, 1037, 1046, 1072, 1091, 1095, 1124, 1126, 1127, 1141, 1145, 1147, 1170, 1175, 1190, 1201, 1227, 1234, 1237, 1240, 1242, 1255, 1261, 1265, 1269, 1272, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1299, 1303, 1325, 1326, 1337, 1338, 1353, 1356, 1357, 1363, 1388, 1391, 1400, 1409, 1411, 1416, 1418, 1419, 1422, 1423, 1428, 1430, 1431], "glimps": [221, 245, 355], "glob": [150, 151, 155, 156, 160, 162, 165, 168, 169, 170], "global": [56, 97, 98, 155, 172, 181, 189, 302, 355, 668, 669, 846, 867, 945, 987, 1270, 1271, 1400, 1410, 1412, 1427], "gmt": [473, 477, 495, 1095, 1099, 1121], "go": [13, 150, 151, 165, 443, 717, 1060, 1321], "godfath": 1409, "goe": 13, "gonfruit": 1354, "good": [47, 49, 51, 255, 355, 987, 1422], "goodby": 1, "googl": [35, 154, 166, 167], "gpu": [10, 49, 63, 64, 312, 355, 889, 890, 900, 929, 942, 962, 984, 987, 1378, 1400], "gpu_devic": [312, 355], "gpudevic": [312, 355], "gpuengin": [10, 889, 900, 929, 942, 987], "grade": [1191, 1400], "grain": [889, 900, 929, 942, 984, 987], "granular": [51, 987, 1428], "grape": 1423, "graph": [63, 152, 260, 355, 628, 889, 910, 958, 987], "graphviz": [260, 355, 628, 942, 987], "great": [355, 359], "great_tabl": [355, 359], "greater": [215, 258, 355, 536, 538, 548, 705, 733, 734, 742, 759, 857, 867, 913, 987, 1175, 1310, 1337, 1338, 1346, 1363, 1400], "greatest": [1417, 1421], "greatli": [156, 168], "green": [56, 97, 98, 341, 777, 867, 970, 1389, 1400], "greenlet": [64, 890, 987], "greet": 1, "grid": [546, 867], "grid_point": [546, 867], "gridlin": [41, 355], "gross": 1409, "ground": 604, "group": [9, 28, 47, 51, 54, 147, 151, 170, 214, 242, 243, 256, 258, 275, 277, 279, 287, 290, 323, 325, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 379, 441, 523, 529, 534, 537, 575, 612, 613, 624, 626, 654, 664, 673, 674, 707, 708, 712, 720, 721, 722, 724, 735, 736, 772, 777, 828, 867, 886, 907, 908, 913, 935, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 993, 1083, 1205, 1275, 1316, 1324, 1325, 1326, 1328, 1339, 1340, 1389, 1400, 1409, 1417, 1427, 1428], "group_bi": [243, 275, 279, 287, 325, 354, 355, 379, 431, 436, 439, 441, 527, 529, 534, 537, 612, 613, 654, 707, 708, 772, 777, 779, 805, 808, 828, 844, 867, 889, 890, 900, 908, 929, 931, 935, 942, 985, 987, 993, 1389, 1400], "group_by_dynam": [287, 355, 935, 987], "group_by_partit": [929, 987], "group_col": [527, 779, 867], "group_df": [341, 970], "group_dtyp": [654, 867], "group_index": [720, 1324], "group_to_row": [654, 867], "groupbi": [242, 355, 613, 828, 867], "grouper": [431, 436, 439, 867], "grow": [327, 355], "grown": [247, 355], "gt": [355, 359, 867, 1400], "gte": [527, 779, 867], "guarante": [10, 47, 51, 150, 151, 213, 221, 244, 271, 318, 320, 355, 440, 441, 540, 770, 771, 772, 867, 884, 894, 924, 949, 950, 987, 1057, 1058, 1168, 1382, 1384, 1385, 1400], "guid": [145, 147, 867, 991, 1431], "gzip": [47, 51, 355, 987], "h": [323, 355, 378, 498, 501, 700, 735, 736, 749, 752, 756, 867, 1339, 1340, 1353, 1356, 1360, 1423, 1424], "ha": [40, 41, 48, 49, 50, 51, 55, 57, 64, 136, 152, 165, 188, 209, 325, 331, 336, 355, 365, 440, 441, 533, 612, 625, 631, 726, 750, 760, 771, 772, 796, 813, 822, 827, 828, 863, 867, 890, 942, 959, 965, 970, 987, 1057, 1058, 1071, 1083, 1085, 1330, 1354, 1384, 1385, 1400], "half": [317, 355, 496, 517, 518, 519, 520, 694, 867, 1122, 1146, 1147, 1148, 1149, 1295, 1400], "half_away_from_zero": [694, 867, 1295, 1400], "half_lif": [517, 518, 519, 520, 867, 1146, 1147, 1148, 1149, 1400], "half_to_even": [694, 867, 1295, 1400], "ham": [36, 38, 40, 43, 44, 47, 214, 217, 218, 219, 223, 224, 225, 226, 227, 228, 234, 239, 244, 245, 247, 257, 261, 265, 267, 269, 272, 276, 281, 283, 284, 285, 288, 291, 292, 293, 300, 303, 304, 306, 310, 311, 313, 314, 315, 320, 326, 327, 355, 444, 628, 629, 863, 886, 891, 892, 896, 897, 898, 899, 904, 912, 926, 932, 933, 936, 937, 950, 958, 987, 1061, 1416, 1417], "ham_a": [310, 355], "ham_b": [310, 355], "ham_right": [257, 355, 912, 987], "hamburg": 863, "hand": [41, 150, 151, 165, 355, 593, 594, 595, 596, 1223, 1224, 1225, 1226], "handi": [468, 480, 791, 1090, 1102], "handl": [40, 42, 104, 138, 147, 150, 151, 165, 171, 234, 238, 283, 355, 464, 573, 719, 759, 867, 889, 904, 932, 987, 1086, 1203, 1323, 1363, 1400], "handler": [148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 355, 463, 867, 895, 987], "happen": [152, 473, 661, 867, 1095, 1263, 1400], "hard": [96, 145, 165, 918, 987], "harder": [243, 355, 908, 987], "hardwar": 1431, "has_head": [150, 151, 155, 161, 165], "has_nul": [867, 1167, 1400], "has_prefix": [447, 743], "has_suffix": [443, 717], "has_two": 1418, "has_valid": 1400, "hash": [244, 355, 867, 1400], "hash_row": 355, "hat": [735, 736, 1339, 1340], "have": [5, 15, 31, 34, 41, 53, 56, 57, 65, 72, 98, 147, 148, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 210, 222, 231, 255, 257, 258, 279, 282, 287, 289, 290, 309, 317, 332, 355, 460, 463, 517, 519, 520, 625, 664, 668, 669, 674, 722, 737, 793, 867, 895, 912, 913, 923, 935, 959, 960, 987, 993, 1083, 1085, 1146, 1148, 1149, 1152, 1265, 1270, 1271, 1339, 1341, 1400, 1427, 1429, 1431], "haystack": [721, 1325], "he": 745, "head": [75, 165, 241, 261, 306, 355, 384, 565, 867, 917, 987, 1195, 1371, 1400], "header": [38, 41, 47, 48, 51, 138, 150, 151, 155, 161, 165, 227, 319, 355, 987], "header_format": [41, 355], "header_nam": [319, 355], "headerless": 165, "heap": [147, 229, 355, 867, 1145, 1400], "heatmap": [41, 355], "heavili": 170, "height": [41, 146, 181, 226, 355, 358, 1400, 1405], "hell": [744, 1348], "hello": [1, 21, 744, 745, 746, 993, 1213, 1348, 1349, 1350, 1411, 1414, 1423], "hello_": 815, "hello_data": 1414, "hello_world": 1414, "help": [41, 174, 175, 176, 177, 355, 987], "helper": [355, 359, 863], "henc": [735, 1340], "here": [38, 40, 41, 43, 47, 48, 49, 50, 51, 131, 133, 134, 135, 137, 152, 153, 154, 159, 160, 162, 165, 166, 167, 168, 169, 170, 179, 181, 185, 195, 210, 279, 355, 468, 480, 612, 613, 628, 722, 729, 791, 857, 867, 882, 942, 987, 993, 1090, 1102, 1333], "hex": [425, 426, 715, 716, 754, 1042, 1043, 1319, 1320, 1358], "hexadecim": [1042, 1043], "hf": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 355, 987], "hf_token": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 355, 987], "hi": [1, 1423], "hidden": [41, 355], "hidden_column": [41, 355], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 355], "hide_password": 152, "high": [290, 355, 359, 661, 867, 879, 1263, 1400], "higher": [47, 51, 55, 221, 281, 347, 355, 662, 685, 686, 839, 867, 894, 930, 976, 987, 1085, 1264, 1286, 1287, 1400], "highest": [355, 359, 664, 776, 796, 867, 987, 1265, 1400], "highli": [147, 867], "hint": [131, 145], "hippopotamu": [733, 734, 1337, 1338], "hist": [867, 1400, 1405], "histogram": [1400, 1405], "hit": [885, 987], "hive": [52, 162, 168, 170], "hive_custom": 198, "hive_dir": [52, 54], "hive_partit": [162, 168, 170], "hive_schema": [162, 168, 170], "hive_serd": 198, "hmm": [993, 1423], "hold": [299, 313, 355, 549, 867, 1176, 1380, 1400], "holidai": [468, 480, 791, 1090, 1102], "home": [757, 1361], "horizont": [21, 65, 106, 236, 247, 266, 268, 273, 305, 323, 355, 782, 784, 793, 794, 795, 800, 801, 803, 811, 814, 830, 832, 835, 840, 851, 958, 987], "host": [62, 150, 156, 158, 170], "hour": [160, 165, 168, 169, 243, 258, 287, 325, 355, 483, 485, 486, 490, 491, 494, 496, 497, 501, 503, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 807, 808, 809, 810, 824, 853, 854, 855, 867, 908, 913, 935, 987, 993, 1117, 1120, 1122, 1129, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "hourly_r": 153, "hours_diff": 503, "hous": [317, 355], "how": [12, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 57, 65, 106, 147, 153, 160, 162, 165, 168, 169, 170, 195, 226, 234, 257, 258, 279, 323, 324, 355, 402, 464, 494, 495, 546, 572, 573, 654, 667, 687, 749, 752, 791, 807, 867, 904, 912, 913, 953, 958, 987, 1020, 1086, 1120, 1121, 1202, 1203, 1269, 1288, 1353, 1356, 1400], "howev": [1, 10, 52, 134, 152, 162, 170, 205, 229, 263, 313, 355, 654, 867, 889, 900, 929, 942, 987, 1145, 1400], "hstack": [106, 355], "html": [33, 41, 43, 44, 132, 152, 156, 158, 207, 208, 209, 219, 355, 995, 996], "http": [21, 33, 41, 43, 44, 75, 132, 152, 153, 156, 158, 190, 207, 208, 209, 219, 355, 628, 720, 722, 732, 942, 987, 995, 996, 1324, 1326, 1336], "httpmethod": 75, "hug": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 355, 987], "huge": [229, 355, 1145, 1400], "hut": [735, 736, 1339, 1340], "hvplot": [355, 358, 1400, 1405], "hyperbol": [387, 389, 391, 452, 704, 769, 867, 1005, 1007, 1009, 1075, 1309, 1373, 1400], "hyperloglog": [212, 355, 385, 785, 867, 883, 987, 1003, 1400], "hyphen": [711, 1315], "hypothesi": [179, 181, 184, 185, 1431], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 79, 89, 96, 98, 102, 104, 105, 106, 107, 108, 109, 111, 112, 117, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 199, 201, 205, 210, 211, 212, 213, 214, 216, 217, 221, 222, 225, 226, 228, 229, 231, 232, 233, 234, 238, 242, 243, 244, 245, 248, 249, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 270, 271, 275, 277, 278, 279, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 298, 300, 301, 302, 303, 306, 307, 310, 312, 313, 314, 317, 318, 319, 320, 322, 324, 325, 326, 330, 332, 333, 341, 355, 358, 359, 367, 368, 373, 378, 381, 383, 384, 385, 395, 398, 405, 406, 415, 420, 423, 440, 441, 442, 445, 446, 460, 461, 463, 466, 467, 468, 469, 472, 480, 481, 488, 489, 491, 496, 498, 501, 509, 517, 518, 519, 520, 523, 525, 526, 527, 531, 532, 540, 542, 545, 548, 549, 561, 566, 567, 574, 575, 577, 579, 581, 583, 592, 597, 598, 600, 601, 604, 606, 609, 612, 613, 617, 619, 620, 621, 623, 624, 625, 627, 636, 654, 659, 660, 661, 664, 666, 667, 668, 669, 670, 673, 674, 675, 676, 678, 680, 682, 684, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 705, 706, 707, 708, 710, 711, 712, 713, 714, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 739, 742, 744, 745, 746, 749, 750, 751, 752, 753, 754, 756, 757, 759, 764, 766, 771, 772, 777, 778, 781, 782, 783, 784, 785, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 808, 809, 814, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 831, 833, 836, 838, 841, 842, 843, 844, 845, 846, 848, 850, 852, 854, 855, 856, 857, 858, 863, 867, 882, 883, 884, 885, 888, 889, 890, 892, 894, 895, 897, 898, 899, 900, 902, 903, 904, 907, 908, 911, 912, 913, 914, 916, 918, 919, 923, 924, 928, 929, 932, 933, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 949, 950, 952, 953, 954, 955, 957, 960, 961, 962, 970, 980, 987, 991, 993, 1000, 1001, 1002, 1003, 1015, 1016, 1023, 1024, 1032, 1035, 1037, 1040, 1057, 1058, 1062, 1063, 1064, 1066, 1067, 1072, 1073, 1083, 1084, 1085, 1088, 1089, 1090, 1091, 1094, 1102, 1103, 1117, 1122, 1124, 1127, 1135, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1154, 1155, 1156, 1157, 1160, 1168, 1169, 1170, 1172, 1175, 1176, 1178, 1181, 1188, 1190, 1191, 1192, 1195, 1196, 1197, 1204, 1205, 1209, 1211, 1213, 1222, 1227, 1228, 1231, 1234, 1242, 1261, 1262, 1263, 1265, 1267, 1269, 1270, 1271, 1272, 1275, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1303, 1306, 1307, 1310, 1311, 1314, 1315, 1316, 1317, 1318, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1343, 1346, 1348, 1349, 1350, 1353, 1354, 1355, 1356, 1358, 1360, 1361, 1363, 1370, 1371, 1374, 1375, 1378, 1380, 1381, 1383, 1384, 1385, 1389, 1390, 1400, 1405, 1409, 1410, 1415, 1419, 1420, 1423, 1426, 1428, 1429, 1431], "i0e0": 1431, "i16": [1, 60, 476, 492, 511, 700, 867, 993, 1118, 1377, 1400, 1431], "i32": [1, 60, 131, 134, 138, 178, 180, 181, 293, 302, 355, 404, 405, 407, 428, 442, 471, 479, 482, 483, 484, 485, 486, 490, 513, 700, 754, 791, 814, 857, 867, 937, 987, 992, 1022, 1023, 1025, 1045, 1093, 1104, 1108, 1109, 1110, 1116, 1139, 1240, 1358, 1400, 1420, 1424, 1431], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 58, 59, 60, 61, 65, 66, 84, 105, 131, 132, 133, 134, 135, 136, 137, 138, 146, 150, 152, 159, 160, 165, 174, 176, 210, 211, 213, 214, 215, 216, 218, 222, 223, 226, 227, 230, 231, 233, 234, 237, 238, 240, 241, 242, 243, 245, 247, 248, 250, 252, 254, 257, 258, 259, 261, 263, 264, 265, 271, 272, 277, 278, 279, 280, 283, 284, 285, 286, 287, 291, 293, 295, 298, 300, 301, 302, 304, 306, 308, 315, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 345, 348, 349, 355, 373, 378, 380, 384, 394, 399, 400, 402, 403, 409, 412, 413, 414, 415, 416, 418, 421, 431, 436, 439, 440, 441, 450, 456, 457, 458, 459, 460, 461, 464, 465, 478, 494, 500, 502, 503, 504, 505, 506, 507, 508, 518, 521, 523, 524, 526, 527, 528, 529, 531, 534, 535, 537, 541, 543, 545, 546, 547, 548, 552, 553, 555, 556, 557, 558, 559, 562, 565, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 610, 612, 613, 633, 634, 635, 637, 638, 640, 642, 644, 645, 650, 654, 655, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 696, 698, 699, 700, 701, 706, 707, 708, 726, 735, 736, 750, 754, 759, 760, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 776, 779, 786, 789, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 807, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 837, 840, 845, 846, 847, 850, 851, 852, 853, 857, 863, 867, 882, 884, 886, 887, 889, 890, 895, 896, 898, 901, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 917, 918, 919, 920, 924, 925, 927, 929, 931, 932, 933, 934, 935, 937, 939, 941, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 956, 959, 960, 963, 964, 966, 967, 968, 970, 971, 974, 977, 978, 987, 993, 997, 998, 999, 1002, 1021, 1027, 1029, 1031, 1032, 1033, 1035, 1038, 1057, 1058, 1072, 1073, 1079, 1080, 1081, 1082, 1083, 1084, 1100, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1151, 1152, 1153, 1155, 1156, 1161, 1162, 1164, 1169, 1171, 1181, 1195, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1216, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1234, 1235, 1242, 1247, 1255, 1261, 1263, 1266, 1267, 1268, 1270, 1271, 1272, 1274, 1278, 1279, 1281, 1283, 1284, 1285, 1287, 1290, 1291, 1292, 1294, 1297, 1298, 1300, 1303, 1304, 1306, 1311, 1312, 1358, 1364, 1369, 1371, 1376, 1384, 1385, 1386, 1391, 1400, 1409, 1410, 1412, 1416, 1417, 1418, 1419, 1420, 1422, 1425, 1426, 1428, 1429, 1431], "i8": [262, 355, 419, 420, 476, 479, 483, 485, 486, 487, 490, 492, 493, 497, 510, 511, 603, 700, 838, 841, 858, 867, 1036, 1037, 1086, 1098, 1101, 1112, 1113, 1119, 1123, 1136, 1137, 1233, 1273, 1304, 1388, 1400, 1424], "i_bitand_j": 1419, "i_bitand_op_j": 1419, "i_bitcount": 1419, "i_bitor_j": 1419, "i_bitor_op_j": 1419, "i_bitxor_j": 1419, "i_bitxor_op_j": 1419, "iceberg": [42, 167, 355, 879], "icon": [41, 355], "id": [27, 34, 41, 65, 146, 150, 155, 167, 259, 312, 319, 332, 341, 355, 673, 735, 736, 775, 867, 914, 960, 970, 987, 993, 1275, 1387, 1400, 1428, 1429, 1431], "id_char": 1431, "id_var": [270, 322, 355, 923, 952, 987], "ideal": [140, 145], "ident": [34, 138, 215, 216, 355, 498, 672, 673, 867, 887, 888, 987, 1071, 1073, 1124, 1274, 1275, 1400], "identif": [155, 161], "identifi": [138, 152, 270, 277, 320, 322, 333, 355, 923, 950, 952, 987], "idiograph": 993, "idiom": 857, "idiomat": [863, 892, 899, 936, 955, 970, 987], "idx": [165, 243, 256, 332, 355, 405, 420, 604, 908, 960, 987, 1037, 1234, 1328], "idx_lit": 1328, "idx_rx": 1328, "ieee": [773, 867], "if_set": [5, 31], "if_table_exist": [39, 355], "ifnul": 1421, "ignor": [40, 55, 69, 152, 170, 180, 181, 185, 264, 268, 305, 324, 355, 381, 383, 406, 464, 495, 517, 519, 520, 573, 583, 604, 613, 646, 647, 711, 727, 728, 781, 783, 795, 832, 851, 867, 919, 953, 987, 993, 1000, 1001, 1024, 1086, 1121, 1146, 1148, 1149, 1203, 1213, 1251, 1252, 1315, 1331, 1400], "ignore_error": [150, 151, 160, 165, 169], "ignore_nul": [268, 305, 355, 381, 383, 406, 517, 519, 520, 583, 711, 727, 781, 783, 795, 832, 851, 867, 1000, 1001, 1024, 1146, 1148, 1149, 1213, 1315, 1331, 1400], "ignore_spac": 993, "ij": 736, "ij67": 736, "ijkl": 1423, "ilmsuxu": [712, 720, 721, 724, 735, 736, 1316, 1324, 1325, 1328, 1339, 1340], "imbal": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "imdb_scor": 1409, "immedi": [205, 664, 786, 790, 792, 796, 798, 805, 806, 808, 809, 820, 821, 824, 825, 838, 841, 845, 849, 854, 855, 858, 867, 928, 987, 1265, 1400, 1410], "immut": [313, 355, 1380, 1400], "impact": [243, 355, 908, 987, 1409, 1428], "impl": 167, "implement": [47, 96, 145, 152, 209, 244, 263, 341, 355, 358, 359, 365, 540, 549, 613, 760, 770, 827, 828, 867, 970, 1168, 1176, 1242, 1298, 1300, 1382, 1400, 1405], "implic": [463, 867, 895, 987], "implicit": [324, 355, 857, 953, 987], "implicitli": [234, 283, 355, 527, 857, 867, 904, 932, 987, 1428], "implod": [612, 613, 867, 1400, 1418], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 57, 72, 75, 96, 131, 132, 135, 136, 146, 150, 152, 153, 159, 160, 165, 171, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 211, 214, 221, 222, 223, 226, 241, 243, 256, 258, 262, 277, 279, 295, 302, 310, 312, 317, 322, 323, 325, 355, 358, 359, 373, 429, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 577, 620, 621, 627, 654, 676, 678, 680, 682, 684, 686, 689, 691, 693, 791, 804, 805, 806, 807, 808, 809, 810, 811, 824, 846, 854, 855, 863, 867, 879, 886, 890, 894, 895, 896, 898, 908, 913, 918, 939, 952, 987, 991, 1046, 1074, 1076, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1147, 1179, 1182, 1184, 1185, 1207, 1277, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1308, 1372, 1400, 1405, 1410, 1425, 1428, 1431], "improv": [39, 51, 156, 167, 168, 257, 355, 912, 987], "in_part_idx": [52, 54, 144], "in_plac": [247, 299, 327, 355, 1266, 1305, 1312, 1400], "in_progress": [931, 987], "includ": [7, 21, 31, 38, 40, 41, 48, 52, 54, 62, 136, 152, 154, 155, 160, 161, 162, 165, 166, 167, 168, 169, 170, 181, 182, 205, 217, 221, 229, 259, 277, 279, 283, 290, 301, 317, 319, 323, 324, 355, 461, 497, 527, 531, 542, 548, 620, 661, 675, 677, 679, 681, 683, 685, 687, 688, 690, 692, 735, 736, 740, 741, 744, 745, 791, 800, 801, 842, 843, 867, 894, 904, 914, 932, 944, 953, 987, 993, 1084, 1085, 1123, 1145, 1156, 1170, 1175, 1263, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1339, 1340, 1344, 1345, 1348, 1400, 1428], "include_bom": [38, 48, 355, 987], "include_boundari": [243, 355, 908, 987], "include_break": [461, 661, 867, 1084, 1263, 1400], "include_breakpoint": [542, 867, 1170, 1400], "include_categor": 993, "include_categori": [542, 867, 1170, 1400], "include_col": 181, "include_file_path": [155, 160, 161, 162, 165, 168, 169, 170], "include_head": [38, 41, 48, 151, 319, 355, 373, 987], "include_index": 136, "include_init": [800, 801], "include_kei": [52, 54, 277, 290, 355], "include_nul": [324, 355, 953, 987], "inclus": [210, 243, 287, 355, 501, 548, 674, 678, 680, 682, 684, 686, 689, 691, 693, 740, 741, 786, 805, 806, 808, 809, 820, 821, 824, 825, 854, 855, 867, 908, 935, 987, 1127, 1175, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1344, 1345, 1400], "incom": 152, "incompat": 124, "incomplet": [669, 867, 1271, 1400], "incorpor": 1428, "incorrect": [296, 355, 512, 698, 867, 940, 970, 987, 1138, 1301, 1400], "incorrectli": 150, "increas": [41, 52, 53, 54, 57, 150, 155, 161, 162, 170, 355, 460, 673, 867, 1083, 1275, 1400], "independ": [63, 178, 181, 185, 317, 355, 701, 867, 889, 900, 929, 942, 987], "index": [41, 112, 132, 136, 139, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 173, 209, 211, 237, 239, 243, 248, 253, 255, 279, 285, 287, 288, 289, 298, 300, 312, 313, 315, 322, 324, 325, 331, 332, 355, 365, 379, 392, 393, 394, 396, 399, 400, 405, 415, 420, 518, 534, 535, 537, 544, 568, 569, 579, 580, 581, 597, 598, 604, 674, 678, 680, 682, 684, 686, 689, 691, 693, 697, 699, 706, 712, 720, 724, 726, 739, 750, 760, 789, 820, 823, 844, 867, 906, 908, 935, 941, 943, 952, 953, 959, 960, 987, 993, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1023, 1032, 1037, 1147, 1161, 1162, 1172, 1190, 1198, 1199, 1209, 1210, 1211, 1227, 1228, 1234, 1255, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1298, 1299, 1303, 1311, 1324, 1328, 1330, 1343, 1354, 1400, 1405, 1418, 1423], "index_column": [243, 287, 355, 674, 867, 908, 935, 987], "index_of": [867, 1400], "indexord": [312, 313, 355], "indic": [38, 41, 43, 47, 48, 49, 50, 51, 71, 72, 74, 89, 105, 115, 147, 148, 150, 151, 152, 155, 156, 158, 160, 161, 162, 165, 168, 169, 170, 178, 179, 185, 195, 243, 287, 290, 298, 310, 355, 395, 415, 534, 542, 550, 551, 552, 554, 555, 556, 557, 558, 559, 579, 597, 617, 618, 619, 620, 621, 622, 623, 654, 674, 678, 680, 682, 684, 686, 689, 691, 693, 697, 699, 789, 790, 837, 867, 908, 935, 941, 987, 993, 1032, 1067, 1161, 1170, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1209, 1227, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1298, 1299, 1303, 1375, 1400, 1423, 1431], "indistinguish": [38, 48, 355, 987], "individu": [41, 51, 141, 205, 287, 312, 313, 317, 355, 613, 721, 763, 867, 889, 935, 987, 993, 1070, 1325, 1400], "inequ": [648, 867], "inexact": [174, 175, 176, 177], "inf": [178, 181, 185, 391, 461, 551, 554, 661, 773, 867, 1009, 1076, 1084, 1179, 1182, 1240, 1258, 1263, 1388, 1400, 1425], "infer": [38, 43, 47, 48, 49, 50, 51, 73, 88, 105, 131, 133, 134, 135, 136, 137, 150, 151, 152, 155, 159, 160, 161, 162, 165, 168, 169, 170, 195, 263, 355, 612, 613, 670, 749, 751, 752, 756, 800, 801, 810, 814, 826, 827, 828, 840, 841, 867, 987, 1242, 1272, 1332, 1353, 1355, 1356, 1357, 1360, 1400], "infer_schema": [150, 165], "infer_schema_length": [134, 137, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 355, 728, 987, 1332], "inference_length": [753, 1357], "inference_s": [263, 355], "infin": [757, 773, 867, 1361], "infinit": [554, 773, 867, 1182, 1400], "influenc": [155, 918, 987], "influxdb": 152, "info": [154, 166, 167, 173], "inform": [20, 24, 38, 39, 43, 47, 48, 49, 50, 51, 52, 53, 54, 62, 145, 147, 154, 160, 162, 165, 166, 167, 168, 169, 170, 174, 176, 195, 196, 197, 199, 200, 207, 219, 221, 355, 359, 561, 705, 712, 720, 721, 724, 735, 736, 867, 889, 894, 900, 929, 942, 987, 991, 995, 1191, 1310, 1316, 1324, 1325, 1328, 1339, 1340, 1400], "inherit": [288, 355, 463, 867, 895, 987], "init": [205, 1409], "initcap": 1421, "initi": [33, 34, 35, 41, 88, 145, 190, 205, 355, 800, 801, 814, 857, 1428], "initialis": [75, 152, 205, 987], "inject": [41, 57, 355], "inlin": [25, 290, 355, 712, 720, 721, 724, 735, 736, 1316, 1324, 1325, 1328, 1339, 1340, 1418], "inner": [66, 84, 180, 257, 259, 324, 355, 361, 364, 373, 406, 419, 465, 583, 603, 613, 667, 770, 846, 867, 912, 914, 953, 987, 993, 1024, 1036, 1087, 1213, 1233, 1242, 1269, 1382, 1400, 1416, 1428], "inner_dtyp": [180, 183, 373], "innermost": [180, 183], "innter": 1023, "inprocessqueri": [889, 987], "input": [0, 54, 57, 63, 105, 134, 136, 147, 150, 151, 171, 213, 223, 242, 259, 263, 264, 268, 277, 279, 284, 293, 294, 298, 301, 305, 318, 324, 329, 330, 334, 355, 367, 378, 441, 443, 447, 450, 518, 521, 533, 548, 608, 612, 613, 625, 654, 668, 669, 702, 708, 726, 737, 739, 745, 746, 747, 748, 750, 752, 764, 772, 780, 782, 784, 786, 789, 792, 793, 794, 795, 801, 803, 810, 812, 820, 821, 826, 827, 828, 830, 832, 835, 840, 845, 849, 851, 857, 863, 867, 879, 884, 896, 907, 914, 919, 928, 933, 937, 938, 941, 944, 949, 953, 956, 957, 963, 987, 993, 1058, 1072, 1147, 1175, 1238, 1239, 1242, 1261, 1270, 1271, 1303, 1307, 1330, 1343, 1354, 1356, 1385, 1400, 1422, 1423, 1425], "input_wildcard_expans": [147, 867], "insensit": [713, 721, 723, 725, 735, 736, 737, 993, 1316, 1317, 1325, 1327, 1328, 1329, 1339, 1340, 1341], "insensitive_match": [712, 724], "insert": [39, 55, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 248, 264, 319, 321, 355, 697, 711, 727, 759, 867, 919, 951, 987, 1299, 1315, 1331, 1363, 1400], "insert_aft": [41, 355], "insert_befor": [41, 355], "insert_chart": [41, 355], "insert_column": 355, "insid": [64, 612, 857, 867, 890, 987], "inspect": [367, 700, 867, 987], "instal": [33, 34, 35, 109, 136, 150, 151, 153, 156, 158, 219, 314, 355, 468, 480, 628, 791, 942, 987, 1090, 1102, 1381, 1400], "instanc": [38, 43, 47, 48, 49, 50, 51, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 181, 185, 195, 231, 236, 355, 625, 800, 814, 863, 879, 886, 918, 931, 959, 960, 987, 1152, 1400], "instanti": [34, 39, 41, 152, 183, 311, 312, 355, 373, 992, 1377, 1378, 1400], "instantli": [64, 890, 987], "instead": [38, 40, 45, 46, 48, 57, 64, 66, 132, 133, 134, 137, 150, 151, 152, 155, 161, 162, 165, 170, 171, 178, 179, 180, 181, 185, 212, 213, 241, 254, 255, 258, 263, 270, 275, 277, 288, 289, 290, 293, 294, 295, 298, 312, 313, 314, 318, 330, 331, 355, 358, 359, 373, 394, 415, 441, 442, 445, 446, 461, 475, 501, 518, 521, 531, 597, 612, 627, 660, 661, 668, 699, 700, 711, 719, 730, 731, 744, 745, 746, 747, 748, 759, 766, 772, 779, 786, 788, 790, 792, 796, 797, 798, 805, 806, 808, 809, 810, 820, 821, 824, 825, 838, 841, 844, 845, 846, 849, 850, 854, 855, 858, 867, 882, 883, 884, 890, 900, 913, 923, 937, 938, 939, 941, 949, 957, 958, 959, 962, 987, 993, 1012, 1032, 1042, 1058, 1059, 1063, 1064, 1084, 1097, 1106, 1107, 1127, 1147, 1167, 1227, 1262, 1263, 1270, 1298, 1300, 1303, 1312, 1315, 1323, 1334, 1335, 1348, 1349, 1350, 1363, 1370, 1380, 1381, 1385, 1400, 1405, 1409, 1410, 1414, 1428, 1429], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 48, 49, 50, 51, 53, 59, 66, 73, 134, 137, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 195, 197, 211, 213, 215, 221, 229, 232, 233, 237, 239, 241, 244, 245, 246, 248, 253, 255, 256, 258, 261, 263, 274, 275, 285, 287, 288, 291, 297, 298, 300, 303, 306, 311, 315, 318, 323, 326, 328, 331, 332, 338, 349, 355, 373, 378, 405, 415, 417, 420, 422, 423, 440, 441, 460, 464, 468, 494, 517, 519, 520, 524, 525, 526, 532, 534, 535, 537, 540, 541, 542, 565, 573, 579, 580, 581, 582, 592, 597, 598, 600, 602, 603, 604, 606, 653, 655, 658, 659, 661, 664, 667, 670, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 706, 710, 720, 726, 728, 733, 734, 735, 739, 741, 742, 750, 753, 754, 759, 767, 771, 772, 778, 780, 786, 796, 798, 804, 807, 810, 816, 818, 820, 821, 824, 825, 837, 838, 841, 842, 843, 848, 849, 852, 853, 856, 858, 867, 884, 887, 894, 902, 903, 906, 909, 913, 917, 929, 941, 943, 946, 948, 949, 954, 955, 959, 960, 962, 967, 978, 987, 992, 993, 1010, 1011, 1023, 1032, 1034, 1037, 1039, 1040, 1057, 1058, 1059, 1070, 1071, 1077, 1083, 1086, 1087, 1090, 1120, 1145, 1146, 1148, 1149, 1153, 1154, 1155, 1160, 1161, 1162, 1168, 1169, 1170, 1172, 1190, 1194, 1195, 1203, 1209, 1210, 1211, 1212, 1222, 1227, 1228, 1230, 1232, 1233, 1234, 1236, 1248, 1249, 1251, 1252, 1255, 1257, 1258, 1261, 1262, 1263, 1265, 1269, 1272, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1302, 1303, 1306, 1311, 1314, 1324, 1330, 1332, 1337, 1338, 1339, 1343, 1345, 1346, 1354, 1357, 1358, 1363, 1370, 1371, 1377, 1384, 1385, 1390, 1400, 1412, 1415, 1428, 1431], "int16": [1, 60, 317, 355, 360, 458, 459, 492, 766, 867, 993, 1081, 1082, 1118, 1370, 1377, 1400], "int32": [1, 41, 60, 65, 131, 134, 178, 180, 181, 243, 256, 264, 287, 312, 355, 373, 404, 405, 407, 428, 442, 471, 482, 483, 484, 485, 490, 513, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 754, 770, 841, 867, 908, 919, 935, 987, 992, 993, 1019, 1022, 1023, 1025, 1045, 1093, 1104, 1108, 1109, 1110, 1116, 1139, 1147, 1240, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1358, 1382, 1383, 1400], "int64": [1, 40, 41, 59, 60, 65, 66, 88, 107, 150, 159, 217, 227, 236, 243, 264, 278, 287, 292, 307, 314, 355, 365, 366, 373, 399, 400, 402, 403, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 458, 459, 502, 503, 504, 505, 506, 507, 508, 512, 518, 521, 612, 613, 639, 641, 643, 658, 666, 674, 678, 680, 682, 684, 686, 689, 691, 693, 728, 754, 766, 770, 786, 793, 812, 820, 821, 826, 841, 849, 863, 867, 891, 899, 908, 919, 927, 935, 936, 987, 993, 1017, 1018, 1020, 1021, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1081, 1082, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1138, 1140, 1147, 1242, 1267, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1358, 1370, 1380, 1381, 1382, 1383, 1400], "int64arrai": [1374, 1400], "int8": [1, 60, 88, 236, 355, 362, 363, 419, 420, 458, 459, 476, 479, 486, 487, 493, 497, 510, 511, 603, 766, 838, 841, 858, 867, 992, 1036, 1037, 1081, 1082, 1086, 1098, 1101, 1112, 1113, 1119, 1123, 1136, 1137, 1233, 1273, 1370, 1380, 1388, 1400], "int_rang": [243, 323, 332, 341, 355, 786, 823, 844, 845, 908, 918, 960, 970, 987], "integ": [38, 41, 48, 55, 71, 72, 74, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 172, 179, 181, 184, 186, 211, 226, 243, 264, 287, 310, 313, 355, 373, 382, 449, 497, 530, 531, 653, 659, 661, 666, 673, 674, 675, 687, 726, 750, 754, 780, 786, 816, 820, 821, 841, 844, 867, 898, 908, 919, 935, 987, 993, 1069, 1123, 1159, 1261, 1263, 1267, 1275, 1276, 1288, 1298, 1330, 1354, 1358, 1380, 1400, 1422, 1428, 1431], "integer_cast": [55, 264, 355, 919, 987], "integer_list": 84, "integr": [41, 317, 355, 678, 680, 682, 684, 686, 689, 691, 693, 867, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1431], "intend": [1, 174, 175, 176, 177, 759, 1363], "intens": [263, 341, 355, 654, 867, 1242, 1400], "interact": [181, 185, 221, 355, 358, 894, 987, 1400, 1405], "interchang": [132, 209], "interest": [151, 498, 501, 1124, 1127], "interfac": [0, 120, 121, 131, 132, 203, 204, 208, 879, 996, 1428], "interfer": 991, "interleav": 1423, "intermedi": [249, 355, 546, 867, 911, 987, 1173, 1174, 1400, 1431], "intern": [43, 44, 49, 152, 172, 255, 307, 355, 531, 867, 987, 1374, 1400, 1410], "interoper": [207, 995], "interpol": [221, 281, 347, 355, 526, 547, 616, 662, 685, 686, 839, 867, 894, 930, 976, 987, 1085, 1174, 1264, 1286, 1287, 1400, 1417], "interpolate_bi": [867, 1400], "interpolationmethod": [546, 867, 1173, 1400], "interpret": [135, 137, 150, 151, 165, 355, 428, 987, 1045], "intersect": [41, 355, 594, 993, 1224, 1427], "interv": [243, 287, 325, 355, 461, 496, 542, 548, 661, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 824, 825, 854, 855, 867, 908, 935, 987, 1084, 1098, 1100, 1101, 1108, 1110, 1112, 1113, 1116, 1118, 1119, 1122, 1126, 1136, 1170, 1175, 1263, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1417], "intoexpr": [147, 213, 242, 243, 287, 293, 294, 298, 301, 318, 329, 330, 334, 355, 384, 401, 402, 424, 427, 430, 441, 464, 468, 494, 518, 524, 534, 542, 544, 547, 548, 549, 571, 572, 593, 594, 595, 596, 607, 654, 668, 669, 678, 680, 682, 684, 686, 689, 691, 693, 697, 699, 708, 713, 723, 725, 737, 740, 741, 742, 744, 745, 746, 747, 748, 764, 772, 782, 784, 789, 792, 793, 794, 795, 796, 798, 800, 803, 807, 814, 824, 830, 832, 835, 841, 845, 849, 851, 867, 884, 907, 908, 935, 937, 938, 941, 944, 949, 956, 957, 963, 987, 1019, 1020, 1041, 1044, 1047, 1058, 1090, 1147, 1153, 1172, 1174, 1175, 1176, 1201, 1202, 1270, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1299, 1303, 1329, 1344, 1345, 1346, 1348, 1349, 1350, 1351, 1352, 1385, 1400], "intoexprcolumn": [234, 248, 283, 355, 405, 406, 415, 440, 441, 450, 496, 524, 527, 580, 583, 592, 597, 655, 659, 696, 699, 720, 726, 729, 733, 734, 739, 750, 754, 759, 771, 772, 786, 791, 805, 806, 808, 809, 820, 821, 825, 854, 855, 857, 867, 904, 932, 941, 987, 1023, 1024, 1032, 1072, 1117, 1122, 1135, 1153, 1210, 1213, 1222, 1227, 1258, 1269, 1324, 1330, 1333, 1337, 1338, 1343, 1354, 1358, 1363, 1400], "introduc": [56, 98, 749, 751, 752, 1353, 1355, 1356], "introduct": 1427, "intuit": [531, 867, 993], "invalid": [38, 48, 121, 150, 151, 165, 214, 355, 442, 728, 729, 754, 773, 867, 987, 1042, 1059, 1332, 1333, 1358, 1400], "invalid_valu": 1042, "invalidoperationerror": [669, 867, 1271, 1400, 1426], "invari": [918, 987], "invers": [386, 387, 388, 389, 390, 391, 867, 1004, 1005, 1006, 1007, 1008, 1009, 1380, 1400, 1425], "invert": 993, "invok": 205, "involv": [234, 283, 355, 904, 932, 987], "io": [36, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 148, 150, 156, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 222, 295, 355, 463, 533, 627, 867, 895, 939, 987], "io_sourc": 145, "iobas": [45, 159, 222, 295, 355, 463, 627, 631, 867, 895, 939, 987], "ipc": [43, 44, 49, 156, 157, 158, 168, 171, 355, 879, 987], "ipccompress": [43, 44, 49, 355, 987], "ir": [942, 987], "is_between": [867, 1400], "is_clos": [867, 1400], "is_dupl": [355, 867, 1400], "is_elementwis": [147, 612, 827, 828, 867], "is_empti": [355, 1400], "is_finit": [867, 1400], "is_first_distinct": [867, 1400], "is_float": [928, 987], "is_in": [107, 234, 355, 867, 1400], "is_infinit": [867, 1400], "is_last_distinct": [867, 1400], "is_nan": [225, 355, 867, 897, 987, 1400], "is_not_nan": [867, 1400], "is_not_nul": [283, 355, 867, 932, 987, 1400], "is_nul": [226, 355, 867, 898, 987, 1400], "is_numer": 1431, "is_odd": 993, "is_pur": 145, "is_selector": 993, "is_sort": 1400, "is_uniqu": [355, 867, 1400], "isclos": [549, 867, 1176, 1400], "isn": [96, 145, 857], "iso": [482, 501, 510, 511, 1104, 1127, 1136, 1137, 1423], "iso8601": [150, 151, 165, 501, 1127], "iso_lang": 1423, "iso_year": 513, "isodow": 1424, "isoweek": 1424, "isoyear": 1424, "issu": [100, 101, 104, 105, 108, 115, 117, 128, 131, 150, 151, 152, 165, 355, 458, 459, 766, 867, 1081, 1082, 1370, 1400, 1428], "ital": [41, 355], "item": [14, 65, 151, 241, 288, 291, 355, 401, 405, 406, 428, 464, 523, 571, 573, 581, 583, 592, 696, 742, 867, 882, 928, 987, 1019, 1023, 1024, 1045, 1086, 1151, 1201, 1203, 1211, 1213, 1222, 1297, 1346, 1400], "iter": [52, 53, 54, 57, 63, 64, 65, 75, 130, 131, 134, 145, 147, 152, 184, 186, 213, 223, 230, 234, 242, 243, 254, 255, 256, 259, 283, 287, 288, 289, 290, 293, 294, 301, 318, 319, 329, 330, 333, 334, 355, 441, 460, 468, 480, 527, 654, 708, 764, 772, 782, 784, 789, 791, 792, 793, 794, 795, 803, 830, 832, 835, 845, 849, 851, 857, 863, 867, 884, 896, 901, 904, 907, 908, 914, 932, 935, 937, 938, 944, 949, 956, 957, 963, 987, 992, 993, 1058, 1083, 1090, 1102, 1156, 1298, 1385, 1400, 1431], "iter_batch": 152, "iter_column": 355, "iter_row": [256, 288, 289, 290, 355], "iter_slic": 355, "its": [76, 138, 152, 173, 229, 313, 355, 472, 496, 509, 518, 612, 613, 672, 708, 763, 777, 827, 828, 857, 867, 882, 892, 899, 918, 955, 987, 991, 1094, 1122, 1135, 1145, 1147, 1242, 1274, 1380, 1400, 1430], "itself": [179, 355, 358, 359, 675, 677, 679, 681, 683, 685, 687, 688, 690, 692, 790, 842, 843, 867, 916, 987, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1400, 1405, 1409, 1410, 1428], "ix": [279, 355], "j": [319, 355, 1419], "jax": [312, 355, 1378, 1400], "jax_enable_x64": [312, 355], "jaxexporttyp": [312, 355], "jjk": 993, "jkl": [721, 1325], "jklmn": 1423, "job": [885, 987], "join": [56, 57, 63, 65, 98, 234, 258, 259, 283, 324, 355, 527, 546, 654, 711, 846, 867, 889, 900, 904, 913, 914, 929, 932, 942, 953, 958, 987, 1315, 1410, 1412, 1418, 1427, 1428], "join_asof": [257, 355, 912, 987], "join_nul": [257, 355, 912, 987], "join_wher": [355, 987], "joinstrategi": [57, 257, 355, 912, 987], "joinvalid": [257, 355, 912, 987], "jpy": 1431, "json": [2, 3, 5, 6, 45, 46, 146, 147, 159, 160, 167, 169, 198, 222, 295, 355, 463, 533, 627, 631, 728, 729, 761, 867, 879, 895, 939, 987, 1332, 1333, 1366], "json_decod": [262, 355], "json_path": [729, 1333], "json_path_match": [728, 1332], "json_stat": 5, "json_str": [159, 160], "json_val": [729, 1333], "jsonencod": 146, "jsonpath": [728, 729, 1332, 1333], "jst": [138, 993], "jul": [749, 1353, 1423], "juli": [1127, 1423, 1424], "just": [41, 136, 152, 165, 270, 322, 355, 923, 952, 987, 993], "k": [213, 290, 318, 319, 355, 440, 441, 455, 561, 771, 772, 867, 884, 949, 987, 1057, 1058, 1078, 1191, 1384, 1385, 1400], "k_2": [705, 867, 1310, 1400], "k_3": [705, 867, 1310, 1400], "kadokawa": [732, 1336], "kanji": 993, "karen": [279, 355], "kathmandu": [1096, 1097, 1125], "kb": [229, 355, 429, 1046, 1145, 1400], "kde": [1400, 1405], "keep": [41, 57, 150, 151, 160, 165, 168, 169, 234, 320, 324, 325, 355, 533, 612, 630, 638, 668, 792, 827, 857, 867, 950, 953, 987, 1270, 1400], "kei": [38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 57, 62, 65, 143, 144, 154, 160, 162, 165, 166, 167, 168, 169, 170, 195, 210, 211, 243, 255, 257, 258, 271, 277, 284, 286, 289, 290, 324, 355, 527, 613, 668, 669, 737, 805, 808, 849, 867, 908, 912, 913, 924, 931, 933, 934, 953, 987, 993, 997, 1270, 1271, 1341, 1400, 1416], "kept": [320, 355, 950, 987], "keyedpartit": 144, "keyedpartitioncontext": [52, 54, 143], "keyerror": 17, "keystrok": 863, "keyword": [40, 154, 162, 166, 181, 185, 195, 219, 242, 262, 278, 288, 293, 294, 314, 329, 330, 334, 355, 468, 527, 658, 753, 764, 791, 845, 849, 857, 867, 907, 927, 937, 938, 956, 957, 963, 987, 1090, 1357, 1381, 1400, 1413], "kl": 736, "kleen": [381, 383, 781, 782, 783, 784, 867, 1000, 1001, 1400], "klmnoopqrstuvwxyz": [256, 355], "knight": 1409, "know": [57, 152, 262, 279, 322, 355, 882, 952, 987], "known": [131, 156, 199, 420, 604, 694, 700, 867, 970, 1037, 1234, 1295, 1400], "kurtosi": [675, 867, 1276, 1400], "kuzu_db_conn": 152, "kwarg": [32, 33, 37, 56, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 147, 149, 152, 153, 181, 183, 185, 198, 202, 219, 234, 262, 278, 283, 314, 355, 358, 658, 867, 904, 927, 932, 962, 987, 1381, 1400, 1405, 1413, 1428], "k\u00f9zudb": 152, "l": [824, 825], "l1": 65, "l2": 65, "label": [243, 312, 317, 355, 358, 359, 461, 661, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 867, 908, 929, 987, 1084, 1263, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1400, 1405], "label_column": [317, 355], "labelangl": [355, 358, 1400, 1405], "lag": [298, 355, 415, 597, 699, 794, 867, 941, 987, 1032, 1227, 1303, 1400], "lake": [40, 154, 166, 355, 879], "lambda": [52, 96, 165, 236, 262, 263, 278, 279, 284, 341, 355, 373, 420, 519, 520, 604, 612, 613, 638, 639, 800, 801, 814, 827, 828, 840, 867, 918, 927, 933, 970, 987, 1037, 1148, 1149, 1234, 1242, 1400], "land": [468, 480, 1090, 1102], "languag": [165, 243, 258, 287, 325, 355, 491, 496, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "larg": [11, 12, 15, 57, 152, 155, 161, 170], "large_str": [256, 307, 314, 355], "larger": [11, 48, 49, 50, 51, 531, 549, 796, 867, 987, 1176, 1400], "largest": [213, 318, 355, 441, 771, 772, 867, 884, 949, 987, 1058, 1384, 1385, 1400], "last": [40, 160, 165, 168, 169, 174, 175, 176, 177, 245, 258, 261, 279, 290, 301, 306, 313, 320, 349, 355, 394, 405, 416, 460, 476, 488, 492, 510, 532, 555, 581, 599, 602, 604, 654, 669, 707, 708, 726, 742, 750, 767, 789, 852, 863, 867, 913, 944, 948, 950, 978, 987, 993, 1012, 1023, 1033, 1083, 1098, 1114, 1118, 1136, 1160, 1169, 1183, 1195, 1211, 1229, 1232, 1271, 1312, 1330, 1346, 1354, 1371, 1380, 1400, 1421, 1423], "last_column": [41, 355], "later": [258, 295, 355, 627, 913, 939, 987], "latest": [33, 132, 154, 166, 209, 494, 495, 625, 749, 752, 807, 1120, 1121, 1353, 1356], "latt": 993, "latter": [41, 132, 231, 355, 1152, 1400], "lazi": [1, 48, 49, 50, 51, 52, 65, 150, 156, 160, 162, 165, 181, 258, 278, 279, 302, 355, 373, 613, 700, 816, 838, 841, 858, 867, 894, 912, 913, 928, 958, 963, 964, 966, 968, 970, 971, 972, 973, 974, 975, 976, 977, 987, 993, 1409, 1410, 1411, 1412, 1413, 1415, 1428, 1431], "lazili": [150, 151, 156, 160, 162, 165, 166, 167, 168, 169, 170, 367, 373, 890, 987], "lazy_fram": [63, 64, 130], "lazyfram": [0, 1, 10, 57, 58, 59, 60, 61, 63, 64, 65, 96, 130, 141, 145, 150, 156, 160, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 181, 195, 217, 222, 260, 264, 278, 279, 295, 302, 355, 373, 463, 527, 627, 845, 846, 857, 867, 879, 984, 985, 986, 992, 993, 1409, 1410, 1413, 1415, 1428, 1429, 1431], "lazyframeremot": [931, 987], "lazygroupbi": [907, 908, 935, 987], "lbl": [312, 317, 355], "ldf": [1, 963, 964, 966, 968, 971, 972, 973, 974, 975, 976, 977], "ldot": [518, 867, 1147, 1400], "le": [549, 717, 867, 1176, 1400], "lead": [15, 47, 96, 138, 145, 150, 171, 268, 296, 298, 305, 355, 415, 534, 537, 597, 698, 699, 744, 746, 796, 832, 851, 867, 918, 940, 941, 970, 987, 1032, 1227, 1242, 1301, 1303, 1348, 1350, 1400], "leap": [481, 491, 1103, 1117], "leap_year": 481, "learn": [317, 355], "least": [65, 111, 279, 355, 437, 438, 655, 720, 722, 792, 796, 798, 867, 1054, 1055, 1258, 1324, 1326, 1400, 1421], "leav": [6, 270, 322, 355, 923, 952, 987], "left": [16, 17, 41, 57, 174, 175, 176, 177, 243, 257, 258, 287, 324, 355, 461, 517, 518, 519, 520, 546, 548, 661, 674, 678, 680, 682, 684, 686, 689, 691, 693, 697, 770, 792, 800, 801, 805, 806, 808, 809, 814, 824, 825, 840, 854, 855, 857, 867, 908, 912, 913, 935, 953, 987, 1084, 1146, 1147, 1148, 1149, 1175, 1263, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1299, 1382, 1400, 1412, 1416, 1421], "left_clos": [461, 661, 867, 1084, 1263, 1400], "left_on": [257, 258, 324, 355, 912, 913, 953, 987], "left_right": [257, 324, 355, 912, 953, 987], "leftmost": [697, 867, 1299, 1400, 1423], "len": [13, 181, 185, 217, 256, 279, 332, 336, 341, 355, 454, 613, 624, 626, 664, 672, 797, 820, 824, 867, 891, 955, 960, 965, 970, 987, 992, 1077, 1274, 1400], "len_byt": [13, 446, 731, 732, 1064, 1335], "len_char": [445, 730, 1063, 1334], "length": [65, 66, 84, 147, 155, 161, 165, 179, 183, 241, 243, 287, 300, 355, 358, 428, 445, 460, 496, 598, 612, 625, 664, 668, 669, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 706, 726, 730, 731, 733, 734, 737, 739, 750, 759, 793, 824, 825, 827, 828, 838, 841, 842, 843, 844, 858, 867, 882, 908, 929, 935, 943, 987, 1045, 1063, 1070, 1083, 1094, 1122, 1228, 1234, 1255, 1270, 1271, 1274, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1311, 1330, 1334, 1335, 1337, 1338, 1341, 1343, 1354, 1363, 1400, 1417, 1418, 1421], "leq": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "less": [54, 165, 258, 355, 531, 563, 611, 742, 857, 867, 913, 987, 1346, 1431], "letter": [230, 338, 349, 355, 521, 713, 721, 723, 725, 737, 757, 812, 867, 901, 967, 978, 987, 993, 1317, 1325, 1327, 1329, 1341, 1361, 1423], "level": [11, 41, 43, 44, 47, 49, 51, 146, 163, 165, 168, 169, 170, 236, 263, 275, 302, 307, 355, 359, 527, 867, 879, 945, 987, 1374, 1400, 1428], "lexic": [69, 993, 1067], "lf": [10, 48, 49, 50, 51, 60, 96, 141, 373, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 965, 969, 987, 1417, 1428, 1431], "lf1": [846, 945, 987, 1413, 1415, 1429], "lf2": [846, 945, 987, 1413, 1415, 1429], "lf3": [987, 1413], "lf4": [987, 1413], "lf5": 987, "lf6": 987, "lf_other": [958, 987], "lib": [867, 1374, 1400], "librari": [1, 113, 147, 152, 155, 612, 867, 991, 1431], "life": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "lifetim": [205, 878, 1415], "light": [41, 355], "like": [36, 38, 40, 43, 44, 45, 46, 47, 64, 132, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 211, 222, 243, 250, 252, 257, 290, 295, 312, 313, 355, 358, 463, 469, 533, 575, 612, 630, 664, 720, 745, 746, 777, 827, 844, 863, 867, 885, 890, 895, 908, 987, 1091, 1205, 1265, 1324, 1389, 1400, 1405], "limit": [11, 12, 51, 52, 152, 153, 187, 233, 355, 423, 526, 532, 867, 903, 987, 1040, 1155, 1160, 1400, 1418, 1427], "line": [11, 21, 41, 150, 151, 155, 165, 241, 250, 252, 355, 358, 720, 1324, 1400, 1405], "line_termin": [38, 48, 355, 987], "linear": [221, 249, 281, 347, 355, 546, 547, 570, 616, 662, 685, 686, 794, 795, 839, 867, 894, 911, 930, 976, 987, 1085, 1173, 1174, 1200, 1264, 1286, 1287, 1400], "linearli": 825, "lineitem": [140, 151, 153], "link": 991, "list": [1, 14, 34, 40, 41, 57, 58, 60, 63, 64, 66, 72, 88, 105, 130, 131, 133, 134, 135, 137, 138, 140, 141, 144, 145, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 179, 180, 181, 185, 192, 193, 194, 200, 211, 218, 223, 227, 229, 230, 234, 240, 242, 243, 247, 255, 274, 277, 283, 287, 288, 289, 290, 293, 301, 308, 309, 317, 319, 320, 321, 323, 329, 334, 335, 355, 366, 373, 379, 406, 419, 420, 421, 461, 468, 480, 523, 529, 534, 543, 553, 612, 613, 625, 626, 654, 661, 667, 670, 676, 677, 679, 681, 683, 685, 688, 690, 692, 707, 708, 719, 721, 723, 725, 740, 760, 762, 763, 770, 789, 791, 794, 805, 806, 808, 809, 811, 819, 821, 825, 826, 827, 828, 844, 847, 849, 855, 863, 867, 892, 899, 901, 904, 907, 908, 932, 937, 944, 950, 951, 956, 958, 963, 964, 987, 992, 993, 1024, 1036, 1037, 1038, 1070, 1084, 1090, 1102, 1145, 1151, 1161, 1164, 1170, 1171, 1181, 1242, 1263, 1269, 1272, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1317, 1323, 1325, 1327, 1329, 1341, 1344, 1379, 1382, 1400, 1409, 1414, 1418, 1420, 1423, 1430, 1431], "list_catalog": 203, "list_namespac": 203, "list_of_seri": 828, "list_tabl": 203, "listitem": 141, "listtostructwidthstrategi": [604, 1234], "lit": [1, 380, 424, 548, 621, 637, 724, 793, 794, 800, 814, 838, 841, 857, 858, 867, 1155, 1400], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 48, 49, 50, 51, 55, 152, 154, 160, 162, 165, 166, 167, 168, 169, 170, 184, 185, 186, 195, 198, 202, 264, 274, 293, 294, 298, 324, 329, 330, 355, 362, 363, 366, 380, 424, 443, 447, 450, 472, 494, 515, 516, 524, 531, 536, 538, 548, 563, 611, 621, 633, 635, 648, 649, 659, 668, 669, 712, 713, 714, 723, 724, 725, 735, 736, 737, 764, 765, 773, 782, 784, 786, 792, 793, 794, 795, 803, 804, 807, 820, 824, 826, 830, 832, 835, 845, 849, 851, 853, 857, 867, 903, 919, 937, 938, 941, 953, 956, 957, 987, 993, 1041, 1072, 1094, 1120, 1143, 1153, 1175, 1254, 1270, 1271, 1298, 1300, 1303, 1316, 1317, 1318, 1327, 1328, 1329, 1339, 1340, 1341, 1400, 1423], "littl": [289, 355, 428, 1045], "lmn": 993, "ln": [517, 518, 519, 520, 867, 1146, 1147, 1148, 1149, 1400, 1421], "ln_a": 1422, "load": [3, 5, 6, 134, 136, 147, 152, 154, 155, 161, 166, 167, 184, 186, 355, 867, 879, 987, 1431], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 155, "load_tabl": 155, "load_workbook": 155, "loader": [317, 355], "lobster": [724, 1328], "loc": [355, 359], "local": [4, 40, 152, 154, 166, 167, 170, 355, 509, 656, 657, 867, 1062, 1066, 1096, 1097, 1122, 1125, 1135, 1259, 1260, 1400, 1410], "localhost": 152, "localis": [496, 509, 1135], "locat": [41, 162, 165, 168, 170, 211, 231, 285, 315, 321, 355, 697, 867, 951, 987, 1152, 1161, 1298, 1299, 1400], "lock": 187, "log": [30, 59, 441, 514, 609, 635, 659, 772, 867, 1058, 1141, 1385, 1400, 1421], "log10": [867, 1400, 1421], "log10_a": 1422, "log16_a": 1422, "log1p": [867, 1400, 1421], "log1p_a": 1422, "log2": 1421, "logarithm": [607, 608, 609, 867, 1237, 1238, 1239, 1400, 1422], "logic": [65, 263, 341, 355, 358, 359, 381, 383, 463, 613, 770, 781, 782, 783, 784, 827, 828, 857, 867, 895, 900, 912, 931, 939, 970, 987, 1000, 1001, 1242, 1380, 1382, 1400, 1405], "london": [473, 477, 495, 1095, 1099, 1121], "london_timezon": [495, 1121], "london_to_amsterdam": [495, 1121], "long": [230, 270, 279, 322, 323, 355, 901, 923, 952, 987], "longer": [150, 151, 165], "look": [11, 243, 262, 355, 424, 612, 613, 827, 828, 867, 908, 987, 1041], "lookup": 863, "loop": [152, 613, 867], "lose": [470, 1092], "lossi": [150, 151, 165], "lossless": 55, "lot": 54, "love": [713, 737, 1317, 1341], "low": [18, 450, 661, 867, 1263, 1400], "low_memori": [150, 151, 160, 162, 165, 169, 170], "lower": [55, 152, 165, 221, 243, 281, 347, 355, 450, 548, 610, 638, 662, 666, 685, 686, 786, 805, 806, 808, 809, 824, 825, 839, 854, 855, 867, 894, 908, 930, 976, 987, 1072, 1085, 1175, 1240, 1264, 1267, 1286, 1287, 1388, 1400, 1418, 1421], "lower_bound": [243, 355, 450, 548, 867, 908, 987, 1072, 1175, 1388, 1400], "lowercas": [644, 755, 757, 1359, 1361, 1423], "lowest": [610, 867], "lru_cach": [263, 355, 613, 867, 1242, 1400], "lst": 180, "lt": [173, 527, 779, 867, 1400], "ltrim": 1421, "lyric": [713, 737, 1317, 1341], "lz4": [43, 44, 47, 49, 51, 355, 987], "lzo": [47, 51, 355, 987], "m": [72, 74, 257, 355, 469, 470, 472, 477, 478, 498, 500, 501, 512, 720, 749, 751, 752, 756, 807, 808, 809, 810, 816, 912, 987, 993, 1091, 1092, 1094, 1099, 1100, 1124, 1126, 1127, 1138, 1324, 1353, 1355, 1356, 1360, 1413, 1423, 1424], "m_2": [705, 867, 1310, 1400], "m_3": [705, 867, 1310, 1400], "m_i": [705, 867, 1310, 1400], "machin": 1431, "maco": 173, "made": [41, 152, 355, 373, 501, 753, 1127], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 65, 73, 79, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 205, 221, 222, 229, 231, 243, 257, 258, 259, 263, 264, 287, 295, 302, 312, 314, 317, 324, 325, 355, 358, 359, 367, 368, 373, 445, 460, 461, 463, 468, 469, 470, 480, 482, 491, 496, 498, 509, 521, 542, 579, 612, 613, 624, 627, 661, 674, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 723, 725, 730, 736, 753, 791, 793, 800, 801, 805, 806, 808, 809, 814, 824, 825, 827, 828, 840, 844, 854, 855, 867, 882, 889, 890, 894, 895, 900, 908, 912, 913, 914, 918, 919, 928, 929, 935, 939, 945, 953, 959, 960, 961, 970, 987, 993, 1063, 1067, 1083, 1084, 1085, 1090, 1091, 1092, 1102, 1104, 1117, 1122, 1124, 1135, 1145, 1152, 1170, 1209, 1242, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1327, 1329, 1332, 1334, 1378, 1381, 1383, 1400, 1405, 1431], "main": [153, 173, 890, 987], "maintain": [48, 49, 50, 51, 301, 355, 421, 605, 697, 708, 774, 789, 867, 894, 944, 987, 1038, 1235, 1299, 1386, 1400], "maintain_ord": [48, 49, 50, 51, 242, 257, 277, 279, 301, 320, 324, 325, 335, 337, 339, 342, 343, 344, 345, 346, 347, 348, 355, 379, 421, 431, 436, 439, 441, 534, 537, 605, 613, 708, 772, 774, 789, 867, 890, 900, 907, 912, 929, 942, 944, 950, 953, 964, 966, 968, 971, 972, 973, 974, 975, 976, 977, 987, 1038, 1235, 1386, 1400], "maintainorderjoin": [257, 324, 355, 912, 953, 987], "major": [155, 312, 355], "make": [41, 65, 88, 131, 132, 136, 147, 150, 151, 154, 155, 156, 158, 162, 166, 271, 275, 282, 313, 325, 355, 358, 519, 520, 644, 645, 654, 667, 728, 741, 867, 924, 987, 1148, 1149, 1269, 1345, 1380, 1400], "malform": 150, "man": [738, 1342], "manag": [56, 97, 98, 202, 878, 879, 1415, 1428], "managed_shallow_clon": 202, "mandatori": [41, 355], "mango": [443, 447, 717, 743, 1060, 1065, 1321, 1347], "mani": [152, 153, 170, 231, 257, 355, 723, 725, 737, 912, 987, 1152, 1327, 1341, 1400, 1404], "manner": 152, "map": [51, 52, 54, 88, 133, 134, 141, 150, 151, 152, 153, 156, 157, 162, 164, 165, 168, 181, 214, 217, 235, 255, 263, 264, 284, 288, 289, 290, 292, 308, 355, 380, 496, 509, 612, 613, 637, 639, 640, 642, 644, 645, 668, 669, 737, 777, 827, 867, 886, 919, 933, 936, 987, 992, 993, 1085, 1122, 1135, 1242, 1270, 1271, 1341, 1389, 1400, 1410, 1412, 1413, 1428], "map_": 117, "map_batch": [367, 368, 373, 828, 867, 987], "map_column": 355, "map_el": [108, 263, 355, 368, 612, 780, 867, 1400], "map_field": [641, 643], "map_row": 355, "mapelementsstrategi": [613, 867], "mapping_strategi": [654, 867], "march": [498, 1124], "mariadb": 153, "mark": [41, 146, 355, 442, 867, 1059, 1400], "mark_area": [1400, 1405], "mark_attr": [355, 358, 1400, 1405], "mark_bar": [355, 358, 1400, 1405], "mark_lin": [355, 358], "mark_point": [355, 358], "markdown": [7, 21, 205], "marker": [41, 355], "mask": [170, 181, 185, 250, 252, 355, 425, 550, 552, 555, 560, 656, 657, 712, 715, 724, 867, 1042, 1156, 1175, 1176, 1177, 1180, 1183, 1189, 1259, 1260, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1300, 1316, 1319, 1328, 1391, 1400], "mass": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "massag": [270, 322, 355, 923, 952, 987], "match": [40, 41, 55, 65, 72, 96, 119, 131, 133, 134, 135, 137, 145, 150, 152, 159, 160, 162, 165, 169, 170, 174, 175, 176, 177, 211, 214, 233, 234, 257, 258, 264, 283, 288, 324, 355, 373, 428, 443, 447, 620, 621, 622, 668, 669, 687, 700, 712, 713, 714, 717, 720, 721, 723, 724, 725, 728, 729, 735, 736, 737, 743, 749, 751, 752, 844, 857, 863, 867, 886, 903, 912, 913, 919, 932, 953, 987, 993, 1045, 1060, 1065, 1144, 1270, 1271, 1288, 1316, 1317, 1318, 1321, 1324, 1325, 1327, 1328, 1329, 1332, 1333, 1339, 1340, 1341, 1347, 1353, 1355, 1356, 1400, 1423], "match_to_schema": [355, 987], "matches_overlap": [723, 725, 1329], "matches_supertyp": [233, 355, 903, 987], "materi": [145, 150, 156, 160, 162, 263, 290, 341, 355, 373, 889, 929, 970, 980, 987, 993, 1242, 1400], "materialis": [152, 255, 256, 288, 289, 355], "materialized_view": 202, "math": [1, 11, 61, 279, 355, 462, 549, 867, 1074, 1076, 1176, 1308, 1372, 1400, 1421, 1425, 1427], "mathemat": [773, 811, 867, 1421], "mathshortcut": [1, 61], "matplotlib": [173, 628, 929, 942, 987], "matter": [243, 255, 287, 289, 290, 309, 355, 674, 745, 746, 867, 908, 935, 987], "max": [10, 26, 41, 47, 51, 146, 221, 233, 242, 266, 279, 287, 355, 359, 456, 526, 549, 612, 654, 664, 668, 669, 674, 677, 678, 698, 742, 793, 805, 808, 830, 847, 867, 894, 903, 907, 935, 987, 1079, 1085, 1155, 1176, 1234, 1265, 1278, 1279, 1301, 1346, 1400, 1409, 1418, 1421], "max_a": [287, 355, 674, 867, 935, 987], "max_binary_s": 152, "max_col": [179, 181], "max_colname_length": [241, 355], "max_color": [41, 355], "max_data_s": 185, "max_elem": 1418, "max_horizont": [355, 829], "max_items_per_column": [241, 355], "max_level": 146, "max_siz": [53, 180, 181, 183, 185, 1431], "max_text_s": 152, "max_valu": 1431, "max_width": [604, 1234], "maxim": [342, 392, 867, 971, 1010, 1400], "maximum": [11, 27, 38, 47, 48, 51, 53, 73, 134, 137, 150, 151, 152, 155, 159, 160, 161, 165, 169, 171, 179, 180, 181, 183, 185, 241, 243, 265, 266, 355, 399, 446, 549, 568, 614, 646, 656, 664, 726, 731, 739, 750, 829, 830, 867, 908, 920, 987, 1017, 1064, 1105, 1176, 1198, 1243, 1251, 1259, 1265, 1330, 1332, 1335, 1343, 1354, 1400, 1417], "mb": [229, 355, 429, 1145, 1400], "md": 141, "md2": 141, "me": [713, 737, 757, 1317, 1341, 1361], "mean": [47, 51, 63, 130, 150, 151, 156, 162, 165, 168, 205, 221, 233, 242, 243, 258, 268, 279, 287, 325, 334, 355, 491, 496, 509, 523, 526, 531, 612, 613, 674, 678, 679, 680, 682, 684, 686, 689, 691, 693, 705, 711, 720, 727, 805, 806, 808, 809, 810, 827, 828, 832, 854, 855, 857, 867, 894, 903, 907, 908, 913, 918, 928, 935, 963, 987, 1085, 1117, 1122, 1135, 1151, 1155, 1242, 1279, 1280, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1310, 1315, 1324, 1331, 1400, 1417, 1418], "mean_horizont": [355, 831], "measur": [270, 322, 355, 359, 923, 952, 987], "measure_a": [355, 359], "measure_b": [355, 359], "median": [221, 279, 355, 526, 681, 682, 867, 894, 958, 987, 1085, 1282, 1283, 1400, 1421], "mediat": 1428, "medium": [41, 355], "megan": [271, 355, 924, 987], "melt": [322, 355, 952, 987], "member": [243, 355, 908, 987, 1181, 1400], "membership": [401, 571, 1019, 1201], "memori": [10, 15, 47, 51, 52, 53, 54, 63, 64, 65, 131, 132, 135, 136, 137, 150, 151, 152, 153, 154, 155, 156, 160, 162, 165, 166, 168, 169, 170, 209, 231, 263, 289, 290, 299, 313, 341, 355, 654, 665, 700, 867, 889, 890, 900, 929, 942, 962, 987, 1152, 1242, 1266, 1304, 1305, 1380, 1400], "memory_map": [156, 162, 168], "memory_resourc": 962, "merg": [40, 257, 258, 271, 355, 912, 913, 924, 987], "merge_sort": [355, 987], "messi": [720, 722, 1324, 1326], "met": 857, "meta": [99, 463, 718, 867, 1322], "metadata": [0, 47, 48, 49, 50, 51, 141, 163, 167, 191, 195, 355, 879, 987], "metastor": 196, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 52, 53, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 129, 132, 141, 142, 143, 144, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 178, 181, 185, 190, 196, 197, 199, 200, 205, 207, 212, 217, 221, 222, 225, 226, 231, 238, 242, 249, 255, 263, 270, 275, 281, 288, 289, 290, 298, 320, 329, 331, 336, 341, 347, 355, 369, 371, 372, 373, 378, 381, 382, 415, 450, 463, 475, 498, 501, 515, 516, 524, 531, 533, 536, 538, 546, 549, 563, 597, 611, 613, 631, 633, 635, 648, 649, 650, 653, 659, 662, 664, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 699, 713, 719, 723, 725, 737, 745, 746, 747, 748, 759, 765, 773, 775, 779, 780, 796, 827, 828, 839, 859, 860, 862, 863, 867, 868, 869, 872, 873, 874, 875, 876, 879, 882, 890, 894, 895, 897, 898, 911, 923, 928, 930, 941, 950, 956, 959, 961, 962, 965, 970, 976, 987, 992, 995, 1002, 1032, 1072, 1085, 1106, 1107, 1124, 1127, 1142, 1143, 1152, 1153, 1163, 1165, 1167, 1173, 1176, 1193, 1227, 1241, 1242, 1253, 1254, 1264, 1265, 1279, 1281, 1283, 1285, 1286, 1287, 1290, 1292, 1294, 1303, 1317, 1323, 1327, 1329, 1341, 1357, 1363, 1382, 1392, 1394, 1396, 1400, 1401, 1404, 1406, 1407, 1408, 1410, 1414], "metric": [52, 53, 54, 152], "micro": [497, 1123], "microsecond": [72, 74, 243, 255, 258, 287, 289, 290, 309, 325, 355, 491, 494, 496, 501, 504, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 807, 808, 809, 810, 853, 854, 855, 867, 908, 913, 929, 935, 987, 993, 1117, 1120, 1122, 1130, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "microsoft": [34, 41, 355], "mid_color": [41, 355], "midnight": 89, "midpoint": [221, 281, 347, 355, 662, 685, 686, 839, 867, 894, 930, 976, 987, 1085, 1264, 1286, 1287, 1400], "might": [52, 53, 54, 150, 151, 165, 187, 257, 279, 313, 322, 355, 613, 775, 867, 912, 944, 952, 987], "millennia": 1424, "millennium": 1424, "milli": [497, 1123], "millisecond": [243, 258, 287, 325, 355, 479, 486, 491, 496, 505, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 808, 809, 810, 824, 854, 855, 867, 908, 913, 935, 987, 993, 1117, 1122, 1131, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "milliseconds_diff": [504, 505, 507], "mimic": 794, "min": [41, 47, 51, 147, 221, 233, 273, 279, 287, 355, 457, 526, 654, 664, 674, 683, 684, 805, 808, 835, 845, 867, 894, 903, 935, 987, 1080, 1085, 1155, 1265, 1284, 1285, 1400, 1418, 1421, 1424, 1431], "min_a": [287, 355, 674, 867, 935, 987], "min_col": [179, 181], "min_color": [41, 355], "min_elem": 1418, "min_horizont": [355, 834, 845], "min_period": [460, 517, 519, 520, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 842, 843, 867, 1083, 1146, 1148, 1149, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1400], "min_sampl": [460, 517, 519, 520, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 842, 843, 867, 1083, 1146, 1148, 1149, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1400], "min_siz": [180, 181, 183, 185, 1431], "min_valu": 1431, "mincol": 179, "minim": [345, 393, 400, 569, 700, 708, 867, 974, 1011, 1018, 1199, 1246, 1304, 1400], "minimum": [47, 51, 179, 180, 181, 183, 185, 236, 272, 273, 355, 517, 519, 520, 632, 647, 657, 664, 834, 835, 867, 925, 987, 1111, 1146, 1148, 1149, 1252, 1260, 1265, 1400, 1417, 1431], "minu": [491, 650, 867, 1117], "minut": [243, 258, 287, 325, 355, 479, 483, 485, 490, 491, 494, 496, 497, 506, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 807, 808, 809, 810, 853, 854, 855, 867, 908, 913, 935, 987, 993, 1117, 1120, 1122, 1132, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "minutes_diff": 506, "mirror": [549, 867, 1176, 1400], "misc": 1415, "miscellan": 879, "mismatch": [65, 122, 160, 169, 174, 176], "miss": [55, 65, 150, 151, 162, 165, 170, 238, 264, 355, 423, 517, 519, 520, 532, 556, 557, 604, 867, 919, 987, 1040, 1146, 1148, 1149, 1160, 1400], "missing_column": [162, 170, 264, 355, 919, 987], "missing_struct_field": [55, 264, 355, 919, 987], "missing_utf8_is_empty_str": [150, 151, 165], "mix": [12, 258, 313, 355, 793, 846, 913, 945, 987, 993, 1085, 1400], "mixin": 1, "mkdir": [47, 48, 49, 50, 51, 52, 54, 355, 987], "mlnm": 484, "mm": [41, 355], "mn": 1423, "mno": [17, 21], "mnop": 1423, "mo": 810, "mocha": 993, "mod": [867, 1421], "mode": [39, 40, 41, 42, 48, 49, 50, 51, 174, 176, 279, 302, 355, 694, 721, 838, 841, 858, 867, 889, 900, 929, 942, 987, 1295, 1325, 1400, 1409, 1410, 1428], "model": [317, 355, 700, 867], "modif": 136, "modifi": [52, 53, 54, 150, 151, 165, 187, 205, 211, 231, 247, 254, 255, 327, 355, 395, 495, 512, 612, 613, 712, 720, 721, 724, 735, 736, 755, 757, 758, 827, 828, 867, 918, 987, 1002, 1121, 1138, 1152, 1242, 1316, 1324, 1325, 1328, 1339, 1340, 1359, 1361, 1362, 1400], "modul": [101, 109, 155, 866, 991, 993, 1431], "modulu": [633, 867], "moment": [47, 48, 49, 50, 51, 63, 64, 219, 355, 561, 705, 867, 889, 890, 900, 929, 942, 987, 1191, 1310, 1400], "mon": [355, 358, 1424], "mondai": [243, 355, 468, 480, 509, 511, 791, 908, 987, 1090, 1102, 1135, 1137], "monkei": [733, 734, 1337, 1338], "month": [243, 258, 287, 325, 355, 476, 488, 489, 491, 494, 496, 498, 501, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 804, 805, 806, 807, 808, 809, 810, 854, 855, 867, 908, 913, 935, 987, 1098, 1114, 1115, 1117, 1120, 1122, 1124, 1127, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "month_nam": [498, 501], "monthbegin": [489, 1115], "monthend": [488, 1114], "moos": 993, "more": [21, 41, 47, 51, 57, 65, 97, 98, 127, 131, 132, 133, 134, 135, 136, 137, 145, 147, 152, 153, 154, 155, 159, 160, 161, 162, 166, 167, 169, 174, 176, 181, 205, 207, 219, 221, 225, 226, 234, 254, 255, 263, 270, 275, 283, 288, 289, 291, 302, 312, 313, 317, 320, 322, 341, 355, 359, 382, 421, 445, 527, 531, 539, 561, 592, 605, 609, 613, 653, 654, 696, 705, 721, 730, 749, 751, 752, 774, 785, 797, 813, 819, 822, 831, 833, 836, 837, 847, 857, 863, 867, 894, 897, 898, 904, 923, 931, 932, 945, 950, 952, 962, 987, 991, 993, 995, 1038, 1063, 1085, 1166, 1167, 1191, 1222, 1235, 1242, 1297, 1310, 1325, 1334, 1353, 1355, 1356, 1378, 1380, 1386, 1400, 1415, 1416, 1426, 1429, 1430, 1431], "more_bi": [277, 301, 355, 708, 867, 944, 987], "more_column": [230, 321, 355, 521, 812, 867, 901, 951, 987, 993], "more_expr": [654, 789, 792, 793, 794, 795, 867], "more_nam": [760, 863], "most": [41, 131, 150, 151, 153, 165, 174, 175, 176, 177, 313, 355, 434, 435, 625, 634, 655, 669, 742, 867, 1051, 1052, 1247, 1258, 1271, 1346, 1380, 1400, 1412, 1428], "mostli": [307, 355, 527, 867], "move": [279, 290, 355, 468, 517, 518, 519, 520, 677, 679, 683, 690, 857, 867, 1090, 1146, 1147, 1148, 1149, 1278, 1280, 1284, 1291, 1400], "mr": 962, "mssql": [39, 355], "much": [263, 323, 341, 355, 445, 446, 579, 613, 730, 731, 827, 828, 867, 970, 1063, 1064, 1083, 1209, 1242, 1334, 1335, 1400], "mul": 867, "multi": [8, 41, 150, 151, 317, 355, 521, 720, 867, 993, 1324], "multi_fram": [41, 355], "multicolselector": 210, "multiindexselector": [210, 997], "multipl": [41, 54, 63, 64, 65, 114, 130, 150, 151, 153, 155, 156, 160, 161, 162, 165, 168, 169, 170, 179, 181, 185, 211, 223, 229, 231, 234, 242, 243, 247, 256, 259, 277, 279, 283, 290, 293, 301, 324, 329, 334, 355, 441, 579, 612, 618, 625, 634, 635, 654, 668, 670, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 708, 760, 772, 789, 797, 814, 827, 829, 834, 840, 847, 850, 857, 863, 867, 879, 889, 890, 896, 900, 904, 907, 908, 914, 929, 932, 937, 942, 944, 953, 956, 963, 970, 987, 1002, 1033, 1145, 1152, 1209, 1229, 1247, 1270, 1272, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1312, 1400, 1413, 1418], "multipli": [612, 676, 677, 679, 681, 683, 685, 688, 690, 692, 764, 867, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1400], "multithread": [301, 355, 708, 789, 867, 944, 987, 1033, 1229, 1312, 1400], "must": [34, 41, 75, 96, 133, 145, 147, 150, 154, 162, 165, 166, 167, 170, 171, 211, 221, 230, 243, 258, 259, 271, 279, 287, 288, 355, 461, 549, 604, 612, 613, 628, 661, 668, 669, 674, 737, 793, 800, 805, 806, 814, 825, 827, 828, 840, 857, 867, 894, 901, 908, 913, 914, 918, 924, 935, 942, 962, 987, 1084, 1085, 1176, 1242, 1263, 1270, 1271, 1341, 1400], "mutual": [288, 355], "my": [167, 171, 355, 358, 1400, 1405], "my_bucket": [931, 987], "my_column": 970, "my_column_": [319, 355], "my_column_0": [319, 355], "my_column_1": [319, 355], "my_column_2": [319, 355], "my_custom_aggreg": 828, "my_fil": 156, "my_holidai": [468, 480, 791, 1090, 1102], "my_larger_than_ram_fil": [48, 49, 50, 51, 987], "my_long_fil": 165, "my_struct": 849, "mydf": 165, "myrol": 153, "mysql": 153, "n": [1, 13, 14, 18, 26, 27, 38, 46, 48, 58, 59, 60, 61, 72, 74, 140, 145, 150, 151, 155, 160, 165, 181, 215, 231, 237, 243, 245, 255, 256, 261, 263, 289, 290, 291, 298, 303, 306, 309, 311, 326, 338, 340, 349, 355, 373, 385, 415, 420, 429, 431, 436, 439, 440, 441, 445, 446, 460, 464, 468, 470, 472, 478, 500, 512, 518, 524, 527, 535, 541, 565, 573, 580, 582, 592, 593, 597, 600, 602, 604, 606, 655, 658, 667, 688, 689, 692, 693, 696, 699, 705, 710, 726, 730, 731, 735, 736, 741, 742, 744, 745, 750, 752, 767, 771, 772, 773, 778, 780, 798, 807, 808, 809, 810, 816, 818, 838, 841, 842, 843, 845, 848, 852, 856, 858, 867, 887, 906, 908, 909, 917, 941, 946, 948, 954, 967, 969, 978, 987, 993, 1032, 1037, 1046, 1057, 1058, 1063, 1064, 1071, 1083, 1086, 1090, 1092, 1094, 1100, 1126, 1138, 1147, 1152, 1153, 1162, 1169, 1195, 1203, 1210, 1212, 1222, 1223, 1227, 1232, 1234, 1258, 1289, 1290, 1293, 1294, 1297, 1303, 1310, 1314, 1330, 1334, 1335, 1339, 1340, 1345, 1346, 1354, 1356, 1371, 1377, 1384, 1385, 1389, 1390, 1400, 1412, 1413, 1420, 1423, 1424, 1426, 1428, 1431], "n0": [420, 604], "n00": [1037, 1234], "n01": [1037, 1234], "n02": [1037, 1234], "n1": [41, 355, 420, 604], "n2": [1, 41, 355, 420], "n3": 1, "n_1": [527, 867], "n_2": [527, 867], "n_3": [527, 867], "n_bar": 1417, "n_bit": 1423, "n_byte": [429, 445, 446, 730, 731, 1423], "n_char": [445, 446, 730, 731, 1423], "n_chunk": [355, 1002, 1152, 1266, 1400], "n_column": 211, "n_elem": 1418, "n_even": 993, "n_field_strategi": [604, 1234], "n_film": 1409, "n_foo_uniqu": 1417, "n_kilobyt": 429, "n_row": [145, 148, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 211, 256, 355, 987], "n_thread": [150, 151], "n_uniqu": [355, 385, 867, 1400], "na": [314, 355, 743, 1381, 1400], "naiv": [472, 473, 752, 1094, 1095, 1356], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 48, 58, 59, 60, 61, 76, 88, 106, 131, 133, 134, 135, 136, 137, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 176, 177, 178, 179, 181, 184, 185, 186, 191, 193, 194, 195, 196, 197, 199, 200, 211, 213, 214, 217, 218, 223, 224, 225, 226, 230, 234, 235, 238, 239, 241, 242, 253, 254, 255, 257, 258, 259, 263, 266, 268, 270, 271, 273, 277, 279, 283, 284, 288, 289, 290, 292, 293, 294, 301, 302, 305, 308, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 329, 330, 331, 332, 333, 334, 340, 355, 359, 365, 366, 367, 380, 420, 424, 425, 427, 430, 441, 450, 461, 498, 501, 521, 527, 548, 556, 557, 558, 559, 604, 613, 618, 622, 624, 626, 630, 654, 661, 671, 694, 708, 721, 722, 735, 736, 737, 760, 762, 764, 772, 777, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 812, 813, 818, 819, 822, 829, 830, 831, 832, 833, 834, 835, 836, 839, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 856, 857, 863, 867, 884, 886, 891, 892, 896, 897, 898, 901, 904, 907, 912, 913, 914, 923, 924, 928, 932, 933, 936, 937, 938, 944, 945, 949, 950, 951, 952, 953, 956, 957, 958, 959, 960, 963, 969, 987, 992, 993, 999, 1037, 1058, 1071, 1084, 1124, 1127, 1144, 1234, 1263, 1268, 1324, 1325, 1326, 1339, 1340, 1364, 1367, 1375, 1376, 1381, 1385, 1389, 1400, 1405, 1410, 1411, 1412, 1413, 1414, 1415, 1427, 1428, 1431], "name_gener": [319, 355], "named_agg": [334, 963], "named_bi": [242, 355, 907, 987], "named_expr": [293, 294, 329, 330, 355, 764, 845, 849, 937, 938, 956, 957, 987], "named_fram": [1413, 1428], "nameless": 136, "namespac": [1, 152, 191, 193, 194, 195, 199, 354, 355, 358, 365, 760, 846, 866, 879, 985, 986, 991, 1400, 1405, 1431], "namespaceinfo": [193, 203], "nan": [136, 181, 209, 225, 226, 232, 233, 313, 314, 355, 466, 467, 515, 516, 525, 526, 536, 538, 546, 549, 556, 557, 558, 559, 563, 611, 614, 632, 646, 647, 648, 649, 676, 702, 773, 796, 867, 897, 898, 902, 903, 987, 1005, 1009, 1088, 1089, 1154, 1155, 1176, 1184, 1185, 1251, 1252, 1277, 1307, 1380, 1381, 1400, 1431], "nan_as_nul": 209, "nan_max": [867, 1400], "nan_min": [867, 1400], "nan_to_nul": [136, 355, 987, 1400], "nana": 1423, "nanmax": [646, 647, 867, 1251, 1252, 1400], "nanosecond": [55, 89, 243, 258, 287, 325, 355, 491, 496, 497, 507, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 808, 809, 810, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1123, 1133, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "nans_equ": [549, 867, 1176, 1400], "nansum": [676, 867, 1277, 1400], "nativ": [11, 39, 150, 152, 155, 156, 158, 162, 167, 201, 255, 263, 289, 290, 309, 313, 341, 355, 613, 827, 828, 846, 867, 873, 945, 970, 987, 991, 1242, 1380, 1400, 1404, 1428, 1431], "natur": [609, 867, 1239, 1400, 1416, 1422], "ndarrai": [135, 207, 234, 283, 313, 355, 534, 697, 867, 904, 932, 987, 995, 1161, 1298, 1299, 1380, 1400], "ndjson": [50, 160, 987], "ne": [649, 867, 1254, 1400], "ne_miss": [234, 283, 355, 867, 904, 932, 987, 1143, 1400], "nearest": [59, 221, 258, 281, 347, 355, 449, 530, 546, 662, 685, 686, 694, 839, 867, 894, 913, 930, 976, 987, 1069, 1085, 1159, 1173, 1264, 1286, 1287, 1400, 1422], "nearest_pow2": 59, "necessari": [38, 39, 48, 56, 98, 155, 167, 313, 355, 987, 1380, 1400], "need": [52, 53, 54, 65, 100, 109, 138, 150, 151, 153, 162, 165, 168, 170, 205, 243, 287, 290, 299, 355, 358, 604, 674, 700, 735, 736, 737, 810, 838, 841, 858, 867, 908, 935, 987, 993, 1304, 1339, 1340, 1341, 1357, 1400, 1405, 1431], "neg": [14, 71, 72, 73, 74, 150, 151, 156, 158, 162, 172, 245, 261, 287, 298, 300, 306, 332, 355, 415, 549, 597, 598, 658, 659, 674, 699, 706, 726, 739, 750, 867, 882, 935, 941, 943, 959, 960, 987, 993, 1032, 1169, 1176, 1195, 1227, 1228, 1261, 1303, 1311, 1330, 1343, 1354, 1371, 1400], "negat": [651, 867, 1256, 1400], "neither": [138, 155, 161, 291, 355, 420, 604, 1037, 1234], "nest": [56, 138, 146, 182, 183, 229, 355, 879, 993, 1145, 1400, 1428, 1431], "nesting_level": 182, "net": [721, 1325], "netherland": [258, 355, 913, 987], "netsuite_format": 198, "never": [38, 48, 152, 257, 258, 262, 288, 355, 912, 913, 987], "new": [39, 40, 41, 42, 53, 54, 165, 205, 210, 211, 237, 247, 248, 263, 275, 276, 279, 284, 319, 321, 323, 324, 329, 330, 355, 380, 472, 523, 533, 535, 546, 638, 639, 654, 668, 669, 673, 732, 735, 736, 741, 742, 760, 762, 863, 867, 879, 882, 906, 933, 951, 953, 956, 957, 970, 987, 997, 999, 1094, 1151, 1162, 1207, 1255, 1268, 1270, 1271, 1275, 1339, 1340, 1345, 1346, 1364, 1367, 1376, 1400, 1428, 1430], "new_column": [150, 151, 155, 165], "new_dai": 494, "new_dat": 491, "new_df": [324, 355, 953, 987], "new_fil": [36, 38, 43, 44, 47, 355], "new_from_index": 1400, "new_id": [319, 355], "new_lf": [953, 987], "new_tabl": 1430, "new_valu": [800, 801, 814, 840], "new_york": 808, "newli": 57, "newlin": [46, 150, 151, 160, 165, 169, 355], "next": [19, 59, 243, 258, 287, 325, 355, 423, 468, 491, 496, 509, 664, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1040, 1090, 1117, 1122, 1135, 1265, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "next_batch": 151, "next_pow2": 59, "nfc": [732, 1336, 1423], "nfd": [732, 1336, 1423], "nfkc": [732, 1336, 1423], "nfkd": [732, 1336, 1423], "nfruit": 750, "nl": [468, 480, 791, 1090, 1102], "nnel_id": 138, "no1": 993, "no_default": [238, 355, 668, 669, 737, 867, 1270, 1271, 1341, 1400], "no_optim": [63, 889, 918, 929, 987], "nodataerror": [150, 151, 155, 161, 165], "nodd": [720, 1324], "node": [885, 889, 910, 918, 923, 929, 933, 987], "nodefault": [238, 355, 668, 669, 737, 867, 1270, 1271, 1341, 1400], "non": [4, 5, 38, 40, 41, 48, 57, 72, 73, 136, 147, 172, 213, 220, 256, 270, 287, 293, 294, 298, 318, 319, 322, 324, 329, 330, 355, 381, 383, 423, 440, 441, 445, 450, 454, 455, 468, 495, 532, 548, 549, 566, 567, 601, 619, 654, 655, 660, 664, 668, 669, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 714, 721, 728, 730, 735, 736, 737, 753, 757, 759, 764, 766, 771, 772, 777, 781, 782, 783, 784, 792, 793, 794, 795, 797, 799, 803, 810, 830, 832, 835, 842, 843, 845, 849, 850, 851, 867, 884, 893, 923, 935, 937, 938, 941, 949, 952, 953, 956, 957, 987, 993, 1000, 1001, 1015, 1016, 1035, 1040, 1057, 1058, 1063, 1072, 1077, 1078, 1085, 1090, 1121, 1160, 1175, 1176, 1196, 1197, 1231, 1234, 1242, 1258, 1262, 1270, 1271, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1303, 1318, 1325, 1334, 1339, 1340, 1361, 1363, 1370, 1380, 1384, 1385, 1389, 1400, 1420, 1428], "non_exist": [495, 1121], "non_numer": [38, 48, 355, 987], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 66, 69, 72, 73, 74, 75, 76, 84, 88, 97, 98, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 195, 196, 197, 199, 200, 201, 205, 207, 208, 211, 215, 220, 221, 225, 226, 232, 233, 234, 236, 238, 241, 243, 244, 249, 253, 257, 258, 260, 262, 263, 267, 270, 275, 276, 279, 283, 287, 288, 291, 295, 298, 300, 301, 307, 308, 310, 312, 313, 314, 317, 319, 320, 321, 322, 323, 324, 325, 336, 340, 355, 381, 383, 384, 396, 397, 398, 405, 406, 420, 423, 443, 445, 446, 447, 450, 454, 455, 456, 459, 461, 466, 467, 475, 491, 494, 495, 501, 516, 517, 518, 519, 520, 521, 524, 525, 526, 532, 539, 540, 542, 544, 546, 547, 548, 556, 557, 558, 559, 564, 566, 567, 574, 581, 583, 585, 592, 593, 594, 595, 596, 598, 604, 612, 613, 624, 625, 627, 628, 629, 631, 636, 649, 650, 651, 652, 654, 655, 660, 661, 664, 665, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 699, 700, 701, 702, 706, 707, 711, 712, 714, 716, 717, 718, 721, 724, 726, 727, 728, 729, 730, 731, 733, 734, 739, 741, 742, 743, 744, 745, 746, 749, 750, 751, 752, 754, 756, 759, 760, 761, 762, 763, 766, 770, 777, 782, 783, 784, 786, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 835, 840, 841, 842, 843, 849, 850, 851, 853, 854, 855, 857, 867, 887, 888, 890, 893, 894, 897, 898, 900, 902, 903, 904, 908, 911, 912, 913, 916, 918, 923, 926, 931, 932, 935, 939, 941, 942, 943, 944, 950, 951, 952, 953, 958, 961, 962, 965, 969, 970, 979, 980, 987, 992, 993, 995, 996, 1000, 1001, 1003, 1010, 1011, 1015, 1016, 1023, 1024, 1037, 1040, 1048, 1053, 1056, 1060, 1063, 1064, 1065, 1071, 1072, 1077, 1078, 1084, 1085, 1087, 1088, 1089, 1097, 1105, 1106, 1107, 1111, 1120, 1121, 1127, 1141, 1143, 1146, 1147, 1148, 1149, 1153, 1154, 1155, 1157, 1160, 1166, 1168, 1170, 1172, 1173, 1174, 1175, 1181, 1186, 1187, 1190, 1191, 1192, 1194, 1196, 1197, 1200, 1204, 1211, 1213, 1215, 1222, 1223, 1224, 1225, 1226, 1228, 1234, 1242, 1243, 1244, 1245, 1246, 1254, 1257, 1262, 1263, 1264, 1265, 1270, 1271, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1303, 1306, 1307, 1310, 1311, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1325, 1328, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1363, 1366, 1370, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1382, 1389, 1390, 1400, 1409, 1411, 1412, 1413, 1415, 1418, 1420, 1423, 1424, 1428], "nonexist": [495, 1121], "nor": [155, 161, 291, 355], "normal": [40, 146, 243, 355, 514, 561, 675, 679, 688, 692, 705, 777, 867, 908, 987, 993, 1141, 1191, 1276, 1310, 1389, 1400, 1421], "normalised_scor": 152, "norowsreturnederror": [288, 355], "north": 75, "not_": [329, 355, 857, 867, 956, 987, 993, 1400], "not_c": [329, 355, 956, 987], "notabl": 152, "notat": [12, 38, 41, 355], "note": [4, 11, 21, 40, 41, 47, 52, 53, 54, 56, 57, 64, 65, 71, 72, 74, 89, 97, 98, 131, 132, 133, 135, 137, 138, 146, 150, 151, 152, 153, 154, 155, 159, 160, 161, 165, 166, 167, 169, 171, 174, 176, 179, 181, 185, 187, 205, 209, 217, 219, 221, 222, 225, 226, 229, 232, 233, 234, 243, 244, 253, 254, 255, 257, 258, 263, 271, 275, 278, 279, 283, 284, 287, 288, 289, 290, 295, 298, 302, 309, 312, 314, 317, 319, 320, 322, 324, 325, 329, 331, 332, 355, 365, 415, 428, 443, 445, 446, 447, 450, 458, 459, 463, 466, 467, 473, 488, 489, 491, 496, 501, 509, 518, 525, 526, 531, 533, 540, 548, 549, 556, 557, 566, 567, 575, 579, 597, 601, 612, 613, 627, 628, 636, 639, 641, 643, 660, 668, 669, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 699, 701, 705, 711, 712, 713, 719, 720, 721, 722, 723, 724, 725, 726, 730, 731, 735, 736, 737, 739, 744, 745, 746, 749, 750, 757, 759, 760, 766, 773, 782, 784, 791, 800, 805, 806, 808, 809, 810, 814, 824, 826, 827, 828, 838, 840, 841, 846, 850, 854, 855, 857, 858, 863, 867, 878, 882, 890, 894, 895, 897, 898, 902, 903, 904, 908, 913, 918, 924, 932, 933, 935, 939, 941, 942, 944, 945, 950, 952, 953, 956, 959, 960, 987, 991, 993, 1015, 1016, 1032, 1035, 1045, 1063, 1064, 1072, 1081, 1082, 1085, 1088, 1089, 1095, 1114, 1115, 1117, 1122, 1127, 1135, 1145, 1147, 1154, 1155, 1168, 1175, 1176, 1196, 1197, 1205, 1209, 1227, 1231, 1242, 1262, 1270, 1271, 1275, 1279, 1281, 1283, 1285, 1287, 1288, 1290, 1292, 1294, 1298, 1300, 1303, 1305, 1310, 1315, 1316, 1317, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1334, 1335, 1339, 1340, 1341, 1343, 1348, 1349, 1350, 1353, 1354, 1361, 1363, 1370, 1381, 1383, 1400, 1409, 1410, 1414, 1415, 1423, 1426, 1428], "noth": [21, 720, 729, 1324, 1333], "notic": [152, 234, 355, 904, 987, 1400], "notimplementederror": [10, 209], "now": [57, 69, 150, 155, 287, 313, 355, 468, 621, 753, 791, 935, 987, 1090, 1357, 1380, 1400], "np": [96, 135, 207, 211, 234, 283, 313, 355, 534, 612, 697, 867, 904, 932, 987, 995, 1161, 1179, 1182, 1184, 1185, 1298, 1299, 1400], "npt": [207, 995], "nr": [338, 349, 967, 978], "nth": [237, 355, 535, 742, 863, 867, 906, 987, 1162, 1346, 1400], "nthe": [720, 1324], "nthose": [720, 1324], "nu": 717, "null": [17, 38, 40, 47, 48, 51, 57, 65, 72, 133, 134, 137, 146, 150, 151, 160, 162, 165, 169, 170, 171, 178, 181, 185, 209, 213, 214, 215, 220, 221, 225, 226, 228, 232, 233, 234, 236, 249, 257, 262, 264, 267, 268, 269, 276, 279, 281, 283, 298, 301, 303, 304, 305, 308, 310, 313, 314, 318, 321, 324, 326, 336, 355, 373, 381, 383, 384, 394, 397, 398, 401, 405, 406, 415, 416, 423, 425, 428, 440, 441, 442, 443, 445, 446, 447, 450, 454, 455, 456, 459, 464, 466, 467, 491, 494, 495, 502, 503, 504, 505, 506, 507, 508, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 532, 539, 544, 546, 547, 553, 556, 557, 558, 559, 564, 566, 567, 571, 573, 574, 578, 579, 581, 583, 584, 585, 593, 594, 595, 596, 597, 599, 601, 613, 636, 649, 650, 651, 652, 654, 655, 660, 664, 665, 669, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 699, 700, 702, 707, 708, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 728, 729, 730, 731, 733, 734, 739, 741, 742, 743, 749, 750, 752, 754, 759, 760, 761, 762, 763, 766, 770, 771, 772, 781, 782, 783, 784, 789, 792, 793, 794, 795, 797, 799, 803, 807, 812, 823, 826, 830, 832, 835, 842, 843, 849, 850, 851, 857, 867, 884, 887, 893, 894, 897, 898, 902, 903, 904, 911, 912, 919, 926, 932, 941, 944, 949, 951, 953, 958, 965, 987, 993, 1000, 1001, 1012, 1015, 1016, 1019, 1023, 1024, 1032, 1033, 1035, 1040, 1042, 1045, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1071, 1072, 1077, 1078, 1086, 1088, 1089, 1120, 1121, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1143, 1144, 1146, 1147, 1148, 1149, 1153, 1154, 1155, 1156, 1160, 1166, 1167, 1172, 1173, 1174, 1181, 1186, 1187, 1188, 1194, 1196, 1197, 1200, 1201, 1203, 1204, 1208, 1209, 1211, 1213, 1214, 1215, 1224, 1226, 1227, 1229, 1231, 1234, 1242, 1254, 1257, 1258, 1262, 1271, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1303, 1307, 1312, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1328, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1343, 1345, 1346, 1347, 1353, 1354, 1356, 1358, 1363, 1366, 1370, 1375, 1377, 1380, 1381, 1382, 1384, 1385, 1400, 1412, 1416, 1418, 1420, 1423, 1424, 1426, 1428, 1429, 1431], "null_behavior": [464, 573, 867, 1086, 1203, 1400], "null_count": [47, 51, 221, 226, 355, 460, 867, 894, 987, 1083, 1085, 1400], "null_equ": [228, 355, 1144, 1400], "null_on_oob": [405, 579, 581, 1023, 1209, 1211], "null_prob": [178, 181, 185], "null_valu": [38, 48, 150, 151, 165, 355, 987], "nullabl": [40, 355], "nullbehavior": [464, 573, 867, 1086, 1203, 1400], "nullif": 1421, "nulls_equ": [257, 355, 401, 553, 571, 867, 912, 987, 1019, 1181, 1201, 1400], "nulls_last": [301, 355, 394, 416, 599, 654, 707, 708, 789, 867, 944, 987, 1012, 1033, 1188, 1229, 1312, 1400], "num": [14, 41, 316, 355, 548, 867, 1175, 1400], "num_list_valu": 373, "num_row": 209, "num_sampl": [824, 825], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 48, 49, 50, 51, 56, 57, 71, 72, 73, 89, 98, 119, 131, 133, 134, 135, 137, 140, 146, 150, 151, 152, 153, 155, 159, 160, 161, 162, 165, 168, 169, 170, 172, 179, 181, 184, 186, 187, 188, 195, 211, 213, 215, 220, 229, 230, 233, 241, 245, 246, 255, 256, 261, 274, 275, 287, 291, 298, 303, 306, 318, 323, 326, 328, 336, 338, 340, 349, 355, 373, 395, 408, 413, 415, 420, 423, 428, 432, 433, 434, 435, 437, 438, 440, 441, 446, 454, 460, 461, 464, 468, 471, 479, 482, 484, 486, 487, 497, 510, 511, 513, 517, 518, 519, 520, 524, 526, 532, 541, 556, 557, 564, 565, 573, 582, 585, 590, 592, 597, 600, 602, 604, 606, 654, 658, 661, 664, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 710, 726, 730, 731, 735, 739, 741, 742, 750, 753, 767, 771, 772, 778, 791, 796, 797, 798, 810, 818, 823, 824, 825, 842, 843, 848, 852, 856, 867, 884, 887, 893, 901, 903, 909, 917, 929, 941, 946, 948, 949, 954, 955, 965, 967, 969, 978, 987, 992, 1026, 1030, 1032, 1037, 1040, 1045, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1058, 1064, 1071, 1077, 1083, 1084, 1086, 1090, 1093, 1101, 1104, 1109, 1112, 1113, 1123, 1136, 1137, 1139, 1145, 1146, 1147, 1148, 1149, 1153, 1155, 1160, 1169, 1194, 1195, 1203, 1212, 1215, 1220, 1222, 1227, 1232, 1234, 1248, 1249, 1263, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1303, 1306, 1314, 1330, 1332, 1334, 1335, 1339, 1343, 1345, 1346, 1354, 1357, 1371, 1384, 1385, 1390, 1400, 1416, 1419, 1422, 1431], "number_of_two": [402, 572], "numbers_decim": 753, "numer": [11, 17, 38, 41, 48, 154, 166, 214, 223, 258, 313, 314, 322, 323, 355, 373, 378, 428, 442, 450, 531, 548, 609, 633, 635, 659, 667, 700, 702, 722, 759, 765, 773, 824, 867, 879, 886, 896, 913, 952, 987, 993, 1045, 1059, 1072, 1085, 1175, 1269, 1304, 1307, 1326, 1363, 1380, 1400, 1422, 1431], "numeric_dtyp": 1431, "numeric_to_on": 373, "numericliter": [450, 824, 825, 867, 1072, 1400], "numpi": [96, 104, 135, 173, 207, 211, 219, 255, 289, 290, 309, 313, 314, 355, 549, 612, 646, 647, 676, 867, 987, 995, 1176, 1179, 1182, 1184, 1185, 1251, 1252, 1277, 1380, 1381, 1400], "nworld": 744, "o": [156, 168, 429, 440, 441, 460, 719, 771, 772, 867, 1046, 1057, 1058, 1083, 1323, 1348, 1384, 1385, 1400, 1413], "oauth": 167, "obj": 993, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 65, 88, 107, 131, 132, 133, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 179, 181, 182, 208, 209, 211, 217, 222, 229, 242, 243, 258, 260, 287, 290, 295, 302, 312, 313, 314, 355, 373, 463, 627, 805, 806, 808, 809, 826, 846, 854, 855, 867, 879, 889, 895, 900, 908, 913, 916, 929, 935, 942, 945, 984, 987, 993, 996, 1145, 1374, 1400, 1410, 1412, 1415, 1428, 1430], "observ": [257, 355, 461, 517, 518, 519, 520, 661, 867, 912, 987, 1084, 1146, 1147, 1148, 1149, 1263, 1400], "obvious": 762, "occur": [41, 63, 105, 114, 120, 259, 355, 402, 572, 634, 664, 867, 889, 900, 914, 929, 942, 987, 1020, 1202, 1247, 1265, 1380, 1400], "occurr": [542, 544, 552, 555, 777, 867, 1170, 1172, 1180, 1183, 1389, 1400], "oct": 1423, "octet_length": 1421, "octob": [501, 1127, 1423], "od": [161, 879], "odbc": [39, 152, 355], "odd": 720, "odi": [723, 725, 1329], "off": [63, 64, 150, 151, 165, 257, 258, 355, 468, 480, 791, 889, 890, 900, 912, 913, 918, 929, 942, 987, 1090, 1102], "offer": [278, 355, 658, 867, 927, 987, 1424, 1428], "offic": [41, 355], "offset": [74, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 237, 243, 287, 300, 331, 332, 355, 468, 469, 477, 488, 489, 491, 496, 509, 535, 580, 598, 674, 706, 724, 725, 739, 752, 844, 867, 906, 908, 935, 943, 959, 960, 987, 1090, 1091, 1099, 1114, 1115, 1117, 1122, 1135, 1162, 1210, 1228, 1311, 1328, 1329, 1343, 1356, 1400, 1427], "offset_bi": 810, "often": [153, 205, 243, 287, 355, 402, 572, 667, 674, 867, 908, 935, 987, 1020, 1202, 1269, 1400, 1415, 1428], "ok": 604, "old": [40, 284, 355, 668, 669, 867, 933, 987, 1270, 1271, 1400], "old_tabl": 1430, "older": [47, 51, 355, 987], "oldw": 745, "omit": [28, 41, 134, 138, 155, 161, 179, 205, 275, 290, 312, 317, 355, 805, 808, 820, 821, 854, 855, 993, 1429, 1430], "onc": [63, 130, 150, 151, 187, 211, 263, 289, 291, 334, 355, 592, 613, 696, 747, 748, 867, 885, 963, 987, 1222, 1242, 1297, 1351, 1352, 1400, 1413], "one": [21, 38, 39, 41, 48, 57, 65, 111, 131, 133, 134, 135, 136, 137, 150, 151, 155, 159, 160, 161, 162, 165, 169, 170, 184, 186, 205, 214, 222, 225, 226, 233, 241, 242, 243, 255, 257, 259, 260, 270, 279, 287, 288, 289, 295, 298, 313, 316, 322, 335, 355, 379, 415, 461, 463, 526, 527, 531, 534, 537, 539, 597, 604, 609, 627, 654, 673, 674, 699, 707, 720, 721, 722, 737, 760, 792, 796, 798, 805, 808, 828, 844, 847, 857, 863, 867, 886, 895, 897, 898, 903, 904, 907, 908, 912, 914, 923, 931, 935, 939, 941, 952, 958, 964, 987, 1002, 1032, 1037, 1084, 1155, 1166, 1167, 1227, 1234, 1239, 1263, 1275, 1303, 1324, 1325, 1326, 1341, 1364, 1380, 1400, 1415, 1416, 1418, 1422, 1423, 1430], "oneormoredatatyp": [41, 179, 355], "ones": [678, 680, 682, 684, 686, 689, 691, 693, 867, 993, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "onf": [739, 1343], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 48, 56, 57, 62, 63, 65, 98, 130, 132, 145, 147, 150, 151, 152, 153, 155, 156, 158, 160, 162, 165, 168, 169, 170, 171, 174, 175, 176, 177, 181, 185, 195, 205, 225, 226, 229, 231, 234, 243, 244, 255, 258, 259, 262, 263, 279, 287, 289, 290, 309, 311, 312, 313, 324, 325, 341, 355, 379, 381, 383, 395, 449, 450, 463, 468, 480, 491, 499, 501, 521, 530, 540, 613, 620, 621, 639, 641, 643, 654, 666, 713, 723, 725, 737, 775, 791, 827, 828, 867, 892, 895, 897, 898, 899, 908, 913, 914, 928, 935, 936, 942, 953, 955, 970, 987, 993, 1000, 1001, 1002, 1069, 1072, 1090, 1102, 1117, 1127, 1145, 1152, 1159, 1168, 1242, 1267, 1317, 1327, 1329, 1341, 1374, 1377, 1380, 1400, 1409, 1412, 1428, 1429, 1431], "onlin": [231, 355, 1152, 1400], "ont": [723, 725, 1327, 1329], "onto": 181, "oof": [738, 1342, 1418, 1423], "op": [21, 150, 151, 185, 284, 355, 620, 667, 700, 867, 916, 933, 987, 1269, 1400], "opac": [355, 358, 1400, 1405], "opaqu": 970, "open": [41, 53, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 355, 463, 867, 895, 987], "openoffic": 161, "openpyxl": [155, 173], "oper": [4, 41, 56, 65, 98, 107, 110, 117, 124, 131, 133, 134, 135, 136, 137, 147, 152, 216, 231, 234, 236, 242, 248, 259, 260, 263, 271, 275, 277, 278, 279, 282, 283, 285, 287, 290, 291, 296, 298, 307, 313, 314, 319, 322, 323, 333, 334, 355, 378, 379, 382, 415, 455, 456, 457, 458, 459, 460, 515, 516, 531, 533, 536, 538, 563, 592, 593, 594, 595, 596, 597, 611, 612, 630, 633, 635, 636, 637, 648, 649, 650, 653, 654, 659, 666, 696, 699, 700, 765, 773, 780, 781, 783, 794, 795, 799, 811, 827, 828, 846, 867, 879, 888, 892, 894, 899, 904, 907, 912, 914, 923, 924, 932, 936, 940, 941, 945, 952, 955, 963, 987, 1032, 1073, 1078, 1079, 1080, 1081, 1082, 1083, 1142, 1143, 1152, 1163, 1165, 1193, 1222, 1223, 1224, 1225, 1226, 1227, 1241, 1253, 1254, 1267, 1297, 1303, 1339, 1374, 1379, 1380, 1381, 1400, 1419, 1427, 1428], "operand": [773, 867], "opp": 993, "oppos": 791, "opposit": [298, 355, 415, 597, 699, 867, 941, 987, 1032, 1227, 1303, 1400], "opt": [317, 355], "optim": [48, 49, 50, 51, 63, 64, 130, 150, 156, 160, 162, 165, 167, 168, 169, 170, 255, 260, 278, 282, 289, 320, 355, 612, 827, 828, 867, 885, 889, 890, 900, 918, 929, 942, 950, 959, 960, 961, 970, 987, 1068, 1298, 1400], "optimis": [152, 263, 290, 341, 355, 987, 991, 1242, 1300, 1400, 1431], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 57, 63, 64, 73, 75, 141, 150, 152, 153, 154, 155, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 171, 173, 178, 179, 180, 181, 184, 185, 186, 195, 196, 222, 238, 243, 253, 258, 264, 270, 295, 302, 308, 319, 322, 324, 355, 428, 463, 468, 561, 620, 621, 627, 654, 675, 676, 677, 679, 681, 683, 685, 688, 690, 692, 705, 713, 723, 725, 728, 737, 739, 753, 777, 849, 857, 867, 879, 889, 890, 895, 900, 908, 912, 913, 919, 923, 929, 939, 942, 945, 952, 953, 962, 987, 993, 1045, 1090, 1191, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1310, 1317, 1327, 1329, 1341, 1343, 1376, 1389, 1400, 1418, 1423, 1430], "optional_memb": [553, 867, 1181, 1400], "or_": 867, "oracl": 153, "orang": [218, 336, 337, 339, 340, 342, 343, 345, 347, 348, 355, 441, 772, 867, 965, 966, 968, 969, 971, 972, 974, 976, 977, 1423], "orc": 198, "order": [11, 41, 48, 49, 50, 51, 54, 57, 63, 69, 134, 150, 152, 165, 172, 174, 175, 176, 177, 213, 217, 218, 225, 226, 227, 234, 242, 243, 257, 259, 271, 277, 278, 279, 283, 287, 289, 291, 292, 296, 301, 312, 313, 318, 320, 324, 325, 355, 394, 416, 421, 440, 441, 466, 467, 527, 574, 592, 599, 605, 654, 659, 664, 674, 696, 697, 698, 707, 708, 738, 745, 746, 747, 748, 762, 771, 772, 774, 775, 777, 789, 846, 857, 867, 878, 884, 892, 897, 898, 899, 904, 907, 908, 912, 914, 923, 924, 932, 935, 936, 940, 944, 945, 949, 950, 953, 987, 991, 992, 993, 1012, 1033, 1038, 1057, 1058, 1067, 1088, 1089, 1156, 1188, 1204, 1222, 1229, 1235, 1261, 1265, 1273, 1297, 1299, 1301, 1312, 1342, 1367, 1384, 1385, 1386, 1387, 1389, 1400, 1409, 1412, 1418, 1427, 1428, 1431], "order_bi": [654, 867], "ordin": [492, 664, 867, 1118, 1265, 1400, 1429], "ordinal_dai": [476, 511], "org": [21, 43, 44, 132, 152, 153, 156, 158, 207, 208, 209, 219, 355, 628, 732, 942, 987, 995, 996, 1336], "orient": [58, 60, 105, 135, 137, 275, 355, 987, 1409], "origin": [57, 150, 151, 165, 225, 226, 234, 283, 320, 355, 466, 467, 495, 496, 509, 527, 574, 613, 637, 654, 666, 667, 668, 669, 670, 672, 714, 720, 729, 787, 788, 867, 897, 898, 904, 932, 950, 987, 1088, 1089, 1121, 1122, 1135, 1156, 1204, 1269, 1270, 1271, 1272, 1274, 1318, 1324, 1333, 1400], "orjson": 146, "orld": 1349, "orson": 146, "other": [1, 21, 37, 41, 47, 64, 65, 131, 149, 150, 151, 152, 155, 165, 170, 174, 175, 176, 177, 226, 228, 231, 234, 257, 258, 259, 270, 271, 279, 283, 288, 290, 293, 294, 317, 322, 324, 327, 329, 330, 353, 355, 358, 378, 382, 384, 394, 395, 450, 465, 501, 509, 515, 516, 527, 531, 536, 538, 548, 549, 553, 563, 570, 593, 594, 595, 596, 611, 612, 613, 617, 623, 633, 635, 648, 649, 653, 668, 669, 701, 708, 737, 764, 765, 770, 773, 780, 782, 784, 789, 792, 793, 794, 795, 803, 810, 827, 828, 830, 832, 835, 845, 849, 851, 867, 879, 882, 890, 904, 912, 913, 914, 918, 923, 924, 931, 932, 937, 938, 942, 952, 953, 956, 957, 958, 987, 993, 1002, 1072, 1087, 1127, 1135, 1142, 1143, 1144, 1152, 1163, 1165, 1176, 1181, 1193, 1200, 1223, 1224, 1225, 1226, 1241, 1242, 1253, 1254, 1270, 1271, 1382, 1391, 1399, 1400, 1405, 1415, 1428], "other_df": [257, 355], "other_lf": [912, 987], "otherwis": [39, 150, 152, 155, 162, 168, 180, 183, 187, 238, 263, 271, 290, 293, 312, 317, 341, 355, 373, 420, 425, 446, 450, 461, 517, 518, 519, 520, 604, 613, 624, 654, 658, 659, 661, 666, 702, 712, 715, 719, 724, 726, 731, 735, 736, 739, 750, 777, 781, 810, 813, 822, 827, 828, 857, 867, 924, 937, 970, 987, 992, 1037, 1042, 1064, 1072, 1084, 1146, 1147, 1148, 1149, 1234, 1242, 1261, 1263, 1267, 1298, 1300, 1307, 1316, 1319, 1323, 1328, 1330, 1335, 1339, 1340, 1343, 1354, 1389, 1400, 1420], "our": 210, "out": [8, 15, 39, 48, 49, 50, 51, 52, 53, 54, 112, 138, 141, 170, 173, 181, 185, 234, 287, 290, 355, 405, 425, 579, 581, 712, 715, 724, 857, 904, 935, 987, 1023, 1042, 1209, 1211, 1316, 1319, 1328, 1426], "outcom": [654, 867], "outer": [57, 324, 355, 953, 987], "outermost": 56, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 131, 136, 213, 221, 255, 262, 263, 268, 271, 277, 279, 289, 295, 305, 318, 325, 355, 373, 381, 383, 406, 428, 440, 441, 446, 461, 501, 566, 567, 583, 601, 604, 612, 613, 624, 627, 638, 660, 661, 668, 700, 711, 727, 728, 731, 766, 771, 772, 777, 781, 782, 783, 784, 794, 795, 796, 800, 801, 814, 824, 825, 827, 828, 832, 840, 850, 851, 857, 867, 879, 884, 894, 900, 918, 923, 924, 939, 949, 970, 987, 1000, 1001, 1015, 1016, 1024, 1035, 1045, 1057, 1058, 1064, 1084, 1127, 1196, 1197, 1213, 1231, 1242, 1262, 1263, 1315, 1331, 1335, 1370, 1384, 1385, 1389, 1400], "output_path": [628, 942, 987], "outsid": [55, 167, 170, 450, 867, 1072, 1400], "over": [51, 52, 53, 54, 65, 140, 150, 151, 155, 161, 165, 170, 181, 182, 213, 231, 254, 255, 256, 263, 271, 288, 289, 290, 302, 318, 319, 333, 341, 355, 359, 373, 440, 441, 460, 463, 518, 526, 612, 613, 624, 626, 627, 628, 629, 630, 638, 639, 664, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 771, 772, 800, 801, 814, 827, 828, 840, 846, 867, 884, 889, 900, 924, 929, 942, 945, 949, 962, 970, 984, 987, 993, 1057, 1058, 1083, 1147, 1152, 1242, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1287, 1290, 1291, 1292, 1294, 1384, 1385, 1400, 1428], "overflow": [442, 458, 459, 754, 766, 867, 886, 987, 1059, 1081, 1082, 1358, 1370, 1400], "overhead": [54, 56, 98, 165, 168, 169, 170], "overlap": [714, 721, 723, 725, 1318, 1325, 1327, 1329], "overrid": [1, 38, 41, 48, 131, 133, 134, 135, 136, 137, 150, 152, 153, 155, 159, 160, 161, 167, 169, 178, 179, 185, 187, 355, 987], "overridden": [41, 131, 133, 135, 137, 159, 160, 169, 187, 355, 987], "overview": [355, 373, 867, 879, 987, 1400, 1427, 1431], "overwrit": [15, 39, 40, 42, 51, 54, 131, 133, 134, 135, 137, 141, 146, 150, 151, 159, 160, 165, 169, 209, 324, 355, 380, 764, 867, 953, 987], "overwrite_schema": [40, 355], "ow": 744, "own": [857, 882, 1380, 1400, 1431], "p": [59, 262, 278, 355, 658, 849, 867, 927, 987, 993, 1328, 1330, 1413], "p13dt14h0": 501, "p1dt42": 501, "pa": [40, 131, 171, 355, 846], "pa_tabl": 846, "pacif": [469, 1091], "pack": [275, 355], "packag": [33, 34, 35, 147, 152, 355, 359, 468, 480, 791, 1090, 1102], "pad": [733, 734, 759, 1337, 1338, 1363], "pad_end": [734, 1338], "pad_start": [733, 759, 1337, 1363], "page": [47, 51, 156, 162, 168, 170, 355, 373, 867, 879, 987, 1400, 1427], "pair": [131, 133, 134, 135, 137, 143, 159, 160, 169, 284, 355, 933, 987, 1431], "pairwis": [219, 355], "panda": [39, 132, 136, 146, 173, 234, 243, 283, 314, 320, 322, 355, 488, 489, 770, 846, 867, 904, 908, 932, 950, 952, 987, 1114, 1115, 1381, 1382, 1400, 1410, 1412, 1428], "pandas_df": 1428, "pane": [41, 355], "panic": 113, "pap": 1330, "papa": 726, "papai": [726, 1330], "papaya": [726, 739, 750, 1330, 1343, 1354], "parallel": [63, 65, 140, 153, 162, 170, 243, 258, 260, 278, 294, 330, 355, 575, 777, 857, 867, 908, 912, 913, 938, 957, 970, 987, 1083, 1205, 1389, 1400], "parallelis": [263, 341, 355, 1242, 1400], "parallelstrategi": [162, 170], "param": [41, 131, 133, 134, 135, 137, 150, 151, 159, 160, 165, 169, 180, 181, 185, 288, 355, 987], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 84, 88, 96, 99, 105, 114, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 193, 194, 195, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 268, 270, 271, 274, 275, 277, 278, 279, 281, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 338, 340, 341, 347, 349, 355, 373, 378, 380, 381, 382, 383, 384, 394, 401, 402, 405, 406, 415, 416, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 440, 441, 442, 443, 447, 450, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 470, 472, 473, 478, 480, 491, 494, 495, 496, 497, 498, 500, 501, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 546, 547, 548, 549, 553, 561, 563, 565, 570, 571, 572, 573, 575, 577, 579, 580, 581, 582, 583, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 611, 612, 613, 620, 621, 627, 628, 629, 633, 635, 638, 639, 640, 641, 642, 643, 648, 649, 653, 654, 655, 658, 659, 661, 662, 664, 666, 667, 668, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 759, 760, 762, 764, 765, 767, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 867, 884, 886, 887, 889, 890, 894, 895, 896, 897, 900, 901, 902, 903, 904, 906, 907, 908, 909, 912, 913, 914, 917, 918, 919, 923, 924, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 962, 963, 967, 969, 970, 976, 978, 987, 992, 993, 997, 999, 1000, 1001, 1002, 1012, 1019, 1020, 1023, 1024, 1032, 1033, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1057, 1058, 1059, 1060, 1065, 1071, 1072, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1092, 1094, 1095, 1100, 1102, 1117, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1135, 1138, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1160, 1161, 1162, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1181, 1188, 1191, 1195, 1200, 1201, 1202, 1203, 1205, 1207, 1209, 1210, 1211, 1212, 1213, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1232, 1233, 1234, 1235, 1242, 1254, 1258, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1306, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1336, 1337, 1338, 1339, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1363, 1364, 1367, 1371, 1374, 1375, 1376, 1377, 1378, 1380, 1381, 1384, 1385, 1386, 1389, 1390, 1391, 1400, 1409, 1410, 1411, 1412, 1413, 1415, 1420, 1423, 1428], "parameter": 153, "parameteris": 152, "parametr": 879, "paramount": [918, 987], "parent": [41, 76, 236, 355], "parenthes": 19, "parquet": [47, 51, 52, 53, 54, 162, 163, 164, 170, 198, 355, 879, 987], "parquetcompress": [47, 355], "parquetfieldoverwrit": [51, 987], "parquetmetadata": [47, 51, 355, 987], "pars": [38, 48, 149, 150, 151, 153, 155, 160, 161, 162, 165, 168, 169, 170, 213, 242, 293, 294, 298, 301, 318, 329, 330, 334, 355, 441, 450, 548, 654, 668, 669, 708, 728, 737, 754, 764, 772, 782, 784, 789, 792, 793, 794, 795, 803, 816, 830, 832, 835, 845, 847, 849, 851, 857, 867, 884, 907, 937, 938, 941, 944, 949, 956, 957, 963, 987, 1058, 1072, 1175, 1270, 1271, 1303, 1332, 1357, 1358, 1385, 1400, 1409], "parseerror": [754, 1358], "parser": [150, 155], "part": [54, 131, 155, 205, 210, 312, 317, 355, 654, 721, 741, 742, 867, 958, 987, 997, 1325, 1345, 1346, 1423, 1424], "part_idx": 144, "parti": [612, 867], "partial": [134, 150, 165, 355, 987], "particip": [41, 355], "particular": [40, 150, 155, 156, 158, 213, 229, 318, 355, 440, 441, 771, 772, 867, 884, 949, 987, 1057, 1058, 1145, 1384, 1385, 1400], "partit": [47, 52, 53, 54, 153, 162, 166, 168, 170, 171, 256, 277, 355, 654, 867, 879], "partition_bi": [47, 151, 256, 355, 654, 867], "partition_chunk_size_byt": [47, 355], "partition_col": [47, 153, 355], "partition_df": 151, "partition_index": 197, "partition_num": 153, "partition_on": 153, "partition_rang": 153, "partitionbykei": [53, 54, 143, 144], "partitioned_object": [47, 355], "partitioningschem": [48, 49, 50, 51, 987], "partitionmax": 53, "partitionmaxs": [52, 54, 142], "partitionpart": [52, 53, 143, 144], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 48, 49, 50, 51, 57, 63, 64, 69, 105, 130, 131, 133, 146, 147, 149, 152, 153, 155, 162, 165, 168, 170, 171, 174, 176, 179, 181, 183, 185, 213, 219, 223, 242, 243, 245, 258, 261, 262, 277, 278, 279, 284, 287, 293, 298, 301, 306, 314, 317, 318, 325, 329, 334, 355, 415, 441, 468, 478, 480, 491, 495, 501, 524, 545, 597, 612, 613, 628, 654, 658, 668, 669, 674, 699, 708, 737, 744, 745, 746, 753, 772, 781, 789, 791, 816, 827, 828, 849, 857, 863, 867, 884, 889, 890, 896, 900, 907, 908, 910, 913, 918, 927, 929, 933, 935, 937, 941, 942, 944, 949, 956, 962, 963, 970, 987, 992, 1032, 1058, 1090, 1100, 1102, 1121, 1127, 1153, 1169, 1195, 1227, 1242, 1270, 1271, 1303, 1341, 1348, 1349, 1350, 1357, 1371, 1381, 1385, 1400, 1413, 1428], "pass_nam": [613, 867], "pass_name_to_appli": [147, 867], "password": [150, 153, 156, 158], "past": [37, 355, 918, 987], "pat": [724, 1328], "patch": 75, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 142, 144, 147, 148, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 222, 295, 355, 463, 627, 628, 631, 698, 867, 895, 939, 942, 987, 991, 1301, 1333, 1400, 1431], "pathlib": [36, 38, 43, 44, 47, 165, 355], "pattern": [101, 150, 151, 155, 156, 160, 162, 165, 168, 169, 170, 255, 355, 443, 447, 622, 712, 713, 714, 717, 720, 721, 722, 723, 724, 725, 735, 736, 737, 743, 882, 970, 993, 1060, 1065, 1298, 1300, 1316, 1317, 1318, 1321, 1324, 1325, 1326, 1327, 1328, 1329, 1339, 1340, 1341, 1347, 1400, 1423], "paya": 750, "pc": [931, 987], "pct": [181, 664, 867], "pct_chang": [867, 1400], "pct_valid": [664, 867], "pd": [132, 136, 770, 846, 867, 1381, 1382, 1400, 1410, 1428], "pd_df": 136, "pd_frame": 846, "pd_seri": 136, "pdsh": [140, 151], "pea": 726, "peak": [289, 355, 656, 657, 867, 1259, 1260, 1400], "peak_max": [867, 1400], "peak_min": [867, 1400], "pear": [726, 739, 750, 1330, 1343, 1354], "pearson": [219, 355, 561, 675, 705, 796, 867, 1191, 1276, 1310, 1400, 1417], "penalti": [749, 751, 752, 1353, 1355, 1356], "per": [15, 38, 41, 48, 147, 155, 179, 181, 213, 241, 264, 275, 276, 279, 294, 301, 318, 330, 344, 346, 347, 355, 405, 441, 575, 577, 579, 581, 613, 708, 772, 777, 789, 867, 884, 919, 938, 944, 949, 957, 973, 975, 976, 987, 1023, 1058, 1205, 1209, 1211, 1385, 1389, 1400], "per_partition_sort_bi": [52, 53, 54], "percent": [655, 867, 1258, 1400], "percentag": [178, 181, 185, 655, 867, 1258, 1400], "percentil": [221, 355, 664, 867, 894, 987, 1085, 1400], "perform": [39, 47, 49, 51, 57, 103, 108, 110, 115, 117, 124, 132, 150, 151, 152, 156, 160, 162, 165, 167, 168, 169, 170, 209, 234, 242, 243, 257, 258, 259, 263, 282, 283, 287, 289, 290, 313, 341, 355, 431, 436, 439, 445, 446, 531, 612, 613, 654, 674, 713, 723, 725, 730, 731, 737, 749, 751, 752, 827, 828, 867, 904, 908, 912, 913, 914, 932, 935, 944, 959, 960, 987, 1048, 1053, 1056, 1063, 1064, 1242, 1317, 1327, 1329, 1334, 1335, 1341, 1353, 1355, 1356, 1380, 1400], "perhap": [319, 355], "period": [150, 151, 165, 243, 287, 355, 496, 517, 519, 520, 655, 674, 805, 806, 808, 809, 854, 855, 867, 908, 935, 987, 1122, 1146, 1148, 1149, 1258, 1400], "persist": 1415, "phase": [39, 323, 355], "philadelphia": [735, 736], "phone": [757, 1361], "physic": [56, 69, 98, 150, 151, 258, 279, 355, 373, 770, 867, 885, 912, 913, 942, 987, 1382, 1400], "pi": [11, 462, 867, 1074, 1076, 1308, 1372, 1400, 1421, 1425], "pick": [182, 857], "pickl": [463, 867, 895, 987], "pip": [468, 480, 791, 1090, 1102], "pipe": [355, 867, 928, 987], "pipe_with_schema": [927, 987], "pipelin": [155, 317, 355], "pitfal": 115, "pivot": [323, 355, 993], "pivot_long": [322, 355, 952, 987], "pivot_wid": [279, 355], "pivotagg": [279, 355], "pixel": [41, 355], "pk": [514, 867, 1141, 1400], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 98, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 187, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 360, 362, 363, 365, 366, 367, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 867, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1400, 1405, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1429, 1431], "pl_frame": 846, "place": [11, 12, 38, 48, 136, 171, 205, 211, 224, 231, 247, 248, 279, 285, 290, 301, 327, 355, 359, 394, 406, 416, 583, 599, 707, 708, 789, 867, 944, 987, 1002, 1012, 1024, 1033, 1152, 1213, 1229, 1266, 1312, 1400], "placehold": 815, "plai": [13, 795], "plain": [900, 931, 987], "plan": [63, 130, 258, 260, 355, 463, 867, 885, 889, 895, 900, 912, 913, 928, 931, 939, 942, 987, 1430], "plan_stag": [942, 987], "plan_typ": [931, 987], "plane": [787, 788], "planner": 728, "planstag": [942, 987], "plantypeprefer": [931, 987], "platform": 173, "ple": 1423, "pleas": [136, 152, 153, 234, 243, 283, 355, 359, 518, 797, 810, 867, 904, 908, 932, 987, 1147, 1400], "plenti": 993, "plot": [355, 929, 942, 987, 1400], "plu": [461, 609, 867, 1084, 1239, 1263, 1400, 1422], "plugin": [0, 867, 879], "plugin_path": 147, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 77, 78, 79, 130, 141, 142, 143, 144, 145, 146, 153, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 225, 232, 243, 259, 260, 264, 302, 312, 317, 324, 355, 358, 359, 367, 368, 373, 449, 460, 461, 466, 468, 480, 496, 497, 525, 530, 531, 542, 556, 557, 592, 613, 661, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 694, 696, 753, 791, 793, 824, 825, 844, 867, 889, 890, 897, 900, 902, 908, 914, 918, 919, 928, 929, 933, 945, 953, 961, 987, 993, 1067, 1069, 1083, 1084, 1088, 1090, 1102, 1122, 1123, 1154, 1159, 1170, 1222, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1295, 1297, 1378, 1383, 1400, 1405, 1428], "pointer": [229, 355, 1145, 1400], "poison": [646, 647, 867, 1251, 1252, 1400], "pola": 355, "polar": [1, 203, 355, 358, 359, 373, 866, 867, 873, 879, 987, 991, 992, 993, 1400, 1404, 1405, 1427, 1428, 1430], "polars_df": 1428, "polars_engine_affin": [48, 49, 50, 51, 63, 64, 889, 890, 900, 929, 942, 987], "polars_file_cache_ttl": [160, 165, 168, 169], "polars_hypothesis_profil": [184, 186], "polars_max_thread": 187, "polars_seri": 1428, "polars_verbos": [889, 900, 929, 942, 987], "polarsdatafram": 209, "polarsdataset": [317, 355], "polarsdatatyp": [66, 76, 84, 150, 151, 165, 178, 179, 180, 181, 182, 185, 214, 263, 312, 317, 355, 428, 442, 521, 612, 613, 668, 669, 728, 800, 801, 812, 814, 826, 827, 828, 838, 840, 841, 858, 863, 867, 886, 987, 993, 1045, 1059, 1242, 1270, 1271, 1332, 1400], "polarsintegertyp": [139, 754, 786, 820, 821, 1358], "polarstemporaltyp": [749, 1353], "polarstyp": 65, "pool": [15, 64, 187, 188, 890, 987], "poor": 152, "pop2": [258, 355, 913, 987], "popul": [258, 355, 913, 987], "port": [39, 150, 152, 153, 156, 158, 355], "pos_a": 1423, "posit": [41, 148, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197, 210, 223, 230, 242, 277, 293, 294, 298, 301, 321, 329, 330, 334, 355, 415, 517, 519, 520, 521, 597, 654, 659, 661, 699, 708, 722, 735, 736, 754, 764, 787, 788, 789, 792, 793, 794, 795, 812, 845, 849, 863, 867, 896, 901, 907, 937, 938, 941, 944, 951, 956, 957, 963, 987, 993, 1032, 1146, 1148, 1149, 1227, 1261, 1263, 1303, 1326, 1358, 1400, 1429], "position": 1400, "possibl": [41, 47, 51, 105, 107, 133, 134, 137, 150, 155, 171, 178, 181, 185, 242, 255, 262, 263, 289, 320, 341, 355, 610, 612, 613, 624, 676, 742, 776, 827, 828, 867, 889, 900, 907, 929, 942, 944, 950, 987, 1242, 1277, 1346, 1400], "post": [57, 75, 931, 987], "postgr": 153, "postgresql": [39, 152, 153, 355, 654, 867, 1426], "potenti": [115, 117, 147, 165, 168, 169, 255, 288, 290, 355, 637, 735, 736, 892, 894, 899, 936, 955, 987, 1339, 1340], "pow": [867, 1400, 1421], "pow_n": 59, "power": [847, 1261, 1400, 1422], "powersofn": 59, "pre": [54, 661, 838, 841, 858, 867, 1263, 1400], "pre_execution_queri": 153, "preced": [181, 993], "precis": [11, 12, 38, 41, 48, 55, 73, 152, 255, 289, 290, 309, 312, 317, 355, 470, 824, 987, 993, 1092, 1357], "pred1": 857, "pred2": 857, "predefin": [279, 355], "predic": [40, 63, 145, 165, 168, 169, 170, 171, 214, 234, 253, 258, 259, 283, 288, 355, 442, 527, 577, 779, 814, 857, 867, 889, 900, 904, 913, 914, 918, 929, 932, 933, 942, 959, 960, 987, 1156, 1207, 1298, 1300, 1400], "predicate_pushdown": [63, 889, 900, 918, 929, 942, 961, 987], "predict": [282, 325, 355], "prefer": [150, 151, 155, 156, 160, 162, 165, 186, 213, 231, 255, 262, 263, 288, 289, 318, 341, 355, 440, 441, 521, 613, 660, 766, 771, 772, 850, 857, 867, 884, 949, 987, 991, 993, 1057, 1058, 1152, 1242, 1262, 1370, 1384, 1385, 1400, 1410, 1431], "prefilt": 170, "prefix": [40, 150, 151, 165, 205, 355, 380, 430, 447, 501, 622, 638, 641, 642, 644, 645, 743, 746, 747, 759, 867, 993, 1047, 1065, 1347, 1351, 1363], "prefix_": 641, "prefix_a": 641, "prefix_b": 641, "prefix_field": [639, 643], "presenc": [813, 822, 993], "present": [134, 181, 238, 355, 553, 628, 745, 746, 857, 867, 942, 987], "preserv": [41, 225, 226, 234, 242, 257, 259, 263, 283, 313, 314, 324, 355, 466, 467, 468, 488, 489, 527, 574, 654, 668, 702, 719, 867, 897, 898, 904, 912, 914, 932, 953, 987, 1088, 1089, 1090, 1156, 1204, 1270, 1307, 1323, 1381, 1400], "pressur": [51, 150, 151, 160, 162, 165, 169, 170, 700, 867, 987, 1304, 1400], "presum": [612, 867], "prev_pow2": 59, "prevent": [313, 355, 380, 458, 459, 637, 766, 867, 987, 1081, 1082, 1370, 1400], "preview": [241, 355], "previou": [54, 59, 205, 355, 358, 468, 655, 762, 867, 1090, 1258, 1400, 1405], "previous": [2, 3], "price": [355, 358, 1431], "primari": [155, 991, 1428, 1431], "primarili": [1, 882], "primit": [40, 355, 553, 867], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 151, 173, 174, 176, 227, 241, 242, 256, 260, 311, 333, 355, 367, 545, 629, 805, 808, 867, 889, 910, 987, 993, 1181, 1377, 1400, 1431], "print_and_return": 367, "prior": [136, 355, 358, 1400, 1405], "prioriti": 182, "probabl": [514, 661, 867, 1141, 1263, 1400], "process": [15, 38, 48, 49, 50, 51, 63, 64, 150, 151, 152, 165, 187, 289, 355, 889, 890, 900, 929, 942, 987], "process_index": [312, 355], "produc": [2, 3, 96, 145, 181, 185, 214, 257, 355, 402, 442, 572, 624, 824, 827, 867, 912, 918, 987, 1020, 1202], "product": [57, 219, 257, 355, 458, 465, 867, 912, 987, 1081, 1087, 1400], "profil": [33, 184, 186, 889, 987], "profile_nam": 33, "programmat": [221, 355, 894, 987], "progress": [73, 79], "project": [63, 145, 165, 167, 168, 169, 170, 707, 708, 867, 889, 900, 918, 929, 933, 942, 987], "projection_pushdown": [63, 889, 900, 918, 929, 942, 961, 987], "prompt": 138, "propag": [401, 406, 516, 553, 571, 583, 646, 647, 649, 711, 727, 794, 795, 867, 1019, 1024, 1143, 1181, 1201, 1213, 1251, 1252, 1254, 1315, 1331, 1400], "propagate_nan": 796, "proper": [259, 355, 914, 987], "properti": [40, 41, 51, 196, 199, 200, 209, 217, 218, 227, 235, 246, 292, 297, 328, 332, 355, 358, 359, 891, 892, 899, 936, 955, 960, 987, 992, 993, 1140, 1158, 1250, 1302, 1400, 1405, 1431], "proport": [777, 867, 1389, 1400], "protocol": [40, 132, 152, 153, 209, 355], "prototyp": 863, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 150, 151, 153, 154, 155, 160, 162, 165, 166, 167, 168, 169, 170, 181, 185, 195, 211, 234, 238, 253, 258, 283, 302, 312, 355, 358, 425, 426, 501, 521, 542, 604, 715, 716, 720, 728, 729, 745, 746, 747, 748, 816, 849, 867, 879, 889, 900, 904, 913, 929, 932, 942, 945, 962, 984, 987, 993, 1042, 1043, 1127, 1170, 1190, 1242, 1319, 1320, 1324, 1332, 1333, 1378, 1400, 1413, 1420, 1423, 1428, 1431], "provis": 880, "proxi": 993, "prune": [162, 168, 170, 918, 987], "psycopg2": 152, "pt0": 501, "public": [153, 355, 373, 867, 879, 987, 1400, 1427], "pulp": 1409, "pure": [41, 355, 612, 613, 827, 828, 867, 918, 987, 1242, 1400], "purpos": [636, 867, 987], "push": [150, 156, 160, 162, 165, 168, 169, 170, 171, 214, 355, 442, 867], "pushdown": [63, 145, 889, 900, 918, 929, 933, 942, 959, 960, 987, 1298, 1300, 1400], "put": [38, 48, 75, 355, 359, 987], "pwd": 152, "py": 167, "pyarrow": [40, 47, 55, 131, 136, 150, 153, 154, 156, 158, 162, 166, 171, 173, 307, 313, 314, 355, 846, 879, 1374, 1380, 1381, 1400, 1410, 1412, 1428], "pyarrow_opt": [47, 154, 162, 166, 355], "pyarrow_t": 1428, "pycapsul": [131, 132, 208, 996], "pycapsuleinterfac": [132, 208, 996], "pydant": 173, "pyiceberg": [42, 167, 173, 355], "pyodbc": [39, 355], "pyodbc_uri": [39, 355], "pyspark": 187, "pytest": [174, 176], "python": [0, 33, 34, 35, 43, 44, 75, 86, 101, 132, 150, 151, 156, 158, 171, 173, 174, 176, 209, 255, 263, 289, 290, 309, 341, 355, 463, 468, 472, 480, 531, 612, 613, 722, 791, 805, 806, 808, 809, 854, 855, 867, 873, 895, 970, 987, 991, 992, 1090, 1094, 1102, 1105, 1106, 1107, 1111, 1242, 1326, 1379, 1400, 1404, 1427], "pythondatatyp": [66, 84, 214, 355, 863, 886, 987, 993], "pythonliter": [1003, 1048, 1053, 1056, 1157, 1192, 1243, 1244, 1245, 1246, 1298, 1400], "pytimezon": 993, "pytorch": [317, 355, 1383, 1400], "q": [290, 355, 849, 1400, 1405, 1413], "q1": [41, 355], "q2": [41, 355], "q3": [41, 355], "q4": [41, 355], "qcut": [461, 867, 1084, 1400], "qhoo": 1431, "qmark": [152, 153], "qqr": 993, "quad": [518, 867, 1147, 1400], "qualifi": [39, 355], "quantifi": [721, 1325], "quantil": [355, 661, 685, 686, 867, 987, 1263, 1286, 1287, 1400, 1417], "quantile_cont": 1421, "quantile_disc": 1421, "quantilemethod": [221, 281, 347, 355, 662, 685, 686, 839, 867, 894, 930, 976, 987, 1085, 1264, 1286, 1287, 1400], "quarter": [243, 258, 287, 325, 355, 491, 496, 509, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "queri": [10, 48, 49, 50, 51, 52, 53, 54, 63, 64, 96, 130, 152, 153, 156, 165, 168, 169, 170, 231, 260, 278, 302, 355, 729, 846, 879, 889, 890, 900, 929, 931, 942, 945, 959, 960, 961, 962, 970, 979, 987, 1152, 1242, 1333, 1400, 1409, 1410, 1412, 1416, 1427, 1429, 1430], "queryoptflag": [48, 49, 50, 51, 63, 64, 130, 889, 890, 900, 929, 942, 987], "quick": [863, 1085, 1400, 1431], "quit": [258, 355, 913, 987], "quot": [38, 39, 48, 150, 151, 153, 165, 355, 757, 987, 1361], "quota_project_id": 35, "quote_char": [38, 48, 150, 151, 165, 355, 987], "quote_plu": 153, "quote_styl": [38, 48, 355, 987], "quotes_titl": 757, "quotient": 1422, "r": [150, 151, 165, 355, 619, 658, 714, 719, 720, 721, 722, 735, 736, 867, 993, 1318, 1323, 1324, 1325, 1326, 1339, 1340, 1354, 1413, 1423], "r1": 65, "r2": 65, "r3": 65, "rab": [712, 738, 1316, 1342, 1418], "rad": 1425, "radian": [462, 787, 867, 1421], "radix": [754, 1358], "rai": [787, 788], "raini": [735, 736, 1339, 1340], "rais": [1, 10, 16, 17, 21, 40, 55, 65, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 150, 151, 155, 161, 162, 165, 170, 174, 176, 209, 211, 214, 238, 264, 279, 288, 313, 355, 405, 425, 442, 468, 494, 495, 579, 581, 624, 659, 661, 669, 712, 715, 724, 749, 751, 752, 754, 756, 807, 826, 867, 919, 928, 962, 987, 1023, 1042, 1090, 1120, 1121, 1209, 1211, 1261, 1263, 1271, 1316, 1319, 1328, 1353, 1355, 1356, 1358, 1360, 1380, 1400], "raise_if_empti": [150, 151, 155, 161, 165], "raise_if_undetermin": 624, "raise_on_fail": 962, "raker": 146, "ram": [48, 49, 50, 51, 987], "ran": [147, 612, 827, 828, 867], "randn": 96, "random": [41, 43, 96, 156, 172, 179, 244, 291, 355, 540, 592, 664, 696, 701, 867, 879, 1168, 1222, 1265, 1297, 1306, 1400], "randomli": 180, "rang": [18, 41, 152, 153, 221, 229, 243, 256, 355, 385, 462, 468, 476, 480, 487, 492, 493, 494, 496, 509, 510, 546, 786, 791, 794, 804, 805, 806, 807, 808, 809, 820, 821, 824, 825, 844, 853, 854, 855, 867, 894, 908, 987, 993, 1085, 1090, 1098, 1102, 1113, 1118, 1119, 1120, 1122, 1135, 1136, 1145, 1258, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1423], "rank": [394, 575, 789, 796, 811, 867, 1012, 1205, 1400], "rankmethod": [664, 867, 1265, 1400], "rare": [469, 1091], "rather": [258, 355, 533, 629, 661, 673, 759, 867, 913, 987, 1263, 1275, 1363, 1400], "raw": 153, "raw_output": [628, 942, 987], "raw_valu": 143, "re": [238, 243, 254, 320, 322, 355, 488, 489, 498, 501, 908, 950, 952, 987, 1114, 1115, 1124, 1127, 1428], "reach": [53, 733, 734, 759, 1337, 1338, 1363], "read": [37, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 195, 222, 231, 355, 358, 463, 533, 867, 895, 931, 987, 1152, 1400, 1405], "read_arrow_batches_from_odbc": 152, "read_clipboard": [37, 355], "read_csv": [149, 155, 165], "read_csv_batch": 140, "read_csv_opt": 155, "read_databas": [96, 153], "read_database_uri": 152, "read_excel": 161, "read_ndjson": 159, "read_od": 155, "read_opt": 155, "read_parquet": 170, "read_tabl": 162, "readabl": 863, "reader": [47, 51, 140, 145, 150, 151, 156, 158, 160, 162, 167, 355, 987], "reader_overrid": 167, "readi": 980, "readthedoc": [41, 355], "real": [721, 1325], "realli": [460, 713, 737, 867, 1083, 1317, 1341, 1400], "realloc": [160, 165, 168, 169, 231, 355, 1152, 1400], "rearrang": [263, 355], "reason": [187, 221, 355, 612, 867, 894, 987], "receiv": [57, 152, 165, 262, 263, 278, 341, 355, 613, 658, 867, 927, 928, 987, 1431], "recent": [174, 175, 176, 177, 313, 355, 655, 669, 867, 1258, 1271, 1380, 1400, 1412, 1428], "rechunk": [65, 131, 132, 136, 150, 151, 154, 156, 158, 160, 162, 165, 166, 168, 169, 170, 231, 355, 867, 1070, 1152, 1164, 1248, 1400], "recognis": [10, 16, 17, 21, 993], "recommend": [41, 164, 187, 221, 255, 260, 278, 355, 612, 613, 827, 828, 844, 867, 885, 894, 987, 993], "record": [38, 44, 48, 146, 158, 171, 355, 987], "record_batch": [256, 355], "recordbatch": [131, 256, 355, 846, 1410, 1412, 1428], "recurs": [47, 48, 49, 50, 51, 355, 517, 519, 520, 867, 987, 1146, 1148, 1149, 1400], "red": [56, 97, 98, 341, 777, 867, 970, 1389, 1400], "redempt": 1409, "redshift": 153, "redshift_format": 198, "reduc": [51, 150, 151, 160, 162, 165, 168, 169, 170, 289, 342, 343, 345, 348, 355, 700, 801, 814, 867, 971, 972, 974, 977, 987, 1244, 1262, 1304, 1370, 1400], "reduct": [236, 355], "ref": [720, 722, 1324, 1326], "refer": [0, 33, 41, 101, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 219, 222, 355, 359, 373, 463, 498, 501, 577, 664, 720, 735, 736, 749, 751, 752, 756, 867, 895, 987, 1124, 1127, 1207, 1265, 1339, 1340, 1353, 1355, 1356, 1360, 1400], "referenc": [41, 355, 612, 735, 736, 762, 867, 1339, 1340, 1410, 1428], "refin": 152, "reg": 146, "regard": [150, 604, 796], "regardless": [136, 213, 242, 258, 318, 355, 441, 473, 729, 772, 857, 867, 884, 913, 949, 987, 1058, 1095, 1333, 1385, 1400], "regex": [99, 521, 619, 620, 622, 712, 714, 720, 721, 722, 724, 735, 736, 760, 812, 867, 993, 1316, 1318, 1324, 1325, 1326, 1328, 1339, 1340], "regexp_lik": 1421, "region": [41, 167, 355], "region_nam": 33, "regist": [1, 52, 53, 54, 58, 59, 60, 61, 145, 147, 184, 186, 302, 355, 867, 945, 987, 991, 1409, 1410, 1412, 1413, 1414, 1415, 1428, 1430], "register_dataframe_namespac": [1, 59, 60, 61], "register_expr_namespac": [1, 58, 60, 61], "register_glob": [1411, 1413, 1415, 1428], "register_io_sourc": 991, "register_lazyframe_namespac": [1, 58, 59, 61], "register_mani": [1411, 1412, 1415], "register_plugin": 867, "register_plugin_funct": 867, "register_series_namespac": [1, 58, 59, 60], "registr": [302, 355, 846, 879, 945, 987, 1415, 1428], "regrid": [546, 867], "regular": [139, 255, 288, 289, 325, 332, 355, 521, 712, 713, 714, 718, 720, 721, 722, 723, 724, 725, 735, 736, 737, 791, 812, 857, 863, 867, 960, 987, 993, 1316, 1317, 1318, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1339, 1340, 1341, 1426], "reinterpret": [867, 1400], "rel": [41, 52, 53, 54, 147, 153, 154, 166, 167, 174, 175, 176, 177, 355, 491, 517, 519, 520, 549, 777, 867, 1117, 1146, 1148, 1149, 1176, 1389, 1400], "rel_tol": [174, 175, 176, 177, 549, 867, 1176, 1400], "relat": [138, 152, 205, 370, 735, 736, 993, 1339, 1340, 1416], "releas": [64, 257, 355, 613, 867, 890, 912, 987, 1431], "release_year": 1409, "relev": 65, "reli": [257, 355, 912, 987], "reliabl": [97, 98], "remain": [52, 150, 151, 165, 225, 226, 229, 234, 249, 279, 283, 355, 466, 467, 527, 546, 547, 574, 668, 741, 742, 867, 897, 898, 904, 911, 918, 932, 987, 1088, 1089, 1145, 1156, 1173, 1174, 1204, 1270, 1345, 1346, 1400, 1415], "remaind": [742, 1346, 1422], "remap": 100, "remot": [96, 150, 151, 156, 158, 987], "remov": [4, 47, 51, 150, 151, 163, 165, 209, 223, 234, 264, 310, 355, 521, 613, 638, 744, 745, 746, 747, 748, 753, 812, 867, 896, 904, 919, 987, 1348, 1349, 1350, 1351, 1352, 1375, 1400, 1430], "removes_pronoun": 737, "removesuffix": 638, "renam": [1, 43, 44, 134, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 174, 175, 176, 177, 188, 213, 242, 243, 257, 279, 287, 293, 294, 307, 318, 325, 329, 330, 334, 336, 355, 380, 441, 460, 517, 519, 520, 533, 630, 631, 638, 639, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 762, 764, 772, 842, 843, 845, 849, 867, 884, 907, 908, 912, 935, 937, 938, 949, 956, 957, 963, 965, 987, 999, 1083, 1144, 1146, 1148, 1149, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1328, 1367, 1374, 1376, 1400, 1428], "rename_field": [741, 742, 1345, 1346], "render": [628, 942, 987], "render_as_str": 152, "reoconstruct": [290, 355], "reorder": [264, 355, 919, 987], "repeat": [54, 156, 168, 373, 665, 667, 838, 858, 867, 1269, 1400], "repeat_bi": [867, 1400], "replac": [39, 40, 42, 150, 151, 165, 232, 233, 285, 319, 322, 329, 330, 355, 358, 472, 495, 612, 613, 669, 736, 737, 752, 867, 952, 956, 957, 987, 1094, 1121, 1271, 1298, 1300, 1340, 1341, 1356, 1400, 1405, 1421], "replace_al": [735, 1270, 1339, 1400], "replace_column": 355, "replace_strict": [668, 867, 1270, 1400], "replace_time_zon": [469, 475, 477, 1096, 1097, 1125], "replace_with": [737, 1341], "replic": [770, 867, 1382, 1400], "report": [152, 229, 355, 732, 1145, 1336, 1400], "repr": [138, 443, 447, 501, 1060, 1065, 1127], "repres": [38, 41, 42, 48, 71, 72, 74, 85, 89, 94, 131, 133, 135, 136, 137, 152, 279, 302, 303, 312, 313, 326, 333, 355, 373, 446, 531, 556, 557, 600, 606, 612, 710, 726, 731, 735, 736, 739, 750, 778, 781, 798, 810, 812, 826, 827, 828, 837, 842, 843, 848, 856, 863, 867, 945, 946, 954, 987, 993, 1064, 1298, 1314, 1330, 1335, 1339, 1340, 1343, 1354, 1380, 1390, 1400, 1428], "represent": [11, 45, 46, 71, 72, 74, 89, 138, 295, 311, 355, 443, 445, 446, 447, 471, 476, 479, 482, 483, 484, 485, 486, 487, 490, 492, 493, 497, 510, 511, 513, 627, 770, 867, 900, 916, 939, 987, 1060, 1063, 1064, 1065, 1066, 1093, 1098, 1101, 1103, 1104, 1108, 1109, 1110, 1112, 1113, 1116, 1118, 1119, 1123, 1136, 1137, 1139, 1377, 1382, 1400, 1419], "request": 35, "requested_schema": [208, 996], "requir": [1, 33, 34, 35, 40, 41, 57, 65, 136, 141, 152, 153, 174, 175, 176, 177, 190, 219, 225, 288, 312, 313, 314, 317, 355, 421, 443, 447, 517, 519, 520, 605, 654, 678, 680, 682, 684, 686, 689, 691, 693, 697, 700, 749, 751, 752, 774, 790, 792, 796, 798, 841, 867, 882, 892, 897, 898, 899, 944, 955, 987, 1038, 1144, 1146, 1148, 1149, 1235, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1299, 1304, 1339, 1353, 1355, 1356, 1380, 1381, 1386, 1400], "require_al": 993, "require_http": 190, "required_cast": [928, 987], "rerais": [64, 890, 987], "rerun": [231, 355, 1152, 1400], "resampl": [243, 355, 908, 987], "reset": [4, 205], "reset_index": [136, 243, 355, 908, 987], "reshap": [279, 313, 355, 576, 793, 867, 1206, 1400], "resolv": [147, 234, 355, 472, 891, 892, 899, 928, 936, 955, 987], "resourc": [962, 991], "respect": [41, 150, 151, 165, 174, 175, 176, 177, 264, 279, 355, 713, 723, 725, 737, 919, 987, 993, 1317, 1327, 1329, 1341, 1383, 1400], "respons": [153, 271, 355, 924, 987], "rest": [757, 1361, 1423], "restor": [205, 355, 358, 1400, 1405], "restore_default": 205, "restrict": [31, 742, 1346], "result": [14, 38, 45, 46, 47, 48, 49, 50, 51, 57, 65, 135, 136, 137, 152, 153, 155, 165, 168, 170, 171, 185, 231, 234, 243, 244, 257, 258, 259, 275, 279, 283, 287, 290, 295, 296, 298, 312, 313, 314, 325, 332, 334, 340, 355, 468, 496, 498, 501, 509, 517, 518, 519, 520, 524, 531, 540, 548, 561, 603, 612, 627, 654, 659, 661, 668, 669, 670, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 719, 736, 740, 741, 752, 773, 777, 800, 801, 805, 807, 808, 809, 810, 825, 826, 827, 828, 838, 841, 842, 843, 846, 857, 858, 867, 885, 889, 894, 904, 908, 912, 913, 914, 918, 929, 932, 935, 939, 940, 941, 960, 963, 969, 980, 981, 987, 993, 1002, 1122, 1124, 1127, 1135, 1146, 1148, 1149, 1152, 1153, 1168, 1175, 1191, 1233, 1242, 1261, 1263, 1270, 1271, 1272, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1301, 1303, 1323, 1344, 1345, 1356, 1380, 1381, 1389, 1400, 1410, 1416, 1423, 1428, 1429, 1431], "resultset": 152, "retain": [234, 283, 355, 904, 932, 987], "retri": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 355, 987], "retriev": [190, 191, 195, 238, 312, 355, 399, 400, 568, 569, 760, 837, 1017, 1018, 1198, 1199, 1364, 1378, 1400, 1416], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 96, 108, 111, 119, 127, 130, 131, 133, 134, 135, 136, 137, 139, 140, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 187, 188, 195, 207, 210, 213, 215, 218, 219, 220, 224, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 242, 243, 245, 246, 247, 251, 253, 254, 255, 256, 257, 260, 261, 263, 264, 266, 268, 273, 274, 275, 277, 278, 279, 284, 287, 288, 289, 290, 291, 295, 302, 305, 306, 312, 313, 314, 317, 318, 319, 320, 325, 328, 329, 330, 336, 338, 340, 341, 344, 349, 355, 360, 367, 381, 383, 386, 387, 388, 389, 390, 391, 394, 395, 399, 400, 401, 403, 405, 406, 408, 419, 424, 425, 426, 427, 428, 429, 430, 440, 441, 445, 446, 451, 452, 453, 454, 455, 461, 462, 468, 469, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 518, 523, 531, 534, 535, 537, 541, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 565, 568, 569, 571, 576, 579, 581, 582, 583, 585, 592, 602, 603, 610, 612, 625, 627, 628, 629, 634, 658, 660, 661, 663, 667, 668, 669, 670, 672, 673, 696, 697, 702, 703, 704, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 742, 750, 754, 759, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 780, 781, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 813, 814, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 838, 840, 841, 844, 845, 846, 849, 850, 852, 853, 854, 855, 857, 858, 867, 882, 884, 887, 889, 890, 892, 893, 894, 899, 900, 906, 908, 909, 912, 916, 917, 918, 919, 927, 928, 929, 933, 935, 939, 942, 948, 949, 950, 955, 956, 957, 965, 967, 969, 973, 978, 980, 987, 992, 993, 995, 997, 1000, 1001, 1002, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1026, 1036, 1038, 1041, 1042, 1043, 1045, 1046, 1057, 1058, 1062, 1063, 1064, 1066, 1071, 1077, 1078, 1084, 1085, 1090, 1091, 1093, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1145, 1147, 1151, 1152, 1157, 1162, 1169, 1170, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1206, 1207, 1209, 1211, 1212, 1213, 1215, 1222, 1232, 1233, 1240, 1242, 1247, 1256, 1262, 1263, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1297, 1299, 1307, 1315, 1316, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1342, 1343, 1344, 1345, 1346, 1354, 1358, 1363, 1370, 1371, 1374, 1381, 1384, 1385, 1387, 1388, 1389, 1391, 1400, 1409, 1410, 1414, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1426, 1428, 1429, 1430, 1431], "return_as_str": [241, 355, 629], "return_dtyp": [41, 263, 355, 367, 373, 612, 613, 668, 669, 780, 800, 801, 814, 827, 828, 840, 867, 1242, 1270, 1271, 1400], "return_typ": [312, 317, 355], "returns_scalar": [147, 612, 613, 800, 801, 814, 827, 828, 840, 867], "reus": [63, 205, 889, 900, 929, 942, 987], "reusabl": 205, "rev": [259, 355, 914, 987], "revers": [213, 229, 318, 355, 441, 455, 456, 457, 458, 459, 638, 640, 642, 772, 793, 799, 867, 884, 949, 987, 1058, 1078, 1079, 1080, 1081, 1082, 1385, 1400, 1418, 1421], "reverse_": 640, "reverse_a": 640, "reverse_b": 640, "revert": [7, 9, 11], "rfc": 150, "rhap": [723, 725, 1329], "rhapsodi": [723, 725, 1329], "right": [9, 11, 16, 17, 19, 28, 41, 73, 150, 151, 174, 175, 176, 177, 243, 257, 258, 287, 324, 355, 461, 517, 518, 519, 520, 548, 593, 594, 595, 596, 661, 674, 678, 680, 682, 684, 686, 689, 691, 693, 697, 705, 792, 805, 806, 808, 809, 824, 825, 854, 855, 857, 867, 908, 912, 913, 935, 953, 987, 1084, 1146, 1147, 1148, 1149, 1175, 1223, 1224, 1225, 1226, 1263, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1299, 1310, 1400, 1416, 1421], "right_left": [257, 324, 355, 912, 953, 987], "right_on": [257, 258, 324, 355, 912, 913, 953, 987], "rightmost": [697, 867, 1299, 1400, 1423], "rld": [744, 746, 1350], "rle": [673, 867, 1275, 1400], "rle_id": [672, 867, 1400], "rle_id_a": [673, 867], "rle_id_ab": [673, 867], "rmm": 962, "rn": [150, 151, 165], "role": [33, 153], "roll": [243, 355, 468, 488, 489, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 794, 842, 843, 867, 908, 987, 1090, 1114, 1115, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1400], "rollback": [489, 1115], "rolled_forward": 468, "rollforward": [488, 1114], "rolling_kurtosi": [867, 1400], "rolling_map": [867, 1400], "rolling_max": [867, 1400], "rolling_max_bi": [867, 1400], "rolling_mean": [867, 1400], "rolling_mean_bi": [867, 1400], "rolling_median": [867, 1400], "rolling_median_bi": [867, 1400], "rolling_min": [867, 1400], "rolling_min_bi": [867, 1400], "rolling_quantil": [867, 1400], "rolling_quantile_bi": [867, 1400], "rolling_row_max": [678, 867], "rolling_row_mean": [680, 867], "rolling_row_median": [682, 867], "rolling_row_min": [684, 867], "rolling_row_quantil": [686, 867], "rolling_row_std": [689, 867], "rolling_row_sum": [691, 867], "rolling_row_var": [693, 867], "rolling_skew": [867, 1400], "rolling_std": [867, 1400], "rolling_std_bi": [867, 1294, 1400], "rolling_sum": [676, 867, 1277, 1400], "rolling_sum_bi": [867, 1400], "rolling_var": [867, 1400], "rolling_var_bi": [867, 1400], "rollinggroupbi": [287, 355], "ronaldo": [720, 1324], "root": [154, 166, 448, 626, 637, 638, 640, 642, 644, 645, 709, 866, 867, 1068, 1313, 1400, 1422], "rotat": [355, 358, 1400, 1405], "round": [21, 41, 59, 138, 152, 355, 449, 453, 530, 695, 768, 867, 1069, 1159, 1296, 1400, 1421], "round_sig_fig": [867, 1400], "round_str": 1122, "round_td": 1122, "rounded_corn": 21, "roundmod": [694, 867, 1295, 1400], "row": [15, 21, 26, 38, 39, 41, 47, 48, 51, 53, 57, 58, 60, 65, 105, 111, 119, 127, 134, 135, 136, 137, 138, 145, 146, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 174, 175, 181, 210, 211, 213, 214, 215, 225, 226, 231, 234, 236, 237, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 263, 270, 271, 275, 279, 283, 287, 290, 291, 300, 306, 309, 311, 312, 317, 318, 320, 322, 323, 324, 331, 332, 336, 338, 340, 341, 349, 355, 359, 394, 395, 403, 420, 428, 441, 442, 523, 531, 535, 541, 565, 566, 567, 576, 601, 604, 654, 655, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 701, 706, 708, 719, 767, 772, 786, 789, 795, 797, 814, 818, 820, 821, 823, 825, 840, 842, 843, 852, 867, 884, 887, 897, 898, 904, 905, 906, 908, 909, 912, 913, 914, 915, 917, 918, 923, 924, 932, 943, 948, 949, 950, 952, 953, 959, 960, 965, 967, 969, 970, 978, 987, 997, 1012, 1015, 1016, 1021, 1035, 1045, 1151, 1152, 1162, 1169, 1195, 1196, 1197, 1206, 1231, 1258, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1311, 1323, 1332, 1371, 1400, 1409, 1416, 1418, 1429, 1430, 1431], "row_count_nam": [150, 151, 156, 158, 162, 165, 168, 169, 170], "row_count_offset": [150, 151, 156, 158, 162, 165, 168, 169, 170], "row_group": [162, 170], "row_group_s": [47, 51, 355, 987], "row_height": [41, 355], "row_idx": 211, "row_index": [41, 355], "row_index_nam": [150, 151, 156, 158, 160, 162, 165, 168, 169, 170], "row_index_offset": [150, 151, 156, 158, 160, 162, 165, 168, 169, 170], "row_nr": [331, 355, 959, 987], "row_tot": [41, 355], "rowname_col": [355, 359], "rows_by_kei": [255, 289, 308, 355], "rowserror": [288, 355], "rowtotalsdefinit": [41, 355], "rtol": [174, 175, 176, 177], "rtrim": 1421, "ru": 1423, "rule": [150, 162, 165, 170, 236, 264, 355, 713, 737, 752, 919, 987, 1317, 1341, 1356], "run": [48, 49, 50, 51, 63, 64, 72, 96, 130, 152, 181, 184, 185, 186, 242, 257, 260, 263, 294, 320, 330, 341, 355, 446, 460, 575, 613, 672, 673, 731, 845, 867, 889, 890, 900, 907, 912, 918, 923, 929, 931, 938, 942, 950, 957, 962, 987, 991, 993, 1064, 1083, 1205, 1242, 1274, 1275, 1335, 1400, 1428, 1431], "runtim": [153, 991], "runtimeerror": [313, 355, 1380, 1400], "rust": [38, 47, 48, 101, 113, 147, 155, 156, 158, 162, 263, 341, 355, 722, 987, 991, 1242, 1326, 1400], "s1": [56, 97, 98, 176, 177, 236, 355, 792, 796, 798, 1037, 1143, 1144, 1164, 1190, 1200, 1234, 1254, 1266, 1391, 1400], "s2": [1, 56, 97, 98, 176, 177, 236, 355, 792, 796, 798, 1037, 1070, 1087, 1143, 1144, 1164, 1181, 1190, 1200, 1234, 1248, 1254, 1266, 1391, 1400], "s3": [1, 40, 154, 166, 167, 170, 171, 355, 931, 987, 1037, 1234, 1400], "s_": 501, "s_bar": 1418, "s_dt": [501, 1423, 1424], "s_dt1": 1423, "s_dt2": 1423, "s_dtm": 501, "s_foo": 1418, "s_from_str_repr": [1377, 1400], "s_head_5": 726, "s_head_n": 726, "s_tail_5": 750, "s_tail_n": 750, "s_td": 501, "s_tm": [501, 1423, 1424], "safe": [666, 867, 1267, 1400], "sale": [654, 867], "salesforce_format": 198, "sam": 13, "same": [21, 40, 41, 54, 56, 57, 63, 64, 65, 97, 98, 114, 156, 165, 174, 175, 176, 177, 179, 205, 211, 225, 226, 232, 233, 234, 242, 258, 263, 279, 283, 289, 290, 301, 320, 329, 330, 334, 341, 355, 367, 373, 377, 384, 419, 445, 466, 467, 501, 525, 526, 527, 531, 533, 534, 537, 603, 617, 623, 654, 668, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 701, 708, 719, 730, 762, 857, 863, 867, 889, 890, 897, 898, 902, 903, 904, 907, 913, 916, 918, 932, 942, 944, 950, 956, 957, 963, 987, 993, 998, 1036, 1063, 1088, 1089, 1094, 1127, 1154, 1155, 1233, 1242, 1270, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1323, 1334, 1391, 1400, 1414, 1416, 1424], "samoa": [469, 1091], "sampl": [150, 151, 341, 355, 701, 705, 824, 825, 867, 970, 1310, 1400, 1417], "sample_s": [150, 151], "sampled_from": 1431, "sandwich": [239, 355], "sanit": 171, "sat": [355, 358], "satisfi": [548, 867, 1175, 1400], "saturdai": [243, 355, 908, 987], "save": [2, 3, 6, 243, 258, 287, 325, 355, 469, 477, 491, 496, 509, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 810, 854, 855, 863, 867, 879, 908, 913, 935, 987, 1099, 1117, 1122, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [147, 210, 211, 253, 263, 288, 298, 355, 446, 612, 697, 699, 726, 731, 739, 750, 800, 814, 826, 827, 828, 840, 867, 941, 987, 997, 1064, 1190, 1299, 1303, 1330, 1335, 1343, 1354, 1400], "scale": [29, 73, 229, 355, 429, 613, 658, 694, 753, 867, 993, 1145, 1357, 1400], "scale_negative_even": [658, 867], "scan": [55, 134, 137, 150, 151, 152, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 195, 355, 879, 987, 1332], "scan_csv": [48, 49, 50, 51, 150, 151, 987], "scan_ipc": 156, "scan_ndjson": 160, "scan_parquet": [52, 53, 54, 162, 164, 171, 931, 987], "scan_pyarrow_dataset": [162, 170], "scan_tabl": 203, "scancastopt": 170, "scatter": [355, 358, 1400, 1405], "scenario": 1400, "schedul": [64, 890, 987], "schema": [0, 1, 15, 29, 36, 39, 40, 55, 58, 59, 60, 65, 96, 105, 122, 123, 131, 133, 134, 135, 137, 145, 146, 150, 151, 152, 153, 155, 157, 159, 160, 161, 162, 164, 165, 168, 169, 170, 191, 193, 194, 195, 199, 201, 215, 216, 217, 223, 227, 229, 256, 260, 263, 264, 271, 275, 284, 313, 317, 355, 373, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 475, 603, 624, 625, 628, 629, 639, 641, 643, 780, 849, 867, 879, 887, 888, 891, 892, 896, 899, 918, 919, 924, 928, 933, 955, 970, 987, 993, 1073, 1332, 1400, 1409], "schema_mod": [40, 355], "schema_overrid": [131, 133, 134, 135, 136, 137, 150, 151, 152, 153, 155, 159, 160, 161, 165, 169, 256, 313, 355, 694, 867, 987, 993], "schemadefinit": [131, 133, 134, 135, 137, 159, 160, 169, 355, 987], "schemadict": [88, 96, 131, 133, 134, 135, 136, 137, 145, 150, 152, 153, 155, 161, 162, 165, 168, 170, 264, 355, 373, 625, 628, 629, 849, 918, 919, 970, 987], "schemaerror": [264, 355, 919, 987], "schemainitdatatyp": 992, "scheme": [52, 53, 54], "schindler": 1409, "scientif": [12, 38, 48, 355, 987], "scikit": [317, 355], "scipi": [561, 705, 867, 1191, 1310, 1400], "scope": [34, 35, 205, 878, 993, 1412, 1415, 1428], "score": [41, 279, 355], "script": [355, 358, 1400, 1405], "scroll": [41, 355], "sdiff": 595, "sdk": 190, "search": [258, 355, 713, 723, 725, 737, 913, 944, 987, 1172, 1317, 1327, 1329, 1341, 1400], "search_sort": [867, 1400], "searchsortedsid": [697, 867, 1299, 1400], "searchstrategi": [178, 180, 181, 182, 183, 185], "season": [735, 736], "sec": [1424, 1431], "second": [38, 48, 160, 165, 168, 169, 174, 175, 176, 177, 243, 258, 287, 325, 355, 479, 483, 485, 486, 490, 491, 494, 496, 501, 508, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 735, 736, 749, 752, 807, 808, 809, 810, 853, 854, 855, 867, 908, 913, 928, 935, 987, 993, 1117, 1120, 1122, 1134, 1135, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1339, 1340, 1353, 1356, 1400, 1423, 1424, 1429, 1431], "second_part": [741, 742, 1345, 1346], "seconds_diff": 508, "secret": [167, 170], "section": [279, 355, 712, 720, 721, 724, 735, 736, 805, 806, 808, 809, 854, 855, 991, 1316, 1324, 1325, 1328, 1339, 1340], "secur": [463, 867, 895, 987], "see": [38, 40, 41, 43, 44, 47, 48, 49, 50, 51, 72, 145, 147, 152, 153, 154, 155, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 181, 185, 195, 207, 219, 234, 243, 257, 278, 279, 283, 324, 355, 359, 434, 435, 437, 438, 450, 501, 526, 561, 612, 705, 712, 720, 721, 724, 726, 735, 736, 750, 805, 806, 808, 809, 840, 854, 855, 863, 867, 904, 908, 932, 953, 962, 987, 991, 993, 995, 1051, 1052, 1054, 1055, 1072, 1127, 1191, 1310, 1316, 1324, 1325, 1328, 1330, 1339, 1340, 1354, 1400, 1431], "seed": [96, 172, 244, 291, 355, 540, 592, 664, 696, 701, 867, 1168, 1222, 1265, 1297, 1306, 1400], "seed_1": [244, 355, 540, 867, 1168, 1400], "seed_2": [244, 355, 540, 867, 1168, 1400], "seed_3": [244, 355, 540, 867, 1168, 1400], "seen": [501, 1127], "seen_group": 151, "select": [1, 8, 39, 48, 49, 50, 51, 57, 58, 59, 60, 63, 64, 96, 102, 148, 150, 151, 152, 153, 154, 156, 158, 162, 165, 167, 171, 180, 210, 212, 253, 254, 258, 262, 263, 275, 278, 288, 294, 300, 302, 315, 321, 325, 332, 355, 362, 363, 366, 367, 373, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 403, 408, 409, 410, 411, 412, 417, 418, 419, 420, 421, 422, 424, 427, 430, 431, 436, 439, 440, 441, 444, 448, 449, 451, 452, 453, 454, 460, 462, 464, 465, 466, 467, 470, 472, 473, 482, 488, 489, 491, 495, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 517, 519, 520, 521, 522, 523, 524, 528, 530, 535, 539, 540, 541, 542, 543, 544, 545, 546, 550, 551, 554, 560, 561, 562, 564, 565, 575, 576, 604, 607, 608, 609, 610, 612, 614, 615, 616, 620, 632, 634, 636, 637, 639, 641, 643, 646, 647, 651, 652, 653, 654, 656, 657, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 675, 676, 687, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 727, 732, 749, 760, 762, 763, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 781, 783, 785, 788, 789, 790, 793, 794, 796, 797, 798, 802, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 829, 831, 833, 834, 836, 837, 840, 841, 844, 846, 847, 848, 849, 850, 852, 856, 863, 867, 882, 883, 889, 890, 892, 900, 913, 927, 929, 938, 942, 943, 945, 951, 958, 960, 962, 987, 993, 997, 1121, 1161, 1205, 1298, 1300, 1311, 1329, 1333, 1353, 1400, 1409, 1410, 1411, 1412, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430], "select_from": [180, 183, 185], "select_seq": [355, 987], "selector": [0, 41, 214, 223, 225, 226, 230, 262, 270, 277, 279, 301, 310, 312, 317, 320, 322, 323, 355, 359, 373, 501, 521, 620, 867, 879, 886, 896, 897, 898, 901, 923, 944, 950, 952, 987], "selectortyp": [41, 355], "self": [1, 58, 59, 60, 61, 63, 302, 333, 355, 368, 846, 867, 889, 900, 929, 942, 945, 958, 987, 1002, 1049, 1050, 1051, 1052, 1054, 1055, 1059, 1073, 1078, 1152, 1156, 1171, 1240, 1242, 1255, 1259, 1260, 1266, 1269, 1270, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1298, 1300, 1301, 1312, 1388, 1391, 1400, 1411, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428], "self_dtyp": [612, 613, 867], "semi": [146, 257, 355, 912, 987, 1416], "semigraph": 21, "sens": [150, 156, 158, 271, 325, 355, 654, 867, 924, 987], "sensit": [712, 721, 724, 735, 736, 1316, 1325, 1328, 1339, 1340], "sep": 146, "separ": [9, 11, 25, 28, 37, 38, 48, 140, 146, 149, 150, 151, 155, 165, 277, 279, 310, 319, 321, 355, 403, 406, 501, 576, 583, 613, 719, 795, 800, 801, 867, 942, 951, 987, 1021, 1024, 1127, 1206, 1213, 1323, 1369, 1375, 1400, 1423], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 51, 52, 54, 57, 88, 131, 133, 134, 135, 137, 141, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 179, 180, 181, 182, 183, 211, 213, 221, 231, 257, 258, 262, 270, 275, 277, 278, 279, 290, 301, 310, 312, 317, 318, 322, 323, 324, 325, 355, 420, 441, 461, 534, 553, 604, 612, 658, 661, 668, 669, 708, 737, 747, 748, 762, 772, 789, 800, 801, 814, 816, 824, 825, 827, 828, 837, 840, 844, 847, 867, 884, 894, 912, 913, 923, 927, 944, 949, 952, 953, 987, 993, 1037, 1058, 1084, 1085, 1152, 1234, 1263, 1270, 1271, 1341, 1367, 1385, 1400], "sequenti": [63, 294, 330, 355, 612, 827, 828, 867, 889, 900, 929, 938, 942, 957, 987], "ser": [1096, 1097, 1125], "seri": [0, 1, 12, 26, 41, 56, 58, 59, 60, 61, 65, 66, 75, 88, 97, 98, 107, 131, 133, 136, 138, 147, 174, 176, 177, 181, 210, 211, 224, 234, 236, 238, 240, 243, 244, 247, 248, 249, 250, 252, 254, 262, 266, 268, 273, 283, 285, 287, 291, 305, 308, 310, 311, 313, 315, 316, 335, 355, 367, 384, 395, 420, 424, 443, 444, 445, 446, 447, 449, 495, 524, 527, 530, 534, 535, 545, 546, 547, 551, 553, 554, 556, 557, 558, 559, 570, 576, 579, 604, 610, 612, 613, 664, 665, 666, 667, 668, 669, 674, 676, 687, 698, 700, 726, 737, 749, 750, 751, 752, 756, 760, 771, 776, 786, 790, 792, 793, 796, 798, 800, 801, 805, 806, 808, 809, 814, 816, 820, 821, 824, 825, 826, 827, 828, 838, 840, 841, 845, 846, 849, 854, 855, 858, 867, 879, 904, 908, 911, 932, 935, 964, 987, 1392, 1394, 1396, 1399, 1401, 1404, 1405, 1406, 1407, 1408, 1410, 1412, 1423, 1428, 1431], "serial": [45, 46, 222, 355, 463, 631, 867, 895, 987], "serializ": [147, 867], "serializationformat": [222, 295, 355, 463, 627, 867, 895, 939, 987], "seriesplot": [1400, 1405], "server": [39, 152, 153, 355], "servic": 33, "service_account": [154, 166], "service_account_json_absolute_path": [154, 166], "session": 152, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 63, 64, 69, 72, 73, 75, 132, 133, 134, 137, 147, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 195, 205, 209, 218, 225, 226, 235, 238, 242, 244, 255, 257, 258, 268, 270, 289, 291, 295, 300, 305, 310, 312, 313, 317, 319, 320, 322, 323, 324, 355, 358, 381, 383, 405, 406, 420, 432, 434, 435, 437, 438, 450, 461, 494, 495, 512, 540, 553, 579, 581, 583, 592, 593, 594, 595, 596, 598, 604, 612, 613, 620, 621, 627, 658, 661, 668, 669, 675, 676, 677, 679, 681, 683, 685, 687, 688, 690, 692, 696, 701, 705, 706, 711, 727, 735, 736, 739, 744, 745, 746, 747, 748, 749, 751, 752, 756, 777, 781, 783, 786, 790, 792, 795, 796, 798, 800, 801, 805, 806, 807, 808, 809, 810, 814, 820, 821, 824, 825, 826, 827, 828, 832, 838, 840, 841, 842, 843, 845, 849, 851, 854, 855, 857, 858, 867, 879, 889, 890, 897, 900, 907, 912, 913, 918, 923, 929, 939, 942, 943, 950, 952, 953, 961, 970, 987, 1000, 1001, 1023, 1024, 1037, 1042, 1049, 1051, 1052, 1054, 1055, 1072, 1084, 1120, 1121, 1138, 1158, 1168, 1181, 1188, 1209, 1211, 1213, 1222, 1223, 1224, 1225, 1226, 1228, 1234, 1242, 1263, 1270, 1271, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1288, 1289, 1291, 1293, 1297, 1298, 1299, 1306, 1310, 1311, 1315, 1331, 1332, 1339, 1340, 1343, 1348, 1349, 1350, 1353, 1355, 1356, 1360, 1380, 1389, 1400, 1419, 1427, 1431], "set_": 205, "set_decimal_separ": 28, "set_environ": 184, "set_except": [64, 890, 987], "set_fmt_float": 31, "set_fmt_str_length": [713, 723, 725, 737, 1317, 1329, 1341], "set_index": [243, 355, 908, 987], "set_legend": [41, 355], "set_sort": [287, 325, 355, 674, 867, 935, 987, 1400], "set_stat": 31, "set_streaming_chunk_s": [889, 987], "set_styl": [41, 355], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 57], "set_tbl_row": 205, "set_tbl_width_char": 737, "set_thousands_separ": 9, "set_titl": [41, 355], "set_verbos": 205, "setosa": [355, 358], "setup": 1431, "seventeen": [544, 867], "sever": [131, 133, 134, 135, 137, 159, 160, 169, 355, 931, 987, 1431], "sfu": 153, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 56, 57, 58, 59, 60, 61, 65, 66, 84, 88, 96, 97, 98, 105, 124, 131, 132, 133, 134, 135, 136, 137, 138, 146, 150, 159, 160, 165, 171, 174, 176, 178, 181, 185, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 291, 293, 295, 298, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 363, 366, 367, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 632, 633, 634, 635, 636, 637, 638, 640, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 867, 882, 883, 884, 886, 887, 889, 890, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 939, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 992, 993, 997, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1161, 1162, 1164, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1247, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1263, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1303, 1304, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1366, 1369, 1371, 1372, 1373, 1375, 1376, 1377, 1382, 1384, 1385, 1386, 1387, 1388, 1389, 1391, 1400, 1409, 1410, 1411, 1412, 1414, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 1429], "share": [174, 175, 176, 177, 229, 355, 1145, 1400], "shawshank": 1409, "sheet": [41, 155, 161, 355], "sheet1": [41, 355], "sheet_id": [155, 161], "sheet_nam": [155, 161], "sheet_zoom": [41, 355], "sheetnam": [155, 161], "shift": [243, 355, 423, 464, 532, 573, 655, 794, 867, 908, 987, 1040, 1086, 1160, 1203, 1258, 1400], "short": [174, 176], "shorten": [174, 176], "shorter": [150, 151, 165, 820, 821], "shorthand": [355, 358, 857, 1400, 1405], "should": [11, 39, 41, 47, 48, 49, 50, 51, 65, 96, 131, 133, 135, 137, 145, 146, 155, 159, 160, 165, 167, 169, 171, 178, 179, 181, 185, 211, 223, 255, 257, 258, 262, 263, 288, 289, 290, 301, 309, 310, 321, 341, 355, 379, 460, 463, 468, 512, 518, 521, 549, 556, 557, 575, 613, 627, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 705, 708, 735, 736, 753, 777, 789, 791, 810, 812, 826, 828, 842, 843, 863, 867, 889, 895, 896, 900, 912, 913, 918, 929, 939, 942, 944, 951, 987, 993, 1083, 1090, 1138, 1147, 1176, 1205, 1242, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1299, 1310, 1339, 1340, 1357, 1389, 1400, 1410], "show": [31, 41, 221, 226, 241, 260, 276, 355, 542, 628, 867, 894, 929, 942, 987, 1170, 1400, 1414, 1427], "show_graph": [260, 355, 987], "show_plot": [929, 987], "shrink": [299, 355, 700, 867, 1304, 1305, 1400], "shrink_dtyp": [262, 355, 867, 1400], "shrink_to_fit": [355, 1400], "shuffl": [172, 291, 317, 341, 355, 592, 696, 867, 970, 1222, 1297, 1400], "side": [41, 147, 152, 243, 287, 355, 548, 593, 594, 595, 596, 674, 678, 680, 682, 684, 686, 689, 691, 693, 697, 805, 806, 808, 809, 824, 825, 854, 855, 867, 908, 935, 987, 1175, 1223, 1224, 1225, 1226, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1299, 1400], "sign": [71, 72, 74, 79, 80, 81, 82, 83, 89, 373, 491, 666, 735, 736, 759, 867, 993, 1117, 1267, 1339, 1340, 1363, 1400, 1421], "sign_x": 1422, "signed_integ": 993, "signific": [170, 255, 263, 355, 434, 435, 437, 438, 613, 695, 867, 1051, 1052, 1054, 1055, 1242, 1296, 1400], "significantli": [155, 263, 341, 355, 1242, 1400, 1431], "silenc": 105, "silent": [55, 170, 754, 1358], "similar": [37, 47, 55, 149, 187, 211, 236, 258, 298, 320, 322, 355, 415, 498, 501, 597, 654, 699, 764, 823, 857, 867, 904, 913, 941, 950, 952, 987, 1032, 1124, 1127, 1227, 1303, 1400], "similarli": [41, 134, 243, 258, 287, 325, 355, 491, 496, 509, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 1117, 1122, 1135, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "simpl": [41, 275, 355], "simpler": [993, 1339], "simpli": [165, 800, 814, 1066], "simplifi": [63, 889, 900, 929, 942, 987], "simplify_express": [63, 889, 900, 929, 942, 961, 987], "sin": [867, 1400, 1421], "sinc": [8, 40, 63, 66, 69, 71, 72, 89, 150, 151, 152, 154, 160, 162, 165, 166, 168, 169, 170, 178, 179, 180, 181, 185, 188, 212, 270, 313, 331, 336, 355, 475, 478, 512, 533, 612, 613, 631, 668, 700, 711, 719, 779, 788, 796, 816, 827, 867, 883, 889, 900, 923, 929, 942, 944, 958, 959, 965, 987, 1097, 1100, 1106, 1107, 1138, 1167, 1270, 1315, 1323, 1380, 1400], "sind": 1421, "sine": [388, 389, 612, 703, 704, 867, 1006, 1007, 1308, 1309, 1400, 1425], "singl": [41, 47, 57, 64, 65, 76, 149, 150, 151, 152, 153, 154, 155, 162, 165, 166, 168, 179, 211, 214, 223, 224, 225, 226, 231, 238, 244, 253, 259, 263, 277, 288, 290, 301, 312, 313, 355, 402, 446, 450, 468, 491, 534, 537, 540, 572, 579, 612, 613, 665, 668, 670, 672, 708, 711, 726, 727, 731, 739, 750, 779, 789, 793, 794, 795, 821, 825, 827, 828, 847, 855, 857, 863, 867, 886, 896, 897, 898, 914, 944, 987, 993, 1020, 1064, 1072, 1090, 1117, 1152, 1168, 1202, 1209, 1266, 1270, 1272, 1274, 1315, 1330, 1331, 1335, 1343, 1354, 1374, 1380, 1400, 1411], "singlecolselector": 210, "singleindexselector": [210, 997], "sinh": [867, 1400], "sink": 880, "sink_": [52, 54], "sink_csv": [52, 53, 54, 987], "sink_ipc": 987, "sink_ndjson": 987, "sink_parquet": [52, 141, 987], "site_id": [355, 359], "six": [697, 867], "size": [15, 47, 51, 53, 145, 150, 151, 152, 178, 179, 180, 181, 185, 187, 229, 323, 355, 428, 509, 670, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 786, 820, 821, 842, 843, 844, 867, 889, 987, 1045, 1135, 1145, 1272, 1276, 1279, 1281, 1283, 1285, 1287, 1288, 1290, 1292, 1294, 1400, 1431], "sizeunit": [229, 355, 429, 1046, 1145, 1400], "skew": [687, 867, 1288, 1400], "skewtest": [705, 867, 1310, 1400], "skip": [150, 151, 155, 162, 165, 170, 258, 323, 355, 913, 987, 1242, 1400, 1416], "skip_empty_lin": 155, "skip_lin": [150, 151, 165], "skip_nul": [613, 867, 1242, 1400], "skip_row": [150, 151, 165], "skip_rows_after_head": [150, 151, 165], "sklearn": [317, 355], "slice": [58, 63, 147, 229, 245, 256, 306, 355, 582, 602, 612, 624, 626, 676, 677, 679, 681, 683, 685, 688, 690, 692, 726, 750, 827, 828, 867, 882, 889, 900, 918, 929, 942, 987, 1145, 1169, 1212, 1232, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1330, 1354, 1371, 1400, 1423], "slice_pushdown": [63, 889, 900, 918, 929, 942, 961, 987], "slide": [460, 867, 1083, 1400], "slightli": [48, 49, 50, 51, 101, 531, 867, 987, 1424], "slot": [460, 464, 573, 867, 1083, 1086, 1203, 1400], "slow": [117, 134, 137, 150, 151, 152, 155, 159, 160, 161, 165, 169, 170, 355, 460, 613, 676, 867, 970, 987, 1083, 1277, 1332, 1400], "slower": [135, 137, 155, 242, 263, 277, 325, 341, 355, 613, 827, 828, 867, 907, 970, 987, 1242, 1400], "small": [12, 153, 496, 987, 1431], "smaller": [47, 51, 53, 229, 355, 987, 1145, 1400], "smallest": [213, 318, 355, 440, 441, 772, 867, 884, 949, 987, 1057, 1058, 1385, 1400, 1417, 1420], "smooth": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "snappi": [36, 47, 51, 355, 987], "snapshot": 167, "snapshot_id": 167, "snowflak": [152, 153], "snowflake_format": 198, "snowi": [735, 736], "so": [1, 41, 152, 153, 155, 165, 187, 205, 241, 243, 259, 279, 287, 355, 365, 395, 405, 463, 531, 548, 581, 604, 613, 674, 735, 736, 737, 744, 745, 746, 760, 867, 882, 895, 908, 914, 935, 987, 993, 1023, 1211, 1339, 1340, 1341, 1348, 1349, 1350], "softwar": [37, 149, 355], "solut": [39, 355], "solv": [96, 145], "some": [15, 31, 41, 47, 51, 56, 65, 98, 134, 150, 151, 152, 165, 209, 226, 279, 290, 313, 355, 359, 735, 736, 863, 931, 987, 1181, 1339, 1340, 1400, 1431], "some_account": [721, 1325], "some_t": 1430, "someth": [612, 827, 867], "sometim": [810, 866], "somewher": [721, 1325], "sort": [52, 53, 54, 57, 58, 213, 243, 258, 271, 278, 279, 287, 296, 318, 325, 338, 349, 355, 394, 440, 441, 518, 527, 613, 654, 674, 697, 698, 708, 771, 772, 777, 779, 789, 805, 808, 828, 844, 867, 884, 900, 908, 913, 924, 927, 929, 935, 940, 942, 949, 967, 978, 987, 993, 1012, 1057, 1058, 1147, 1188, 1299, 1301, 1384, 1385, 1386, 1389, 1400, 1416, 1429, 1431], "sort_bi": 867, "sort_column": [279, 355], "sorted": [258, 355, 913, 987], "sorted_asc": [1158, 1400], "sorted_desc": [1158, 1400], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 867, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1400, 1405, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1428], "source_ac": 138, "source_actor_id": 138, "source_alia": [40, 355], "source_cha": 138, "source_channel_id": 138, "south": 75, "space": [21, 243, 355, 501, 824, 825, 908, 987, 993, 1127], "spam": [267, 355, 721, 1325], "span": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "spanner": [355, 359], "spark": [47, 355], "sparklin": [41, 355], "speak": [705, 867, 1310, 1400], "spearman": 796, "speci": [355, 358], "special": [39, 54, 150, 151, 153, 165, 317, 332, 355, 676, 721, 735, 736, 867, 960, 987, 1242, 1277, 1325, 1339, 1340, 1400], "specif": [1, 31, 40, 41, 43, 44, 49, 101, 131, 133, 135, 137, 146, 150, 153, 154, 155, 159, 160, 161, 166, 167, 169, 211, 214, 255, 257, 264, 307, 312, 355, 365, 373, 498, 501, 549, 749, 751, 752, 756, 777, 867, 886, 912, 919, 987, 992, 993, 1124, 1127, 1176, 1353, 1355, 1356, 1360, 1374, 1378, 1389, 1400, 1416, 1428, 1430, 1431], "specifi": [10, 38, 39, 40, 41, 47, 48, 57, 102, 105, 108, 123, 126, 150, 155, 161, 162, 165, 170, 182, 191, 193, 194, 195, 211, 213, 214, 229, 230, 233, 238, 242, 243, 257, 258, 277, 279, 287, 288, 290, 293, 294, 298, 301, 312, 318, 321, 329, 330, 334, 355, 373, 441, 450, 494, 501, 517, 519, 520, 521, 526, 654, 667, 669, 677, 679, 681, 683, 685, 688, 690, 692, 699, 708, 764, 772, 789, 792, 793, 794, 795, 805, 806, 808, 809, 810, 812, 845, 849, 854, 855, 863, 867, 884, 886, 901, 903, 907, 908, 912, 913, 935, 937, 938, 941, 944, 949, 951, 956, 957, 963, 987, 993, 1058, 1072, 1120, 1127, 1145, 1146, 1148, 1149, 1155, 1269, 1271, 1303, 1378, 1385, 1400, 1416, 1423, 1430], "speed": [51, 296, 355, 613, 867, 940, 987, 991, 1431], "speedup": [57, 170, 255, 263, 355, 613, 867, 1242, 1400], "split": [1, 41, 47, 52, 53, 54, 58, 256, 355, 719, 741, 742, 1323, 1345, 1346, 1423], "split_by_column_dtyp": 60, "split_inclus": 740, "split_part": 1421, "splitfram": [1, 58], "spreadsheet": [37, 149, 155, 161, 279, 355], "spring": [735, 736], "sql": [0, 39, 120, 121, 129, 152, 153, 257, 298, 355, 415, 597, 699, 823, 847, 867, 879, 941, 987, 1032, 1227, 1303, 1400, 1409, 1410, 1412, 1414, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1429, 1430], "sql_expr": 1428, "sqlalchemi": [39, 152, 173, 355], "sqlcontext": [302, 355, 846, 945, 987, 1427], "sqldw_format": 198, "sqlite": [39, 152, 153, 355], "sqrt": [613, 705, 764, 867, 1242, 1310, 1400, 1421], "sqrt_x": 1422, "squar": [1, 61, 341, 561, 670, 709, 867, 970, 1191, 1272, 1313, 1400, 1422], "st": [33, 1431], "stabil": [244, 355, 540, 867, 1168, 1400], "stabl": [162, 207, 219, 221, 222, 244, 291, 295, 302, 355, 463, 540, 609, 627, 770, 867, 894, 895, 923, 939, 944, 945, 987, 995, 1168, 1382, 1400], "stack": [65, 247, 327, 355, 358, 1410], "stage": [928, 942, 987], "stai": [612, 701, 867], "standalon": [179, 993], "standard": [7, 11, 38, 41, 152, 303, 312, 317, 355, 482, 519, 688, 689, 705, 710, 729, 732, 848, 863, 867, 882, 946, 987, 993, 1104, 1143, 1148, 1254, 1290, 1310, 1314, 1333, 1336, 1400, 1417, 1431], "standardis": [41, 355], "start": [41, 48, 49, 50, 51, 54, 148, 150, 151, 153, 155, 156, 158, 160, 161, 162, 165, 168, 169, 170, 187, 237, 242, 243, 260, 300, 325, 331, 332, 355, 424, 427, 430, 443, 447, 468, 476, 480, 487, 492, 496, 509, 510, 521, 535, 580, 598, 673, 678, 680, 682, 684, 686, 689, 691, 693, 706, 712, 717, 721, 725, 734, 739, 743, 744, 746, 747, 750, 759, 786, 791, 800, 804, 805, 806, 807, 808, 809, 812, 814, 820, 821, 824, 825, 854, 855, 857, 863, 867, 906, 907, 908, 929, 943, 959, 960, 987, 993, 1047, 1060, 1065, 1090, 1092, 1095, 1098, 1100, 1101, 1108, 1110, 1112, 1113, 1116, 1118, 1122, 1126, 1135, 1136, 1162, 1210, 1228, 1275, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1311, 1321, 1325, 1329, 1338, 1343, 1347, 1348, 1350, 1354, 1363, 1400, 1416, 1423, 1431], "start_bi": [243, 355, 908, 987], "startbi": [243, 355, 908, 987], "starts_a": 1423, "starts_with": [58, 279, 355, 359, 424, 427, 443, 620, 712, 717, 846, 945, 987, 993, 1060, 1321, 1421], "starts_with_expr": 430, "starts_with_lit": 430, "startup": [312, 355], "stat": [561, 705, 867, 1191, 1310, 1400], "state": [4, 5, 113, 612, 613, 800, 801, 827, 828, 867, 879, 918, 987, 1242, 1400, 1428], "statement": [153, 654, 857, 867, 1414, 1429], "static": [94, 360, 970], "statist": [47, 51, 150, 151, 162, 168, 170, 221, 355, 519, 520, 561, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 705, 867, 894, 987, 1085, 1148, 1149, 1191, 1276, 1279, 1281, 1283, 1285, 1287, 1288, 1290, 1292, 1294, 1310, 1400], "std": [221, 355, 688, 689, 867, 894, 987, 1085, 1289, 1290, 1294, 1400], "std_dev": [41, 355], "stddev": 1421, "stddev_samp": 1417, "stdev": [41, 355, 1417], "stdev_samp": 1417, "stdout": [205, 241, 355, 629], "step": [323, 355, 531, 786, 820, 821, 844, 867, 882], "steve": [271, 355, 924, 987], "still": [152, 153], "stock": [355, 358], "stop": [145, 148, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 678, 680, 682, 684, 686, 689, 691, 693, 867, 882, 1092, 1095, 1100, 1101, 1108, 1110, 1112, 1116, 1122, 1126, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "storag": [38, 40, 43, 47, 48, 49, 50, 51, 150, 154, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 195, 355, 987], "storage_loc": [196, 199, 200], "storage_opt": [38, 40, 43, 47, 48, 49, 50, 51, 150, 154, 156, 158, 160, 162, 164, 165, 166, 167, 168, 169, 170, 195, 355, 987], "store": [40, 167, 231, 255, 289, 355, 444, 672, 867, 1061, 1152, 1274, 1400], "store_id": [654, 867], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 72, 75, 76, 99, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 181, 184, 185, 186, 190, 191, 193, 194, 195, 196, 197, 199, 200, 205, 211, 213, 214, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 234, 235, 236, 238, 239, 241, 242, 243, 245, 247, 248, 250, 252, 253, 255, 257, 258, 259, 261, 262, 264, 265, 267, 269, 270, 271, 272, 275, 277, 279, 281, 283, 284, 285, 286, 287, 288, 289, 291, 295, 296, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 365, 366, 367, 373, 378, 379, 380, 401, 406, 420, 424, 425, 426, 427, 430, 431, 436, 439, 441, 443, 444, 447, 455, 461, 463, 465, 473, 491, 495, 496, 498, 501, 509, 518, 521, 527, 529, 533, 534, 537, 545, 548, 570, 581, 582, 583, 598, 602, 604, 613, 624, 626, 627, 628, 629, 631, 638, 639, 640, 641, 642, 643, 644, 645, 651, 654, 658, 661, 667, 668, 669, 671, 673, 674, 678, 680, 682, 684, 686, 689, 691, 693, 700, 707, 708, 760, 761, 762, 763, 772, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 794, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 863, 867, 874, 884, 886, 889, 890, 892, 894, 895, 896, 897, 898, 900, 901, 904, 907, 908, 910, 912, 913, 914, 919, 923, 924, 927, 929, 932, 933, 934, 935, 939, 940, 942, 943, 944, 945, 949, 950, 951, 952, 953, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 987, 992, 993, 999, 1024, 1037, 1043, 1059, 1060, 1061, 1065, 1084, 1085, 1095, 1117, 1121, 1122, 1124, 1127, 1135, 1147, 1155, 1158, 1200, 1213, 1234, 1250, 1251, 1252, 1263, 1268, 1270, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1300, 1364, 1366, 1367, 1375, 1376, 1377, 1378, 1389, 1400, 1406, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1420, 1423, 1424, 1428, 1429, 1431], "str_date": 1423, "str_timestamp": 1423, "str_valu": [52, 143], "strategi": [38, 48, 57, 65, 150, 170, 178, 179, 180, 181, 182, 183, 185, 233, 243, 257, 258, 274, 324, 325, 355, 423, 456, 459, 526, 532, 613, 867, 880, 903, 908, 912, 913, 931, 953, 987, 1040, 1155, 1160, 1234, 1400], "stream": [10, 15, 43, 44, 48, 49, 50, 51, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 242, 257, 320, 355, 889, 900, 907, 912, 918, 923, 929, 942, 944, 950, 987], "stream_result": 152, "streamabl": [918, 923, 952, 987], "streaming_t": 202, "strftime": [101, 501, 1127, 1421, 1423], "strict": [133, 134, 137, 146, 214, 223, 284, 355, 425, 442, 501, 712, 715, 724, 749, 751, 752, 754, 756, 837, 867, 886, 896, 933, 987, 993, 1042, 1059, 1127, 1144, 1316, 1319, 1328, 1353, 1355, 1356, 1358, 1360, 1400], "strictli": [38, 48, 56, 98, 150, 258, 355, 913, 987], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 48, 56, 69, 72, 75, 88, 95, 97, 98, 99, 101, 107, 125, 134, 138, 146, 150, 151, 152, 153, 165, 174, 175, 176, 177, 178, 185, 189, 213, 214, 217, 222, 227, 229, 236, 238, 241, 242, 243, 258, 264, 277, 279, 287, 290, 292, 293, 294, 295, 301, 311, 312, 318, 319, 323, 325, 329, 330, 334, 355, 365, 366, 373, 378, 401, 406, 427, 441, 443, 445, 446, 447, 450, 463, 491, 496, 498, 501, 509, 518, 521, 529, 533, 548, 583, 627, 629, 654, 658, 668, 669, 674, 678, 680, 682, 684, 686, 689, 691, 693, 708, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 764, 772, 780, 782, 784, 789, 792, 793, 794, 795, 803, 805, 806, 808, 809, 815, 830, 832, 835, 845, 849, 851, 854, 855, 857, 863, 867, 879, 884, 886, 891, 895, 899, 900, 907, 908, 913, 919, 928, 935, 936, 937, 938, 939, 944, 949, 956, 957, 963, 987, 992, 993, 1024, 1042, 1043, 1044, 1058, 1060, 1063, 1064, 1065, 1117, 1122, 1124, 1127, 1135, 1147, 1175, 1213, 1270, 1271, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1315, 1316, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1366, 1377, 1378, 1385, 1400, 1409, 1410, 1418, 1421, 1424, 1427, 1431], "string_to_arrai": 1421, "stringcach": [97, 98, 257, 355, 879], "stringio": [159, 160, 533, 867], "strings_hex": 716, "strip": [29, 744, 745, 746, 747, 748, 1348, 1349, 1350, 1423], "strip_chars_end": [746, 748], "strip_chars_start": [745, 747], "strip_prefix": [746, 748], "strip_suffix": [745, 747], "strongli": [41, 187, 263, 288, 341, 355, 613, 867, 1242, 1400], "strpo": 1421, "strptime": [287, 355, 495, 674, 867, 935, 987, 1121, 1421], "struct": [8, 55, 76, 126, 138, 141, 262, 264, 275, 316, 321, 355, 373, 420, 461, 542, 604, 612, 613, 639, 641, 643, 661, 672, 673, 722, 728, 741, 742, 770, 777, 800, 801, 803, 827, 857, 867, 919, 951, 970, 987, 993, 1037, 1084, 1234, 1242, 1263, 1274, 1326, 1332, 1345, 1346, 1380, 1382, 1400], "struct_col": [760, 762, 763], "struct_seri": 970, "structarrai": [229, 355, 1145, 1400], "structfieldnotfounderror": 762, "structur": [41, 43, 44, 49, 107, 110, 124, 146, 211, 231, 278, 290, 307, 313, 355, 658, 867, 927, 987, 1152, 1374, 1400, 1428], "student": [279, 355], "style": [7, 21, 41, 52, 152, 153, 279, 355], "sub": [341, 399, 400, 401, 404, 405, 406, 407, 409, 410, 411, 412, 413, 417, 418, 422, 583, 590, 867, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1034, 1035, 1039, 1213, 1220], "subarrai": [397, 398, 1015, 1016], "subclass": [1, 355], "subexpress": [63, 889, 900, 929, 942, 987], "subinterv": 1417, "subject": [47, 167, 279, 355], "sublist": [405, 568, 569, 571, 573, 578, 579, 580, 581, 582, 583, 584, 593, 598, 602, 1023, 1181, 1198, 1199, 1201, 1203, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1223, 1228, 1232, 1234, 1400], "subplan": [63, 130, 889, 900, 929, 942, 987], "subscript": 882, "subsequ": [41, 162, 170, 282, 314, 355, 846, 857, 900, 987, 1381, 1400, 1415], "subset": [225, 226, 275, 320, 355, 897, 898, 950, 987], "substr": [424, 427, 430, 443, 447, 712, 717, 724, 735, 736, 739, 740, 741, 742, 743, 993, 1041, 1044, 1047, 1060, 1065, 1316, 1321, 1328, 1339, 1340, 1343, 1344, 1345, 1346, 1347, 1421], "subtl": [41, 355], "subtli": [531, 867], "subtract": [561, 765, 867, 1191, 1400], "succe": [150, 151, 165], "success": [714, 721, 1318, 1325], "successfulli": [52, 53, 54, 889, 900, 929, 942, 987], "suffer": 54, "suffix": [257, 258, 259, 334, 355, 380, 427, 441, 443, 556, 557, 558, 559, 618, 638, 640, 643, 644, 645, 671, 694, 717, 745, 748, 772, 867, 912, 913, 914, 958, 963, 987, 993, 1044, 1060, 1321, 1352], "suffix_field": [639, 641], "sugar": [324, 355, 668, 669, 737, 781, 783, 785, 797, 799, 802, 812, 817, 818, 819, 829, 831, 833, 834, 836, 838, 839, 845, 848, 850, 852, 856, 858, 867, 953, 987, 1270, 1271, 1313, 1341, 1400], "suggest": [355, 358, 1400, 1405], "suitabl": [57, 65, 152, 179, 263, 355, 613, 697, 867, 1242, 1299, 1400], "sum": [41, 96, 147, 229, 236, 242, 243, 253, 279, 287, 305, 334, 355, 458, 459, 463, 514, 527, 613, 624, 626, 627, 628, 629, 630, 668, 669, 674, 679, 688, 690, 691, 692, 779, 781, 793, 800, 802, 803, 814, 828, 840, 851, 867, 889, 890, 895, 900, 907, 908, 926, 929, 931, 935, 939, 942, 963, 987, 993, 1081, 1082, 1141, 1145, 1291, 1292, 1400, 1409, 1416, 1418, 1421, 1428], "sum_": [705, 867, 1310, 1400], "sum_a": [287, 355, 674, 867, 935, 987], "sum_horizont": [57, 355, 850], "summari": [221, 355, 894, 987, 1085, 1400, 1416], "summer": [735, 736], "sun": [355, 358, 749, 1353], "sundai": [243, 355, 468, 480, 498, 501, 511, 791, 908, 987, 1090, 1102, 1124, 1127, 1137], "sunni": [735, 736, 1339, 1340], "supercast": [236, 355], "supertyp": [65, 147, 233, 313, 317, 355, 384, 794, 867, 903, 987, 1400], "suppli": [39, 41, 131, 133, 134, 135, 137, 152, 159, 160, 169, 234, 283, 288, 312, 355, 527, 658, 867, 904, 932, 987, 1378, 1400], "support": [1, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 63, 64, 65, 131, 132, 133, 134, 135, 136, 137, 138, 152, 153, 154, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 178, 182, 185, 195, 205, 211, 255, 256, 257, 258, 289, 290, 300, 301, 309, 314, 317, 355, 428, 501, 518, 598, 654, 668, 669, 706, 708, 713, 723, 725, 726, 735, 736, 737, 739, 750, 863, 867, 873, 882, 889, 890, 900, 912, 913, 929, 942, 943, 944, 987, 993, 1045, 1127, 1147, 1228, 1270, 1271, 1311, 1317, 1327, 1329, 1330, 1339, 1340, 1341, 1343, 1354, 1381, 1383, 1400, 1404, 1418, 1423, 1424, 1426, 1427, 1428], "supportsinterchang": 132, "suppos": [210, 279, 355, 613, 867, 1242, 1400], "sure": [65, 131, 132, 136, 147, 150, 151, 154, 156, 158, 162, 166, 282, 355, 867], "surreal_query_to_fram": 152, "surrealdb": 152, "surrealql": 152, "suscept": 987, "swap": [857, 933, 987], "swim": 795, "switch": [63, 64, 469, 889, 890, 900, 929, 942, 987, 1091], "sy": 205, "sydnei": 807, "symbol": [37, 38, 48, 355, 867, 987], "symmetr": [549, 595, 867, 993, 1176, 1225, 1400], "symmetri": [892, 899, 936, 955, 987], "sync": [48, 49, 50, 51, 987], "sync_on_clos": [48, 49, 50, 51, 987], "synchron": [152, 981], "synconclosemethod": [48, 49, 50, 51, 987], "syntact": [324, 355, 668, 669, 737, 781, 783, 785, 797, 799, 802, 812, 817, 818, 819, 829, 831, 833, 834, 836, 838, 839, 845, 848, 850, 852, 856, 858, 867, 953, 987, 1270, 1271, 1313, 1341, 1400], "syntax": [41, 121, 211, 234, 263, 275, 283, 355, 628, 712, 720, 721, 724, 735, 736, 820, 821, 863, 882, 904, 932, 942, 987, 1316, 1324, 1325, 1328, 1339, 1340, 1400, 1424, 1426], "system": [37, 150, 151, 355, 473, 889, 900, 929, 942, 987, 1095], "t": [37, 38, 40, 48, 65, 96, 136, 145, 149, 150, 155, 161, 165, 171, 243, 258, 263, 278, 320, 323, 355, 460, 469, 477, 495, 501, 514, 517, 519, 520, 575, 613, 654, 658, 720, 724, 735, 736, 746, 749, 752, 757, 857, 867, 908, 913, 927, 950, 987, 993, 1083, 1121, 1127, 1141, 1146, 1148, 1149, 1205, 1242, 1324, 1328, 1339, 1340, 1349, 1350, 1353, 1356, 1361, 1400, 1412, 1413, 1423], "t_": [321, 355, 518, 867, 951, 987, 1147, 1400], "t_0": [287, 355, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 867, 935, 987, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "t_1": [287, 355, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 867, 935, 987, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "t_a": [321, 355, 951, 987], "t_b": [321, 355, 951, 987], "t_c": [321, 355, 951, 987], "t_d": [321, 355, 951, 987], "t_i": [518, 867, 1147, 1400], "t_id": [259, 355, 914, 987], "t_n": [287, 355, 674, 678, 680, 682, 684, 686, 689, 691, 693, 867, 935, 987, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400], "t_struct": [321, 355, 951, 987], "tab_spann": [355, 359], "tab_stub": [355, 359], "tab_styl": [355, 359], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 131, 138, 146, 154, 155, 161, 166, 167, 191, 194, 195, 197, 200, 201, 257, 259, 279, 302, 307, 314, 323, 324, 355, 359, 846, 879, 912, 914, 945, 953, 987, 1410, 1411, 1412, 1413, 1415, 1416, 1427, 1428], "table_id": 200, "table_nam": [39, 41, 155, 191, 195, 302, 355, 945, 987], "table_path": [40, 154, 166, 167, 355], "table_styl": [41, 355], "table_typ": 200, "tableinfo": [191, 194, 203], "tablemerg": [40, 355], "tablenotfounderror": [40, 355], "tables_scale_100": [140, 151], "tabletyp": [200, 203], "tail": [241, 245, 355, 384, 705, 867, 987, 1169, 1310, 1400], "take": [41, 96, 146, 155, 161, 181, 182, 205, 236, 237, 243, 268, 271, 278, 279, 284, 355, 394, 468, 480, 491, 527, 534, 535, 579, 580, 612, 639, 641, 643, 708, 789, 791, 811, 813, 822, 867, 906, 908, 924, 931, 933, 987, 1012, 1090, 1102, 1117, 1161, 1162, 1209, 1210, 1391, 1400, 1418], "taken": [598, 739, 1228, 1343], "talkin": [757, 1361], "tan": [867, 1400, 1421], "tand": 1421, "tangent": [390, 391, 768, 769, 867, 1008, 1009, 1372, 1373, 1400, 1425], "tanh": [279, 355, 867, 1400], "target": [1, 39, 40, 41, 42, 62, 155, 264, 317, 355, 720, 735, 736, 749, 751, 752, 857, 919, 987, 993, 1324, 1339, 1340, 1353, 1355, 1356, 1423], "target_alia": [40, 355], "target_t": [39, 355], "task": [64, 890, 987], "tau": [517, 518, 867, 1146, 1147, 1400], "tb": [174, 176, 229, 355, 429, 1145, 1400], "tbl": [96, 138, 140, 151, 1430], "tbl0": 1415, "tbl1": [1413, 1415], "tbl2": [1413, 1415], "tbl3": 1413, "tbl4": 1413, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 205], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 221, 355, 894, 987], "tbl_width_char": 810, "td": 501, "td1": 993, "td2": 993, "td3": 993, "tdf": [278, 355], "technic": 863, "tell": [713, 737, 1317, 1341], "tempor": [41, 101, 214, 243, 255, 287, 289, 290, 309, 355, 373, 428, 450, 501, 548, 674, 678, 680, 682, 684, 686, 689, 691, 693, 824, 867, 879, 886, 908, 935, 987, 993, 1045, 1072, 1127, 1175, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1421, 1427], "temporalliter": [450, 824, 825, 867, 1072, 1106, 1107, 1400], "temporari": [39, 355], "temporarili": [187, 205, 243, 287, 355, 674, 867, 908, 935, 987], "tenant": 34, "tenant_id": 34, "tend": [174, 176], "tensor": [317, 355, 1383, 1400], "tensordataset": [317, 355], "term": [517, 519, 520, 726, 739, 750, 867, 1146, 1148, 1149, 1330, 1343, 1354, 1400], "termin": [38, 48, 355, 987], "terminologi": 199, "test": [0, 39, 152, 153, 155, 161, 167, 228, 279, 355, 879, 1144, 1400, 1423], "test1": 1415, "test2": 1415, "test3": 1415, "test_1": [279, 355], "test_1_math": [279, 355], "test_1_phys": [279, 355], "test_2": [279, 355], "test_2_math": [279, 355], "test_2_phys": [279, 355], "test_data": 152, "test_df_height": 181, "test_func": 827, "test_lf": [958, 987], "test_miscellan": 1431, "test_numer": 1431, "test_price_calcul": 1431, "test_series_len": 185, "test_tabl": 153, "test_unique_xyz": 179, "testdb": 153, "testing1234": 1415, "text": [149, 152, 198, 445, 446, 549, 718, 726, 730, 731, 732, 735, 736, 738, 739, 750, 847, 867, 931, 987, 1063, 1064, 1176, 1330, 1334, 1335, 1342, 1343, 1354, 1400, 1415, 1431], "text1": 736, "text2": 736, "textclaus": 152, "texttt": [705, 867, 1310, 1400], "th": [237, 355, 535, 580, 593, 705, 726, 750, 867, 906, 987, 1162, 1210, 1223, 1310, 1330, 1354, 1400, 1423], "than": [41, 48, 49, 50, 51, 54, 104, 127, 135, 137, 150, 151, 152, 155, 161, 165, 171, 215, 242, 255, 257, 258, 263, 277, 288, 289, 291, 323, 341, 355, 445, 531, 533, 536, 538, 548, 563, 592, 611, 612, 613, 629, 661, 673, 696, 705, 726, 730, 733, 734, 742, 750, 759, 796, 827, 828, 857, 867, 907, 912, 913, 918, 970, 987, 1063, 1175, 1222, 1242, 1263, 1275, 1297, 1310, 1330, 1334, 1337, 1338, 1346, 1354, 1363, 1380, 1400, 1431], "the_aws_access_key_id": [40, 154, 166, 167, 355], "the_aws_region": [40, 355], "the_aws_secret_access_kei": [40, 154, 166, 167, 355], "thei": [38, 41, 48, 56, 64, 65, 97, 98, 134, 147, 152, 165, 205, 258, 260, 262, 290, 355, 654, 697, 737, 745, 746, 867, 889, 900, 913, 929, 942, 987, 991, 993, 1299, 1341, 1400], "them": [64, 131, 133, 134, 135, 137, 152, 153, 155, 159, 160, 161, 162, 165, 168, 169, 170, 205, 230, 231, 243, 258, 259, 271, 279, 287, 317, 325, 355, 406, 518, 548, 583, 646, 647, 654, 674, 794, 805, 806, 808, 809, 854, 855, 867, 890, 901, 908, 913, 914, 924, 935, 987, 993, 1024, 1147, 1152, 1213, 1251, 1252, 1400, 1418, 1428], "then1": 857, "then2": 857, "therebi": [165, 168, 169], "therefor": [54, 150, 156, 160, 162, 229, 355, 1145, 1400], "theta": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 71, 72, 73, 74, 79, 89, 96, 98, 105, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 201, 205, 207, 209, 210, 212, 213, 216, 217, 219, 221, 222, 225, 226, 229, 231, 235, 236, 241, 242, 243, 244, 248, 250, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 270, 271, 272, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 300, 302, 303, 304, 307, 309, 312, 313, 314, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 336, 341, 354, 355, 358, 359, 367, 368, 373, 381, 384, 385, 394, 406, 414, 415, 416, 421, 423, 440, 441, 444, 450, 460, 461, 463, 468, 469, 470, 480, 482, 488, 489, 491, 495, 498, 501, 512, 516, 523, 532, 533, 540, 542, 545, 546, 548, 549, 553, 575, 576, 583, 592, 593, 594, 595, 596, 597, 599, 605, 609, 610, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 631, 636, 639, 641, 643, 646, 647, 649, 654, 661, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 699, 700, 701, 706, 707, 708, 711, 713, 720, 723, 725, 727, 732, 733, 734, 737, 744, 745, 746, 747, 748, 753, 757, 759, 761, 764, 771, 772, 774, 775, 776, 777, 781, 785, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 813, 814, 816, 818, 819, 822, 823, 824, 825, 827, 828, 831, 833, 836, 838, 840, 844, 845, 848, 852, 856, 857, 858, 863, 867, 879, 883, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 898, 899, 900, 904, 907, 908, 910, 912, 913, 914, 916, 918, 919, 923, 924, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 965, 970, 984, 985, 986, 987, 991, 992, 993, 995, 1002, 1003, 1012, 1024, 1031, 1032, 1033, 1038, 1040, 1057, 1058, 1061, 1067, 1072, 1073, 1083, 1084, 1090, 1091, 1092, 1094, 1102, 1104, 1114, 1115, 1117, 1121, 1124, 1127, 1138, 1140, 1143, 1145, 1151, 1152, 1160, 1162, 1164, 1168, 1170, 1176, 1181, 1190, 1205, 1206, 1213, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1235, 1240, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1254, 1257, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1297, 1298, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1311, 1312, 1314, 1315, 1317, 1324, 1327, 1329, 1331, 1332, 1336, 1337, 1338, 1341, 1348, 1349, 1350, 1357, 1361, 1363, 1364, 1366, 1369, 1370, 1374, 1376, 1378, 1379, 1380, 1381, 1383, 1384, 1385, 1386, 1388, 1389, 1390, 1400, 1405, 1409, 1410, 1411, 1415, 1423, 1426, 1427, 1428, 1429, 1431], "thing": [165, 172], "think": [488, 489, 1114, 1115], "third": [612, 867], "thoma": [271, 355, 924, 987], "those": [5, 31, 41, 150, 155, 234, 283, 290, 314, 324, 355, 531, 664, 720, 828, 867, 882, 932, 953, 987, 993, 1265, 1324, 1381, 1400], "though": [39, 150, 152, 243, 355, 863, 908, 987], "thought": 857, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 48, 64, 140, 150, 151, 153, 187, 188, 301, 355, 575, 613, 708, 789, 867, 890, 944, 987, 1033, 1205, 1229, 1312, 1400], "thread_loc": [613, 867], "thread_pool_s": 188, "three": [41, 210, 287, 316, 355, 461, 661, 674, 697, 726, 735, 750, 867, 935, 987, 1037, 1084, 1234, 1263, 1330, 1340, 1354, 1400], "threshold": [293, 355, 937, 987], "through": [152, 264, 279, 355, 863, 919, 987, 993, 1400, 1415], "throughout": 205, "throw": [40, 133, 134, 137, 223, 284, 355, 728, 729, 886, 896, 933, 987, 1332, 1333, 1400], "thu": [41, 231, 355, 358, 796, 991, 1152, 1400], "thursdai": [243, 355, 468, 480, 791, 908, 987, 1090, 1102], "ti": [664, 867, 1265, 1400], "time": [13, 38, 40, 43, 47, 48, 49, 50, 51, 54, 62, 63, 64, 72, 74, 114, 154, 160, 162, 165, 166, 168, 169, 170, 181, 182, 185, 195, 221, 231, 243, 258, 259, 287, 325, 355, 440, 441, 469, 470, 472, 473, 474, 477, 478, 488, 489, 491, 494, 495, 496, 498, 500, 501, 509, 512, 518, 570, 604, 673, 674, 678, 680, 682, 684, 686, 689, 691, 693, 701, 749, 752, 756, 770, 771, 772, 794, 795, 805, 806, 807, 808, 809, 810, 816, 824, 854, 855, 867, 889, 890, 894, 908, 913, 914, 929, 935, 987, 993, 1057, 1058, 1091, 1092, 1094, 1095, 1099, 1100, 1117, 1120, 1121, 1122, 1124, 1126, 1127, 1135, 1138, 1147, 1152, 1200, 1275, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1306, 1353, 1356, 1360, 1382, 1384, 1385, 1400, 1409, 1415, 1424, 1431], "time_column": [325, 355], "time_format": [38, 48, 355, 987], "time_unit": [72, 74, 470, 472, 478, 500, 512, 752, 807, 808, 809, 810, 816, 992, 993, 1092, 1094, 1100, 1126, 1138, 1356], "time_unit_m": [470, 1092], "time_unit_n": [470, 1092], "time_unit_u": 512, "time_zon": [72, 473, 475, 495, 752, 807, 808, 809, 992, 993, 1091, 1095, 1099, 1121, 1356], "timedelta": [243, 258, 287, 325, 355, 491, 496, 501, 509, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 805, 806, 808, 809, 854, 855, 867, 908, 913, 935, 987, 992, 993, 1105, 1111, 1117, 1122, 1135, 1147, 1251, 1252, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1314, 1390, 1400], "timeout": [64, 890, 987], "timestamp": [138, 154, 166, 243, 355, 495, 496, 509, 816, 908, 987, 1121, 1122, 1135, 1421], "timestamp_m": 500, "timestamp_n": 1126, "timestamp_u": [500, 1126], "timestep": 816, "timeunit": [38, 48, 72, 74, 355, 470, 472, 500, 512, 752, 807, 808, 809, 810, 987, 993, 1092, 1094, 1126, 1138, 1356], "timezon": [55, 72, 154, 166, 475, 993, 1424], "tip": [613, 867], "titl": [41, 355, 358, 1400, 1405, 1409], "titlecas": [757, 1361], "tm": [472, 501, 993, 1424], "to_arrow": [256, 355, 1380, 1400, 1428], "to_batch": [256, 355], "to_dict": [214, 290, 355, 886, 987, 993], "to_dtype_expr": [362, 363, 365, 366, 373], "to_dummi": [312, 317, 355, 1400], "to_fram": [444, 478, 496, 500, 509, 749, 992, 1084, 1263, 1298, 1300, 1345, 1346, 1353, 1400, 1405], "to_init_repr": [138, 355, 1400], "to_jax": [317, 355, 1400], "to_list": [138, 287, 355, 1316, 1328, 1400], "to_lowercas": 645, "to_numpi": [312, 317, 355, 612, 867, 1400], "to_panda": [355, 1400], "to_phys": [867, 1400], "to_python": 992, "to_seri": [58, 238, 355, 749, 790, 841, 1353, 1423], "to_signed_integ": 373, "to_sql": [39, 355], "to_str": [498, 1124], "to_struct": [355, 721], "to_torch": [312, 355, 1400], "to_unsigned_integ": 373, "to_uppercas": [380, 644, 722, 867], "togeth": [259, 355, 914, 987, 1423], "token": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 167, 168, 169, 170, 190, 195, 355, 987], "tokyo": [138, 993], "tokyo_tz": 993, "toler": [174, 175, 176, 177, 258, 355, 549, 867, 913, 987, 1176, 1400], "tone": [41, 355], "tonight": [713, 737, 1317, 1341], "too": [15, 279, 355, 654, 867, 987], "tooltip": [355, 358, 1400, 1405], "toomanyrowsreturnederror": [288, 355], "top": [41, 302, 318, 355, 358, 772, 867, 945, 949, 987, 1400, 1405, 1428], "top_col": [41, 355], "top_k": [213, 355, 440, 441, 772, 867, 884, 987, 1057, 1058, 1385, 1400], "top_k_bi": [440, 441, 771, 867, 1057, 1058, 1384, 1400], "top_row": [41, 355], "tor_id": 138, "torch": [173, 317, 355, 1383, 1400], "torchexporttyp": [317, 355], "total": [41, 229, 336, 355, 502, 503, 504, 505, 506, 507, 508, 564, 585, 867, 965, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1145, 1194, 1215, 1400], "total_gross": 1409, "toward": [336, 564, 585, 867, 965, 1194, 1215, 1400], "tp": [1, 60], "tpu": [312, 355, 1378, 1400], "tr15": [732, 1336], "trace": 75, "traceback": [174, 175, 176, 177, 313, 355, 669, 867, 1271, 1380, 1400], "tracebacktyp": 1428, "track": [154, 166, 167, 263, 355, 1428], "trail": [29, 241, 355, 744, 745, 1348, 1349], "train": [317, 355], "train_lf": [958, 987], "transfer": 153, "transferencod": [425, 426, 715, 716, 1042, 1043, 1319, 1320], "transform": [263, 302, 355, 612, 757, 846, 867, 945, 987, 1361], "transform_dens": [1400, 1405], "transit": [234, 283, 355, 904, 932, 987], "translat": 152, "transpar": [889, 900, 929, 942, 987], "transpos": [279, 355, 373], "travel": [154, 166], "travers": [677, 679, 681, 683, 685, 688, 690, 692, 867, 1278, 1280, 1284, 1289, 1291, 1293, 1400], "treat": [150, 151, 165, 207, 401, 518, 553, 571, 712, 714, 724, 735, 736, 857, 867, 995, 1019, 1147, 1181, 1201, 1316, 1318, 1328, 1339, 1340, 1400], "tree": [629, 900, 987], "tree_format": [900, 987], "trend": [41, 355], "tri": [263, 355, 612, 613, 827, 828, 867], "triangl": [341, 970], "trigger": [40, 147, 260, 314, 355, 867, 1381, 1400], "trigonometri": [1421, 1427], "trim": [138, 1423], "trim_decimal_zero": 29, "trip": 152, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 54, 63, 64, 65, 96, 131, 132, 133, 134, 136, 137, 138, 140, 141, 146, 147, 150, 151, 152, 154, 155, 156, 158, 161, 162, 165, 166, 168, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 190, 205, 209, 214, 215, 216, 221, 223, 228, 233, 234, 236, 238, 240, 241, 242, 243, 250, 251, 252, 255, 257, 258, 259, 260, 262, 267, 268, 274, 275, 277, 279, 280, 283, 284, 288, 289, 290, 291, 301, 302, 305, 308, 310, 312, 313, 314, 317, 319, 320, 321, 323, 324, 325, 329, 335, 337, 339, 342, 343, 344, 345, 346, 347, 348, 355, 358, 373, 379, 380, 381, 382, 383, 384, 395, 397, 398, 401, 405, 406, 416, 420, 424, 425, 427, 430, 431, 436, 439, 441, 442, 443, 447, 455, 456, 457, 458, 459, 461, 468, 470, 473, 476, 478, 480, 481, 488, 489, 491, 492, 495, 496, 497, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 514, 515, 516, 517, 519, 520, 527, 534, 536, 537, 538, 539, 542, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 571, 579, 581, 583, 599, 604, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 648, 649, 651, 653, 656, 657, 661, 666, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 700, 701, 705, 707, 708, 711, 712, 713, 714, 715, 717, 723, 724, 725, 727, 728, 729, 735, 736, 740, 741, 743, 749, 751, 752, 754, 756, 760, 762, 763, 772, 774, 777, 780, 781, 782, 783, 784, 786, 789, 790, 791, 792, 796, 798, 805, 808, 814, 820, 824, 825, 827, 828, 832, 837, 838, 841, 845, 846, 849, 851, 854, 857, 858, 867, 886, 887, 888, 889, 890, 894, 896, 900, 903, 904, 907, 908, 912, 913, 914, 916, 918, 923, 929, 932, 933, 942, 944, 945, 950, 951, 952, 953, 956, 962, 964, 966, 968, 971, 972, 973, 974, 975, 976, 977, 986, 987, 992, 993, 1000, 1001, 1013, 1015, 1016, 1019, 1023, 1024, 1033, 1041, 1042, 1044, 1047, 1059, 1060, 1065, 1067, 1070, 1071, 1084, 1090, 1091, 1092, 1095, 1098, 1099, 1100, 1101, 1102, 1103, 1107, 1108, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1141, 1143, 1144, 1146, 1148, 1149, 1156, 1166, 1170, 1172, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1196, 1197, 1201, 1209, 1211, 1213, 1229, 1242, 1248, 1254, 1256, 1259, 1260, 1263, 1266, 1267, 1276, 1279, 1281, 1283, 1285, 1287, 1288, 1290, 1292, 1294, 1310, 1312, 1315, 1316, 1317, 1318, 1319, 1321, 1327, 1328, 1329, 1331, 1332, 1333, 1339, 1340, 1344, 1345, 1347, 1353, 1355, 1356, 1358, 1360, 1375, 1380, 1381, 1389, 1391, 1400, 1405, 1409, 1410, 1412, 1414, 1418, 1420, 1423, 1428, 1431], "truediv": [531, 867], "truncat": [21, 138, 150, 151, 165, 241, 243, 255, 289, 290, 309, 355, 908, 929, 987, 1427], "truncate_nod": [929, 987], "truncate_ragged_lin": [150, 151, 165], "truncate_str": 509, "truncate_td": 509, "trust": [463, 867, 895, 987], "truth": 604, "try": [38, 43, 47, 48, 49, 50, 51, 63, 124, 150, 151, 156, 160, 162, 165, 168, 169, 170, 195, 355, 857, 889, 900, 929, 942, 987], "try_cast": 1421, "try_parse_d": [140, 150, 151, 165], "try_parse_hive_d": [162, 168, 170], "ts_local": [495, 1121], "tseri": [488, 489, 1114, 1115], "tstamp": 993, "tstamp_tokyo": 993, "tstamp_utc": 993, "tue": [355, 358], "tuesdai": [243, 355, 908, 987], "tupl": [41, 66, 153, 155, 161, 210, 211, 255, 263, 277, 288, 289, 290, 297, 317, 333, 355, 628, 670, 867, 929, 942, 987, 992, 993, 1272, 1302, 1400], "turn": [8, 63, 150, 151, 165, 257, 258, 355, 700, 867, 889, 900, 912, 913, 918, 929, 987], "twice": [41, 355], "two": [41, 56, 97, 98, 133, 135, 137, 153, 210, 234, 236, 258, 259, 270, 271, 283, 289, 316, 322, 335, 341, 355, 359, 379, 465, 472, 531, 534, 537, 549, 604, 661, 707, 787, 788, 794, 796, 798, 805, 808, 842, 843, 846, 867, 904, 913, 914, 923, 924, 932, 952, 964, 970, 987, 993, 1037, 1087, 1094, 1176, 1234, 1263, 1400, 1415, 1416, 1417, 1420, 1429], "two_a": 1428, "tworld": [746, 1348, 1350], "txt": [1, 13, 165, 712, 724, 1328, 1423], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 55, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 131, 133, 134, 135, 136, 137, 139, 150, 151, 152, 154, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 207, 210, 211, 217, 227, 230, 236, 241, 243, 244, 256, 257, 263, 287, 292, 295, 307, 312, 313, 316, 317, 320, 332, 355, 373, 381, 383, 386, 387, 388, 389, 390, 391, 394, 399, 400, 401, 403, 406, 419, 420, 424, 425, 426, 427, 428, 429, 430, 442, 444, 445, 446, 450, 451, 452, 453, 454, 461, 462, 468, 469, 471, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 521, 523, 534, 537, 540, 548, 549, 550, 551, 552, 553, 554, 555, 564, 568, 569, 571, 576, 583, 585, 603, 604, 627, 661, 663, 667, 668, 669, 670, 672, 673, 674, 678, 680, 682, 684, 686, 689, 691, 693, 702, 703, 704, 711, 714, 715, 716, 719, 720, 721, 722, 725, 726, 727, 729, 730, 731, 739, 740, 741, 742, 749, 750, 754, 768, 769, 770, 777, 786, 794, 797, 804, 805, 806, 807, 808, 809, 810, 812, 820, 821, 823, 824, 825, 826, 827, 828, 838, 841, 853, 854, 855, 858, 863, 867, 879, 880, 889, 899, 900, 901, 908, 912, 929, 935, 936, 942, 950, 960, 987, 992, 993, 995, 1000, 1001, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1026, 1036, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1059, 1061, 1063, 1064, 1072, 1084, 1085, 1090, 1091, 1093, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1147, 1151, 1168, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1196, 1197, 1198, 1199, 1201, 1206, 1213, 1215, 1233, 1234, 1256, 1263, 1269, 1270, 1271, 1272, 1274, 1275, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1305, 1307, 1315, 1316, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1329, 1330, 1331, 1333, 1334, 1335, 1343, 1344, 1345, 1346, 1353, 1354, 1358, 1379, 1380, 1382, 1391, 1400, 1409, 1416, 1421, 1423, 1427, 1428], "type_coercion": [63, 889, 900, 929, 942, 987], "type_json": 197, "type_nam": 197, "type_text": 197, "typeerror": [40, 211, 355], "typenam": [41, 355], "typic": [134, 152, 170, 263, 355, 477, 702, 867, 993, 1099, 1242, 1307, 1400], "tz": [752, 1356], "tzinfo": [72, 154, 166, 993], "u": [41, 72, 74, 170, 183, 258, 355, 470, 472, 478, 500, 512, 749, 752, 782, 784, 807, 808, 809, 810, 816, 913, 987, 992, 993, 1092, 1094, 1100, 1126, 1138, 1353, 1356, 1413, 1424], "u1": [313, 355], "u16": [165, 1426, 1431], "u32": [13, 152, 212, 214, 220, 276, 331, 332, 336, 340, 346, 348, 355, 362, 363, 373, 379, 385, 392, 393, 394, 395, 396, 399, 400, 402, 408, 413, 429, 445, 446, 454, 455, 542, 544, 564, 568, 569, 572, 585, 590, 636, 652, 664, 672, 673, 678, 680, 682, 684, 686, 689, 691, 693, 697, 714, 724, 725, 730, 731, 732, 770, 775, 777, 781, 785, 789, 790, 797, 799, 820, 823, 836, 844, 867, 883, 886, 893, 926, 959, 960, 965, 969, 975, 977, 987, 993, 1012, 1013, 1014, 1017, 1018, 1020, 1026, 1030, 1059, 1063, 1064, 1078, 1170, 1198, 1199, 1202, 1215, 1220, 1265, 1274, 1275, 1299, 1318, 1328, 1329, 1334, 1335, 1382, 1387, 1389, 1400, 1409, 1417, 1418, 1419, 1423, 1428], "u64": [244, 332, 355, 540, 666, 867, 929, 960, 987, 993, 1168, 1267, 1400], "u8": [214, 310, 311, 323, 355, 669, 780, 867, 886, 987, 993, 1271, 1375, 1400, 1431], "udf": [187, 262, 263, 278, 341, 355, 463, 612, 613, 658, 827, 828, 867, 895, 918, 927, 970, 987, 1242, 1400], "ufunc": 104, "uid": 152, "uint": 1431, "uint16": [165, 458, 459, 766, 867, 993, 1081, 1082, 1370, 1380, 1383, 1400], "uint2": 1426, "uint32": [139, 173, 214, 229, 287, 332, 355, 373, 394, 399, 400, 429, 445, 446, 454, 518, 534, 537, 564, 568, 569, 585, 667, 672, 673, 674, 678, 680, 682, 684, 686, 689, 691, 693, 714, 725, 730, 731, 770, 797, 820, 823, 867, 886, 935, 960, 987, 993, 1013, 1017, 1018, 1026, 1046, 1059, 1063, 1064, 1145, 1147, 1198, 1199, 1215, 1269, 1274, 1275, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1318, 1329, 1334, 1335, 1382, 1383, 1400], "uint4": 1428, "uint64": [139, 244, 287, 332, 355, 399, 400, 518, 540, 568, 569, 666, 674, 678, 680, 682, 684, 686, 689, 691, 693, 867, 935, 960, 987, 993, 1017, 1018, 1147, 1168, 1198, 1199, 1267, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1383, 1400], "uint8": [152, 214, 311, 312, 313, 323, 355, 458, 459, 669, 766, 780, 867, 886, 987, 992, 993, 1081, 1082, 1271, 1370, 1383, 1400, 1431], "uint8_pair": 1431, "uit": [739, 1343], "uk": [721, 1325], "unabl": [106, 155], "unalias": 619, "unari": [650, 867], "unbias": [519, 520, 867, 1148, 1149, 1400], "unchang": [229, 355, 668, 770, 867, 918, 970, 987, 1145, 1270, 1382, 1400], "uncompress": [36, 43, 44, 47, 49, 51, 156, 168, 355, 987], "undefin": [150, 773, 867], "under": [38, 43, 47, 48, 49, 50, 51, 56, 58, 59, 60, 61, 97, 98, 160, 162, 165, 168, 169, 170, 193, 194, 195, 279, 302, 355, 369, 371, 372, 859, 860, 862, 863, 868, 869, 872, 874, 875, 876, 945, 987, 1392, 1394, 1396, 1401, 1406, 1407, 1408], "underestim": [229, 355, 1145, 1400], "underli": [1, 56, 71, 72, 74, 89, 98, 103, 113, 131, 133, 134, 135, 137, 152, 153, 155, 159, 160, 161, 162, 169, 178, 181, 185, 230, 231, 255, 256, 289, 307, 313, 355, 425, 470, 471, 472, 476, 479, 481, 482, 483, 484, 485, 486, 487, 490, 492, 493, 495, 497, 501, 510, 511, 512, 513, 666, 694, 712, 715, 724, 867, 901, 987, 993, 1042, 1092, 1093, 1094, 1098, 1101, 1103, 1104, 1108, 1109, 1110, 1112, 1113, 1116, 1118, 1119, 1121, 1123, 1127, 1136, 1137, 1138, 1139, 1152, 1267, 1295, 1305, 1316, 1319, 1328, 1374, 1380, 1400, 1428], "understood": 828, "undo": [630, 637], "unexpect": [113, 122, 152, 234, 283, 355, 904, 932, 987, 1242, 1400], "unformat": [41, 355], "unhelpfulli": [174, 176], "unicod": [21, 446, 726, 731, 732, 739, 750, 993, 1064, 1330, 1335, 1336, 1343, 1354, 1423], "unicodeform": [732, 1336], "unifi": [41, 312, 317, 355, 993], "uniform": [41, 355, 542, 661, 867, 1170, 1263, 1400], "unimod": [705, 867, 1310, 1400], "union": [63, 65, 596, 889, 900, 929, 942, 987, 993, 1226, 1427, 1428], "uniqu": [47, 51, 57, 75, 147, 155, 178, 179, 180, 183, 185, 212, 252, 257, 275, 279, 290, 346, 355, 385, 396, 413, 461, 560, 590, 636, 661, 749, 751, 752, 756, 775, 777, 785, 836, 867, 883, 912, 975, 987, 1003, 1014, 1030, 1084, 1189, 1220, 1249, 1263, 1353, 1355, 1356, 1360, 1387, 1389, 1400, 1416, 1418], "unique_column_valu": [279, 355], "unique_count": [867, 1400], "uniquekeepstrategi": [320, 355, 950, 987], "unit": [41, 72, 74, 147, 174, 175, 176, 177, 181, 185, 229, 355, 429, 470, 472, 478, 494, 500, 512, 518, 524, 610, 612, 625, 749, 752, 776, 793, 807, 808, 809, 810, 816, 827, 828, 867, 929, 987, 993, 1046, 1092, 1094, 1100, 1120, 1126, 1138, 1145, 1147, 1153, 1240, 1353, 1356, 1388, 1400, 1431], "uniti": [190, 191, 193, 194, 195, 203, 879], "unity_catalog": 198, "univers": [207, 995], "unix": [71, 72, 478, 509, 816, 1100, 1135], "unknown": [720, 826, 1324], "unless": [41, 57, 133, 150, 257, 262, 312, 317, 355, 373, 744, 745, 841, 912, 987, 1348, 1423], "unlik": [146, 243, 324, 355, 882, 908, 953, 987], "unnam": [722, 1326], "unnest": [146, 355, 461, 661, 672, 721, 722, 741, 742, 762, 764, 777, 857, 867, 987, 1037, 1084, 1234, 1263, 1274, 1345, 1346, 1400, 1421, 1427], "unpivot": [270, 355, 923, 987], "unregist": [1411, 1412, 1413, 1428, 1430], "unsaf": [147, 867], "unset": [39, 162, 168, 180, 340, 355, 433, 434, 435, 437, 438, 495, 867, 969, 1050, 1051, 1052, 1054, 1055, 1121, 1400, 1409], "unsign": [90, 91, 92, 93, 373, 666, 867, 993, 1267, 1400], "unsigned_integ": 993, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 128, 130, 141, 142, 143, 144, 145, 146, 152, 153, 154, 160, 162, 165, 166, 167, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 264, 302, 312, 317, 324, 355, 358, 359, 367, 368, 373, 460, 461, 468, 480, 542, 613, 661, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 753, 791, 793, 844, 867, 889, 890, 900, 919, 928, 929, 942, 945, 953, 961, 987, 993, 1067, 1083, 1084, 1090, 1102, 1170, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1378, 1383, 1400, 1405], "unstack": 355, "unstackdirect": [323, 355], "unsuit": 129, "unsupport": [40, 211, 355, 882], "until": [48, 49, 50, 51, 96, 97, 243, 260, 355, 733, 734, 759, 908, 987, 1337, 1338, 1363], "untrust": 171, "up": [11, 41, 88, 153, 255, 258, 279, 289, 290, 296, 309, 355, 449, 450, 613, 726, 735, 736, 750, 867, 912, 913, 918, 940, 987, 993, 1069, 1330, 1339, 1340, 1354, 1400], "upcast": [55, 264, 355, 384, 867, 919, 987], "upcast_integer_typ": [1, 60], "updat": [40, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205, 221, 355, 894, 987], "updated_at": [196, 199, 200], "updated_bi": [196, 199, 200], "upgrad": 109, "upheld": [918, 987], "upon": 151, "upper": [150, 151, 152, 229, 243, 355, 450, 542, 548, 604, 639, 776, 786, 805, 806, 808, 809, 824, 825, 854, 855, 867, 908, 987, 1072, 1145, 1170, 1175, 1240, 1388, 1400, 1418, 1421], "upper_bound": [243, 355, 450, 548, 604, 867, 908, 987, 1072, 1175, 1240, 1400], "uppercas": [645, 758, 1362, 1423], "upsampl": [243, 355, 908, 987], "urandom": [429, 1046], "uri": [39, 40, 152, 153, 154, 166, 167, 355], "url": [152, 153, 162, 168, 170, 190, 720, 722, 1324, 1326], "urllib": 153, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 63, 64, 65, 66, 72, 88, 97, 98, 101, 105, 128, 132, 134, 135, 137, 139, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 190, 211, 212, 213, 214, 217, 221, 223, 225, 226, 232, 233, 234, 236, 242, 243, 250, 252, 254, 255, 256, 258, 259, 262, 263, 270, 274, 275, 277, 278, 279, 283, 287, 288, 289, 290, 291, 293, 294, 296, 301, 302, 303, 307, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 322, 323, 324, 325, 326, 329, 330, 331, 332, 334, 341, 355, 358, 373, 379, 381, 383, 385, 394, 395, 420, 425, 426, 428, 441, 443, 445, 446, 447, 450, 460, 463, 466, 467, 475, 494, 495, 496, 498, 501, 509, 512, 514, 517, 518, 519, 520, 521, 525, 526, 527, 531, 546, 547, 548, 561, 575, 592, 600, 604, 606, 612, 613, 616, 654, 660, 661, 664, 666, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 696, 698, 700, 701, 705, 707, 708, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 728, 729, 730, 731, 732, 735, 736, 737, 739, 741, 743, 745, 746, 747, 748, 749, 751, 752, 753, 756, 759, 760, 764, 766, 772, 778, 779, 781, 782, 783, 784, 785, 788, 789, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 816, 820, 821, 823, 824, 826, 827, 828, 829, 830, 832, 834, 835, 838, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 854, 855, 856, 857, 858, 863, 866, 867, 878, 879, 882, 883, 884, 885, 886, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 913, 914, 916, 923, 928, 929, 932, 935, 936, 937, 938, 940, 942, 944, 945, 946, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 970, 987, 991, 992, 993, 1000, 1001, 1003, 1033, 1037, 1042, 1043, 1045, 1058, 1063, 1064, 1067, 1083, 1085, 1088, 1089, 1097, 1106, 1107, 1120, 1121, 1122, 1124, 1127, 1135, 1138, 1141, 1146, 1147, 1148, 1149, 1154, 1155, 1161, 1167, 1174, 1175, 1191, 1205, 1207, 1222, 1229, 1234, 1242, 1262, 1263, 1265, 1267, 1270, 1272, 1274, 1275, 1276, 1277, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1297, 1298, 1300, 1301, 1304, 1310, 1312, 1314, 1315, 1316, 1317, 1319, 1320, 1323, 1324, 1325, 1327, 1328, 1329, 1334, 1335, 1336, 1339, 1340, 1341, 1343, 1345, 1353, 1355, 1356, 1357, 1360, 1363, 1370, 1374, 1375, 1377, 1380, 1381, 1385, 1390, 1400, 1409, 1410, 1411, 1412, 1413, 1415, 1416, 1423, 1424, 1428, 1430, 1431], "usag": [181, 185, 299, 355, 857, 993, 1305, 1400], "usd": [241, 355, 1431], "use_abs_path": 147, "use_pyarrow": [47, 51, 150, 154, 156, 158, 162, 166, 313, 355, 987, 1380, 1400], "use_pyarrow_extension_arrai": [314, 355, 1381, 1400], "use_pyarrow_write_to_dataset": [47, 355], "use_statist": [162, 170], "user": [39, 145, 147, 152, 153, 171, 207, 262, 263, 278, 341, 355, 613, 658, 698, 800, 814, 828, 840, 867, 927, 970, 987, 991, 995, 1242, 1301, 1400], "user_conn": 152, "userid": 367, "usernam": [150, 153, 156, 158], "userwarn": 1, "usr": 152, "usual": [105, 153, 205, 317, 355, 469, 1091], "utc": [154, 166, 469, 473, 475, 477, 495, 749, 752, 992, 993, 1091, 1095, 1099, 1121, 1353, 1356], "utc_tz": 993, "utf": [38, 48, 87, 355, 987], "utf8": [21, 150, 151, 165, 726, 739, 750, 1330, 1343, 1354], "utf8_borders_onli": 21, "utf8_ful": [21, 57, 138], "utf8_full_condens": [7, 21, 138], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [317, 355, 816, 987], "uvloop": 152, "uvw": [721, 1325], "v": [8, 9, 10, 47, 229, 355, 697, 782, 784, 867, 1299, 1400, 1412, 1413], "v1": 33, "v2": [8, 10, 156, 168], "val": [41, 286, 355, 613, 658, 770, 857, 867, 934, 987], "valid": [38, 41, 48, 72, 96, 145, 150, 151, 152, 156, 158, 162, 165, 185, 205, 223, 229, 257, 258, 284, 355, 460, 712, 714, 720, 721, 722, 724, 729, 735, 736, 857, 867, 896, 912, 913, 933, 962, 987, 993, 1083, 1145, 1316, 1318, 1324, 1325, 1326, 1328, 1333, 1339, 1340, 1400, 1409, 1410], "validate_output_schema": [918, 987], "validate_schema": [96, 145], "vals_phys": [770, 867], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 48, 51, 52, 54, 56, 57, 65, 66, 69, 75, 76, 84, 85, 94, 98, 107, 133, 134, 136, 137, 143, 150, 151, 152, 153, 162, 165, 168, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 205, 209, 211, 212, 213, 214, 221, 225, 226, 228, 231, 232, 233, 234, 238, 241, 243, 244, 245, 249, 253, 255, 257, 258, 261, 263, 265, 266, 267, 268, 269, 270, 272, 273, 275, 277, 279, 280, 281, 283, 284, 287, 288, 289, 290, 291, 298, 301, 303, 304, 305, 306, 308, 309, 310, 313, 314, 318, 319, 322, 323, 324, 325, 326, 333, 336, 337, 339, 342, 343, 345, 346, 355, 358, 359, 373, 377, 378, 379, 381, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 429, 430, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 459, 460, 461, 464, 466, 467, 472, 476, 487, 492, 501, 510, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 574, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 597, 599, 600, 601, 602, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 621, 632, 633, 634, 635, 636, 646, 647, 648, 649, 652, 654, 655, 658, 659, 660, 661, 662, 664, 667, 668, 669, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 702, 703, 704, 705, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 720, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 750, 759, 761, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 789, 792, 794, 795, 797, 799, 800, 801, 802, 803, 813, 814, 819, 820, 821, 822, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 850, 851, 857, 867, 883, 884, 894, 897, 898, 902, 903, 904, 908, 910, 911, 912, 913, 920, 921, 922, 923, 925, 926, 930, 931, 932, 933, 935, 941, 944, 946, 947, 949, 952, 953, 954, 965, 966, 968, 971, 972, 974, 975, 987, 993, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1058, 1059, 1060, 1063, 1064, 1065, 1069, 1072, 1074, 1075, 1076, 1078, 1083, 1084, 1085, 1086, 1088, 1089, 1094, 1098, 1113, 1118, 1127, 1136, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153, 1154, 1155, 1159, 1160, 1161, 1162, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1227, 1229, 1230, 1231, 1232, 1235, 1236, 1242, 1243, 1244, 1246, 1247, 1249, 1251, 1252, 1254, 1255, 1257, 1258, 1262, 1263, 1264, 1265, 1269, 1270, 1271, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1303, 1307, 1308, 1309, 1310, 1312, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1354, 1363, 1366, 1370, 1371, 1372, 1373, 1375, 1380, 1381, 1382, 1385, 1387, 1389, 1391, 1400, 1409, 1414, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1426, 1428, 1430, 1431], "value1": [708, 867], "value2": [708, 867], "value_a": 1428, "value_b": 1428, "value_count": [775, 867, 1400], "value_cum_sum": [459, 867], "value_cum_sum_all_fil": [459, 867], "value_nam": [270, 322, 355, 923, 952, 987], "value_var": [270, 322, 355, 923, 952, 987], "valueerror": [10, 16, 21, 211], "valueexcept": 826, "var": [41, 186, 355, 692, 693, 867, 987, 1400, 1417], "var_samp": 1417, "vari": [155, 161, 211, 469, 1091, 1431], "variabl": [31, 38, 43, 47, 48, 49, 50, 51, 63, 64, 84, 160, 162, 165, 168, 169, 170, 184, 187, 195, 270, 310, 322, 355, 889, 890, 900, 923, 929, 942, 952, 987, 1375, 1400, 1410, 1412, 1428], "variable_nam": [270, 322, 355, 923, 952, 987], "variad": 152, "varianc": [326, 355, 520, 561, 692, 693, 778, 856, 867, 954, 987, 1149, 1191, 1293, 1294, 1390, 1400, 1421], "variou": [152, 210, 217, 355, 867, 891, 987, 992, 993, 1400], "vector": [171, 677, 679, 681, 683, 685, 688, 690, 692, 867, 1278, 1280, 1284, 1289, 1291, 1293, 1400], "vector_index_format": 198, "vectoris": [488, 489, 1114, 1115], "vein": 205, "verbos": [30, 174, 176, 205, 721, 1325], "veri": [255, 262, 319, 355, 613, 867, 970, 1422], "verifi": [258, 355, 913, 987], "versicolor": [355, 358], "version": [39, 40, 43, 44, 54, 62, 63, 66, 69, 132, 138, 150, 151, 154, 155, 156, 158, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 188, 195, 209, 212, 213, 222, 243, 244, 257, 270, 279, 287, 295, 302, 307, 312, 313, 317, 318, 325, 331, 336, 355, 358, 373, 441, 460, 463, 468, 475, 488, 489, 501, 512, 517, 519, 520, 533, 540, 612, 613, 620, 621, 627, 631, 668, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 700, 711, 719, 753, 764, 772, 779, 788, 791, 796, 840, 842, 843, 846, 867, 883, 884, 889, 895, 900, 908, 912, 923, 929, 931, 935, 939, 942, 945, 949, 958, 959, 965, 987, 993, 1083, 1090, 1097, 1106, 1107, 1114, 1115, 1127, 1138, 1144, 1146, 1148, 1149, 1167, 1168, 1270, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1315, 1323, 1357, 1374, 1378, 1380, 1383, 1400, 1405, 1428], "versionchang": [604, 728], "versu": [221, 355, 894, 987], "vertic": [65, 231, 323, 327, 355, 711, 727, 1315, 1331], "vertical_relax": 65, "via": [31, 150, 151, 152, 153, 156, 160, 162, 165, 168, 169, 170, 208, 210, 222, 255, 289, 355, 463, 613, 722, 867, 895, 931, 987, 996, 1326], "view": 202, "virtual": 147, "visibl": [18, 229, 355, 1145, 1400], "visit": [460, 867, 1083, 1400], "visual": [250, 252, 355, 628, 942, 987], "volk": 146, "vote": [720, 722, 1324, 1326], "vowel": [735, 736, 1339, 1340], "vstack": [65, 231, 355], "w": [41, 152, 243, 290, 355, 714, 718, 720, 722, 782, 784, 908, 987, 993, 1318, 1322, 1324, 1326, 1349, 1412, 1413, 1416], "w_i": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "wa": [39, 43, 44, 62, 69, 105, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 174, 175, 176, 177, 213, 222, 243, 257, 279, 287, 307, 312, 313, 318, 325, 355, 358, 441, 460, 463, 517, 519, 520, 669, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 737, 753, 772, 810, 842, 843, 867, 884, 895, 908, 912, 935, 949, 987, 993, 1083, 1144, 1146, 1148, 1149, 1271, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1341, 1374, 1380, 1400, 1405, 1423, 1428], "wai": [97, 98, 131, 133, 134, 135, 137, 159, 160, 169, 242, 256, 278, 301, 334, 355, 496, 658, 697, 708, 720, 797, 857, 863, 867, 892, 899, 907, 927, 936, 944, 955, 963, 970, 987, 991, 1122, 1299, 1324, 1400], "wait": [48, 49, 50, 51, 987], "walk": 795, "want": [41, 64, 134, 136, 150, 151, 152, 155, 156, 160, 162, 165, 205, 231, 263, 275, 287, 302, 355, 373, 445, 468, 480, 527, 612, 613, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 701, 713, 730, 735, 736, 737, 791, 800, 805, 808, 814, 827, 838, 841, 858, 867, 890, 945, 962, 987, 993, 1063, 1090, 1102, 1152, 1242, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1317, 1334, 1339, 1340, 1341, 1400, 1415], "warehous": 153, "warn": [100, 101, 104, 105, 108, 115, 117, 118, 128, 167, 654, 824, 825, 867, 1400], "watermark": [47, 355], "wb": [41, 355], "we": [47, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 210, 221, 222, 243, 258, 279, 287, 325, 355, 358, 463, 491, 496, 509, 542, 575, 612, 674, 678, 680, 682, 684, 686, 689, 691, 693, 722, 735, 736, 754, 804, 805, 806, 807, 808, 809, 826, 827, 854, 855, 857, 867, 894, 895, 904, 908, 913, 918, 932, 935, 987, 993, 1117, 1122, 1135, 1170, 1205, 1242, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1326, 1340, 1358, 1400, 1405, 1412], "weather": [735, 736, 1339, 1340], "wed": [355, 358], "wednesdai": [243, 355, 498, 501, 908, 987, 1124, 1127], "week": [243, 258, 287, 325, 355, 468, 480, 491, 496, 509, 511, 518, 674, 678, 680, 682, 684, 686, 689, 691, 693, 791, 805, 806, 808, 809, 810, 854, 855, 867, 908, 913, 935, 987, 993, 1090, 1102, 1117, 1122, 1135, 1137, 1147, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "week_mask": [468, 480, 791, 1090, 1102], "weekdai": [476, 492], "weekend": [468, 480, 791, 1090, 1102], "weekli": [243, 355, 509, 908, 987, 1135], "weghorst": [722, 1326], "weight": [146, 517, 518, 519, 520, 676, 677, 679, 681, 683, 685, 688, 690, 692, 705, 867, 1146, 1147, 1148, 1149, 1277, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1310, 1400], "wei\u00df": 1423, "well": [41, 150, 151, 152, 165, 355, 548, 846, 867, 1175, 1400, 1428], "were": [174, 175, 176, 177, 205, 668, 669, 863, 867, 1270, 1271, 1400], "west": [75, 259, 355, 914, 987], "what": [52, 210, 264, 275, 355, 468, 713, 737, 919, 987, 1090, 1317, 1341], "whatev": 205, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 72, 88, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 146, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 181, 185, 205, 213, 221, 227, 229, 231, 233, 234, 236, 243, 257, 259, 263, 271, 278, 284, 288, 290, 293, 294, 298, 301, 307, 310, 312, 313, 317, 318, 320, 324, 330, 355, 373, 415, 428, 445, 446, 450, 468, 480, 517, 519, 520, 526, 597, 612, 625, 658, 660, 668, 669, 699, 707, 708, 713, 719, 723, 725, 726, 730, 731, 737, 739, 744, 745, 746, 749, 750, 766, 789, 791, 800, 814, 824, 850, 867, 884, 894, 903, 908, 912, 914, 918, 924, 933, 937, 938, 941, 944, 949, 950, 953, 957, 984, 987, 1032, 1045, 1063, 1064, 1072, 1085, 1090, 1102, 1145, 1146, 1148, 1149, 1152, 1155, 1181, 1227, 1270, 1271, 1298, 1300, 1303, 1317, 1323, 1327, 1329, 1330, 1334, 1335, 1341, 1343, 1348, 1349, 1350, 1353, 1354, 1374, 1375, 1380, 1400, 1415, 1428], "when1": 857, "when2": 857, "when_matched_update_al": [40, 355], "when_not_matched_insert_al": [40, 355], "whenev": [612, 613, 827, 828, 867], "where": [41, 54, 57, 105, 152, 153, 155, 211, 225, 226, 231, 234, 243, 255, 259, 270, 279, 283, 289, 302, 303, 312, 317, 322, 324, 326, 355, 395, 428, 501, 511, 514, 516, 518, 527, 600, 606, 612, 649, 667, 697, 705, 708, 710, 737, 757, 778, 790, 796, 798, 842, 843, 846, 848, 856, 857, 867, 897, 898, 904, 908, 914, 923, 932, 945, 946, 952, 953, 954, 987, 1013, 1045, 1127, 1137, 1141, 1143, 1147, 1152, 1156, 1254, 1269, 1299, 1310, 1314, 1341, 1361, 1390, 1391, 1400, 1409, 1417, 1427, 1428, 1430], "wherea": [150, 165, 287, 355, 443, 447, 496, 509, 646, 647, 674, 867, 935, 987, 1122, 1135, 1251, 1252, 1400], "wherev": [41, 263, 341, 355, 613, 867, 1242, 1400], "whether": [38, 48, 52, 54, 96, 135, 137, 145, 146, 155, 161, 162, 168, 170, 185, 189, 228, 254, 258, 296, 301, 355, 373, 381, 383, 397, 398, 480, 481, 497, 539, 549, 566, 567, 654, 697, 698, 708, 723, 725, 789, 800, 814, 840, 867, 913, 918, 931, 940, 944, 987, 993, 1000, 1001, 1015, 1016, 1062, 1067, 1102, 1103, 1123, 1144, 1166, 1167, 1176, 1196, 1197, 1299, 1327, 1329, 1400, 1412, 1428], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 65, 134, 136, 150, 151, 152, 153, 154, 155, 160, 161, 162, 165, 166, 167, 168, 169, 170, 181, 184, 186, 205, 213, 214, 221, 222, 225, 226, 229, 231, 242, 243, 248, 257, 258, 259, 279, 287, 295, 312, 313, 318, 320, 324, 325, 355, 381, 420, 428, 463, 468, 480, 491, 496, 498, 509, 518, 524, 548, 551, 554, 556, 557, 558, 559, 604, 612, 613, 625, 627, 674, 678, 680, 682, 684, 686, 689, 691, 693, 736, 754, 791, 805, 806, 808, 809, 810, 824, 825, 854, 855, 857, 867, 884, 886, 889, 892, 894, 895, 897, 899, 900, 908, 912, 913, 914, 929, 931, 935, 939, 942, 949, 950, 953, 955, 987, 993, 1037, 1045, 1090, 1102, 1117, 1122, 1124, 1135, 1145, 1147, 1152, 1153, 1175, 1179, 1182, 1184, 1185, 1186, 1187, 1234, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1300, 1358, 1378, 1380, 1400, 1410, 1416, 1428, 1431], "while": [40, 64, 151, 154, 155, 166, 170, 181, 185, 195, 205, 255, 270, 319, 322, 324, 355, 446, 668, 731, 867, 890, 923, 952, 953, 987, 1064, 1270, 1335, 1400], "white": [41, 355], "whitespac": [138, 744, 745, 746, 1348, 1349, 1350, 1423], "whole": [612, 707, 708, 720, 867, 970, 987, 1324], "whose": [57, 99, 258, 279, 355, 521, 812, 867, 913, 987, 993], "why": [889, 900, 929, 942, 987], "wide": [152, 241, 270, 279, 322, 323, 355, 923, 952, 987], "wider": 55, "width": [27, 41, 66, 150, 151, 165, 355, 358, 373, 603, 793, 987, 993, 1233, 1400, 1405], "wiki": 21, "wikipedia": 21, "wildcard": [147, 521, 760, 800, 801, 814, 840, 863, 867, 993], "win_loss": [41, 355], "window": [150, 151, 165, 243, 287, 355, 460, 517, 519, 520, 613, 654, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 794, 842, 843, 867, 908, 935, 987, 1083, 1146, 1148, 1149, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1400], "window_s": [675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 842, 843, 867, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1400], "windowmappingstrategi": [654, 867], "winter": [723, 725, 735, 736, 1327, 1329], "wise": [41, 57, 152, 236, 355, 386, 387, 388, 389, 390, 391, 451, 452, 453, 522, 608, 702, 703, 704, 768, 769, 814, 840, 867, 1004, 1005, 1006, 1007, 1008, 1009, 1074, 1075, 1076, 1150, 1238, 1239, 1307, 1308, 1309, 1372, 1373, 1400], "wish": [213, 318, 355, 440, 441, 771, 772, 867, 884, 949, 987, 1057, 1058, 1384, 1385, 1400], "with_column": [1, 13, 60, 63, 145, 211, 243, 262, 278, 287, 317, 323, 330, 355, 373, 378, 380, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 413, 414, 415, 416, 420, 425, 426, 428, 429, 442, 443, 445, 446, 447, 450, 455, 456, 457, 458, 459, 461, 464, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 510, 511, 513, 515, 516, 518, 525, 526, 531, 536, 538, 540, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 559, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 613, 633, 635, 637, 638, 640, 642, 644, 645, 648, 649, 650, 654, 655, 658, 659, 661, 664, 668, 669, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 699, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 753, 754, 755, 757, 758, 759, 761, 764, 765, 770, 773, 780, 782, 784, 787, 791, 792, 793, 794, 795, 799, 800, 801, 803, 804, 806, 807, 811, 821, 824, 825, 827, 830, 832, 835, 844, 847, 851, 853, 855, 857, 863, 867, 889, 900, 908, 910, 927, 928, 929, 935, 942, 957, 987, 993, 1084, 1121, 1263, 1329, 1400, 1428], "with_column_nam": 165, "with_columns_seq": [355, 987], "with_context": 987, "with_field": [613, 867], "with_replac": [291, 355, 592, 696, 867, 1222, 1297, 1400], "with_row_count": [355, 987], "with_row_index": [1, 287, 331, 355, 678, 680, 682, 684, 686, 689, 691, 693, 867, 959, 987, 1298, 1400, 1405], "within": [47, 52, 53, 54, 66, 76, 84, 174, 175, 176, 177, 196, 197, 199, 211, 242, 243, 244, 258, 287, 325, 355, 540, 664, 708, 867, 908, 913, 935, 987, 1168, 1400, 1428], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 73, 79, 105, 108, 130, 138, 141, 142, 143, 144, 145, 146, 152, 153, 154, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 257, 259, 262, 264, 302, 312, 313, 317, 323, 324, 355, 358, 359, 367, 368, 373, 460, 461, 468, 480, 542, 612, 613, 661, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 693, 700, 713, 723, 725, 737, 753, 791, 793, 797, 824, 825, 827, 828, 844, 845, 867, 889, 890, 900, 912, 914, 919, 928, 929, 945, 953, 961, 987, 991, 993, 1067, 1083, 1084, 1090, 1102, 1170, 1263, 1276, 1277, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1292, 1294, 1317, 1327, 1329, 1341, 1378, 1380, 1383, 1400, 1405, 1430], "without_fil": [154, 166, 167], "wod": [746, 1350], "womp": [321, 355, 951, 987], "word": [153, 735, 736, 745, 746, 757, 1361, 1423], "work": [41, 73, 79, 150, 151, 156, 160, 162, 171, 294, 330, 355, 381, 383, 421, 445, 446, 449, 450, 521, 530, 575, 605, 613, 654, 726, 730, 731, 739, 750, 774, 824, 867, 931, 938, 957, 987, 991, 993, 1000, 1001, 1038, 1063, 1064, 1069, 1072, 1159, 1205, 1235, 1330, 1334, 1335, 1343, 1354, 1386, 1400], "workaround": 355, "workbook": [41, 155, 161, 355], "workday_raas_format": 198, "worker": [931, 987], "working_with_conditional_format": [41, 355], "working_with_sparklin": [41, 355], "worksheet": [41, 155, 161, 355], "workspac": 190, "workspace_url": 190, "world": [1, 21, 713, 737, 744, 745, 746, 993, 1213, 1317, 1341, 1348, 1349, 1350, 1411, 1414, 1423], "wors": [944, 987], "worth": [575, 1205], "worthwhil": [174, 176], "would": [104, 150, 151, 164, 165, 210, 313, 317, 355, 358, 394, 405, 468, 480, 581, 613, 624, 654, 660, 664, 766, 789, 791, 844, 850, 867, 1012, 1023, 1090, 1102, 1211, 1262, 1265, 1370, 1380, 1400, 1405, 1426], "wow": 993, "wrap": [86, 138, 373, 442, 548, 612, 827, 867, 1059, 1400], "wrap_in_arrai": 373, "wrap_in_list": 373, "wrap_numer": [442, 867, 1059, 1400], "wrapper": [64, 890, 987], "writabl": [36, 38, 43, 44, 45, 46, 47, 295, 313, 355, 1380, 1400], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 136, 141, 149, 151, 156, 205, 217, 355, 450, 628, 631, 867, 916, 942, 987, 993, 1072, 1400], "write_avro": 355, "write_clipboard": [149, 355], "write_csv": [37, 151, 165, 355], "write_databas": 355, "write_delta": 355, "write_excel": 355, "write_iceberg": 355, "write_ipc": [156, 355], "write_ipc_stream": 355, "write_json": 355, "write_markdown_frame_to_stdout": 205, "write_ndjson": [45, 355], "write_parquet": 355, "write_t": [47, 355], "write_to_dataset": [47, 355], "writeabl": [313, 355, 1380, 1400], "writer": [40, 355], "writer_properti": [40, 355], "writerproperti": [40, 355], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 295, 355, 627, 939, 987], "ww": [1423, 1430], "www": [732, 762, 1336], "x": [28, 57, 65, 88, 107, 132, 138, 141, 150, 151, 153, 155, 161, 165, 178, 179, 181, 209, 229, 247, 250, 252, 257, 262, 279, 289, 290, 319, 322, 323, 355, 358, 365, 366, 373, 378, 380, 382, 401, 406, 429, 455, 462, 515, 516, 531, 536, 538, 540, 563, 570, 583, 609, 611, 612, 613, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 653, 659, 667, 668, 669, 673, 702, 705, 741, 764, 765, 770, 773, 780, 782, 784, 787, 788, 794, 798, 800, 801, 803, 814, 826, 827, 830, 832, 835, 840, 844, 846, 851, 857, 867, 912, 918, 943, 945, 952, 987, 992, 993, 1024, 1078, 1155, 1174, 1242, 1270, 1271, 1307, 1310, 1345, 1378, 1382, 1383, 1400, 1405, 1412, 1413, 1416, 1422, 1423, 1428, 1430], "x00": [424, 425, 426, 427, 428, 430, 715, 1041, 1042, 1043, 1044, 1045, 1047, 1319], "x01": [428, 1045], "x05": [428, 1045], "x07": 429, "x1": 429, "x10": [428, 1045], "x80": 429, "x83": 429, "x88": 429, "x8e": 429, "x99": 429, "x_": [518, 867, 1147, 1400], "x_0": [323, 355, 517, 518, 519, 520, 867, 1146, 1147, 1148, 1149, 1400], "x_1": [323, 355, 518, 867, 1147, 1400], "x_2": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "x_i": [518, 867, 1147, 1400], "x_invers": [659, 867], "x_pow_8": 1422, "x_round": 1422, "x_round_1": 1422, "x_squar": [659, 867], "x_t": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "x_uniqu": [636, 867], "x_y": [406, 583], "xb": 429, "xb9neq": 429, "xbd": 429, "xc14": 429, "xd3": 429, "xdist": 1431, "xee": 429, "xf4v": 429, "xf9": 429, "xfb": 429, "xff": [424, 425, 426, 427, 430, 715, 1041, 1042, 1043, 1044, 1047, 1319], "xi": [721, 1325], "xl": 155, "xlog2": [635, 659, 867], "xlsb": 155, "xlsx": [41, 155, 355], "xlsx2csv": [155, 173], "xlsx2csv_option": 155, "xlsxwriter": [41, 173, 355], "xor": [439, 867, 1056, 1400, 1419], "xor_xi": [780, 867], "xx": [11, 58, 60, 185, 221, 248, 302, 355, 894, 987, 993, 1416, 1423, 1430], "xxx": [225, 355, 762, 897, 987], "xy": [58, 60], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 378, 714, 721, 867, 1318, 1325, 1376, 1400, 1423], "y": [28, 57, 65, 88, 107, 132, 138, 141, 178, 179, 181, 209, 229, 250, 252, 257, 279, 289, 290, 319, 322, 323, 355, 358, 365, 366, 373, 378, 380, 382, 401, 406, 429, 498, 501, 515, 516, 536, 538, 563, 570, 583, 611, 613, 636, 638, 640, 642, 644, 645, 648, 649, 653, 667, 668, 669, 673, 749, 751, 752, 764, 773, 780, 782, 784, 787, 788, 798, 803, 810, 826, 830, 832, 835, 846, 851, 867, 912, 943, 945, 952, 987, 992, 993, 1024, 1124, 1127, 1270, 1271, 1353, 1355, 1356, 1400, 1405, 1416, 1423, 1424, 1430], "y_": [517, 518, 519, 520, 867, 1146, 1147, 1148, 1149, 1400], "y_0": [323, 355, 517, 518, 519, 520, 867, 1146, 1147, 1148, 1149, 1400], "y_1": [323, 355], "y_i": [518, 867, 1147, 1400], "y_mul": 764, "y_t": [517, 519, 520, 867, 1146, 1148, 1149, 1400], "y_uniqu": [636, 867], "ya": [739, 1343], "ya29": 167, "ye": [141, 857], "year": [52, 54, 243, 258, 287, 302, 325, 355, 468, 480, 481, 482, 491, 492, 494, 496, 509, 510, 674, 678, 680, 682, 684, 686, 689, 691, 693, 791, 804, 805, 806, 807, 808, 809, 854, 855, 867, 908, 913, 935, 987, 993, 1090, 1102, 1103, 1104, 1117, 1118, 1120, 1122, 1135, 1136, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1400, 1424], "yellow": [355, 359, 424, 425, 426, 427, 430], "yield": [135, 137, 150, 151, 152, 165, 229, 231, 254, 319, 355, 531, 654, 867, 987, 1145, 1152, 1400], "you": [1, 11, 15, 41, 47, 51, 57, 64, 65, 131, 133, 134, 135, 136, 137, 147, 150, 151, 152, 153, 155, 156, 159, 160, 162, 164, 165, 169, 171, 205, 213, 231, 234, 243, 254, 255, 258, 263, 275, 279, 283, 287, 288, 289, 290, 302, 309, 312, 318, 319, 320, 322, 341, 355, 358, 365, 373, 440, 441, 445, 468, 480, 488, 489, 491, 495, 498, 501, 521, 527, 548, 575, 577, 612, 613, 628, 654, 659, 660, 666, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 701, 713, 730, 735, 736, 737, 757, 760, 766, 771, 772, 791, 800, 805, 808, 810, 814, 824, 827, 828, 838, 841, 844, 846, 850, 858, 867, 884, 890, 904, 908, 913, 931, 932, 935, 942, 945, 949, 950, 952, 962, 970, 987, 991, 993, 1057, 1058, 1063, 1090, 1102, 1114, 1115, 1121, 1124, 1127, 1152, 1175, 1205, 1242, 1261, 1262, 1267, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1317, 1334, 1339, 1340, 1341, 1361, 1370, 1378, 1384, 1385, 1400, 1405, 1410, 1415, 1431], "your": [39, 41, 56, 57, 98, 145, 150, 151, 152, 153, 155, 171, 205, 255, 257, 263, 289, 290, 293, 309, 329, 334, 341, 355, 358, 473, 518, 533, 613, 722, 749, 751, 752, 759, 827, 828, 867, 912, 918, 937, 956, 963, 970, 987, 991, 1095, 1147, 1242, 1326, 1353, 1355, 1356, 1363, 1400, 1405, 1431], "yy": [11, 58, 60, 185, 221, 248, 302, 355, 894, 987, 993, 1416, 1423, 1430], "yyi": [225, 355, 762, 897, 987], "yyyi": [41, 355], "yz": [58, 60], "z": [41, 65, 88, 138, 179, 229, 250, 252, 257, 289, 290, 319, 322, 323, 355, 373, 378, 380, 382, 540, 570, 613, 638, 640, 642, 644, 645, 653, 667, 668, 669, 713, 721, 723, 725, 737, 749, 752, 782, 784, 803, 830, 832, 835, 841, 846, 851, 867, 912, 943, 945, 952, 987, 992, 993, 1155, 1270, 1271, 1317, 1325, 1327, 1329, 1341, 1353, 1356, 1400, 1412, 1416, 1428, 1430], "z_0": [323, 355], "z_1": [323, 355], "zap": 993, "zero": [29, 41, 131, 132, 148, 150, 151, 156, 158, 162, 180, 183, 209, 233, 243, 255, 288, 302, 307, 313, 314, 355, 373, 526, 609, 694, 697, 705, 759, 773, 867, 887, 903, 908, 987, 1071, 1155, 1234, 1310, 1363, 1374, 1380, 1381, 1400, 1422, 1428], "zero_copy_onli": [1380, 1400], "zfill": [734, 780, 867, 1338], "zip": 1431, "zip_with": [236, 355, 1400], "zone": [72, 181, 182, 185, 469, 473, 495, 518, 752, 807, 808, 809, 867, 993, 1091, 1095, 1121, 1147, 1356, 1400], "zoneinfo": [72, 993], "zoom": [41, 355], "zstd": [40, 43, 44, 47, 49, 51, 355, 987], "zz": [185, 221, 248, 302, 355, 894, 987, 1416, 1423, 1430], "zzz": 762, "\u03bc": [138, 214, 243, 255, 287, 289, 290, 309, 325, 355, 469, 470, 472, 473, 474, 475, 477, 479, 483, 485, 486, 488, 489, 490, 491, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 674, 678, 680, 682, 684, 686, 689, 691, 693, 749, 752, 807, 808, 809, 810, 816, 824, 867, 886, 908, 935, 987, 993, 1091, 1092, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1107, 1108, 1112, 1114, 1115, 1116, 1117, 1121, 1122, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1138, 1279, 1281, 1283, 1285, 1287, 1290, 1292, 1294, 1353, 1356, 1400, 1423], "\u0441\u0438\u043d\u0438\u0439": 1423, "\u0967\u096f\u096f\u096f": 993, "\u0968\u0966\u096d\u096d": 993, "\u4eac\u90fd": 993, "\u5927\u962a": 993, "\u6771\u4eac": [445, 446, 730, 731, 993, 1063, 1064, 1334, 1335], "\u90fd\u5e02": 993, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [732, 1336], "\uff54\uff45\uff53\uff54": 1423, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1423, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1423, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1423, "\ud835\udf0b": 1422}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.__setitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_columns", "polars.DataFrame.map_rows", "polars.DataFrame.match_to_schema", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "polars.DataType.to_dtype_expr", "polars.DataTypeExpr.arr.inner_dtype", "polars.DataTypeExpr.arr.shape", "polars.DataTypeExpr.arr.width", "polars.DataTypeExpr.list.inner_dtype", "polars.DataTypeExpr.struct.field_dtype", "polars.DataTypeExpr.struct.field_names", "polars.dtype_of", "polars.self_dtype", "Array", "Functions", "List", "Struct", "DataType expressions", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.len", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_close", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.filter", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.row_index", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.__getitem__", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.match_to_schema", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.pipe_with_schema", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.len", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.bottom_k_by", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_close", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.filter", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_max_by", "polars.Series.rolling_mean", "polars.Series.rolling_mean_by", "polars.Series.rolling_median", "polars.Series.rolling_median_by", "polars.Series.rolling_min", "polars.Series.rolling_min_by", "polars.Series.rolling_quantile", "polars.Series.rolling_quantile_by", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_std_by", "polars.Series.rolling_sum", "polars.Series.rolling_sum_by", "polars.Series.rolling_var", "polars.Series.rolling_var_by", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.top_k_by", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1416, 1429], "IF": 1420, "__array__": [207, 995], "__arrow_c_stream__": [208, 996], "__dataframe__": 209, "__getitem__": [210, 882, 997], "__iter__": 333, "__setitem__": 211, "ab": [377, 998, 1422], "aco": 1425, "acosd": 1425, "add": 378, "add_business_dai": [468, 1090], "agg": [334, 963], "agg_group": 379, "aggreg": [206, 376, 881, 994, 1417], "alia": [380, 999], "alias": [1417, 1422, 1423], "align_fram": 57, "all": [335, 381, 397, 566, 781, 964, 1000, 1015, 1196, 1429], "all_horizont": 782, "and_": 382, "ani": [383, 398, 567, 783, 1001, 1016, 1197], "any_horizont": 784, "api": [1, 58, 59, 60, 61, 879, 1428], "append": [384, 1002], "approx_n_uniqu": [212, 385, 785, 883, 1003], "arang": 786, "arcco": [386, 1004], "arccosh": [387, 1005], "arcsin": [388, 1006], "arcsinh": [389, 1007], "arctan": [390, 1008], "arctan2": 787, "arctan2d": 788, "arctanh": [391, 1009], "arg_max": [392, 399, 568, 1010, 1017, 1198], "arg_min": [393, 400, 569, 1011, 1018, 1199], "arg_sort": [394, 1012], "arg_sort_bi": 789, "arg_tru": [395, 1013], "arg_uniqu": [396, 1014], "arg_wher": 790, "arr": [361, 362, 363, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "arrai": [66, 369, 859, 1392, 1418], "array_agg": 1418, "array_contain": 1418, "array_get": 1418, "array_length": 1418, "array_low": 1418, "array_mean": 1418, "array_revers": 1418, "array_sum": 1418, "array_to_str": 1418, "array_uniqu": 1418, "array_upp": 1418, "asin": 1425, "asind": 1425, "assert": 1431, "assert_frame_equ": 174, "assert_frame_not_equ": 175, "assert_series_equ": 176, "assert_series_not_equ": 177, "atan": 1425, "atan2": 1425, "atan2d": 1425, "atand": 1425, "attribut": [350, 982, 1393], "avail": 1, "avg": 1417, "avro": 880, "backward_fil": [423, 1040], "base_utc_offset": [469, 1091], "basepartitioncontext": 142, "batched_read": 140, "batchedcsvread": 140, "bin": [424, 425, 426, 427, 428, 429, 430, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "binari": [67, 860, 873, 1394], "bit_and": 1419, "bit_count": 1419, "bit_length": 1423, "bit_or": 1419, "bit_xor": 1419, "bitwis": 1419, "bitwise_and": [431, 1048], "bitwise_count_on": [432, 1049], "bitwise_count_zero": [433, 1050], "bitwise_leading_on": [434, 1051], "bitwise_leading_zero": [435, 1052], "bitwise_or": [436, 1053], "bitwise_trailing_on": [437, 1054], "bitwise_trailing_zero": [438, 1055], "bitwise_xor": [439, 1056], "boolean": [68, 861, 1395], "bottom_k": [213, 440, 884, 1057], "bottom_k_bi": [441, 1058], "build_info": 62, "business_day_count": 791, "cach": 885, "cancel": 979, "cast": [214, 442, 880, 886, 1059, 1426], "cast_time_unit": [470, 1092], "cat": [443, 444, 445, 446, 447, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067], "catalog": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "cataloginfo": 196, "categor": 69, "categori": [862, 1396], "categoricalremappingwarn": 100, "cbrt": [448, 1068, 1422], "ceil": [449, 1069, 1422], "centuri": [471, 1093], "chronoformatwarn": 101, "chunk_length": 1070, "claus": 1416, "clear": [215, 887, 1071], "clip": [450, 1072], "clipboard": 880, "clone": [216, 888, 1073], "cloud": 880, "co": [451, 1074, 1425], "coalesc": [792, 1420], "col": 863, "collect": 889, "collect_al": 63, "collect_all_async": 64, "collect_async": 890, "collect_schema": [217, 891], "column": [178, 179, 218, 864, 892], "columninfo": 197, "columnnotfounderror": 102, "combin": [472, 1094], "comparison": [873, 1404], "comput": [351, 865, 1397], "computeerror": 103, "concat": [65, 570, 711, 1200, 1315, 1423], "concat_arr": 793, "concat_list": 794, "concat_str": 795, "concat_w": 1423, "condit": 1420, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 205], "conjunct": 873, "contain": [401, 424, 571, 712, 1019, 1041, 1201, 1316], "contains_ani": [713, 1317], "context": 205, "convers": 878, "convert_time_zon": [473, 1095], "corr": [219, 796, 1417], "cosd": 1425, "cosh": [452, 1075], "cot": [453, 1076, 1425], "cotd": 1425, "count": [220, 336, 454, 797, 893, 965, 1077, 1417], "count_match": [402, 572, 714, 1020, 1202, 1318], "cov": 798, "creat": 1430, "create_list_strategi": 180, "credenti": 880, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [140, 880], "cum_count": [455, 799, 1078], "cum_fold": 800, "cum_max": [456, 1079], "cum_min": [457, 1080], "cum_prod": [458, 1081], "cum_reduc": 801, "cum_sum": [459, 802, 1082], "cum_sum_horizont": 803, "cumulative_ev": [460, 1083], "customufuncwarn": 104, "cut": [461, 1084], "dai": [476, 1098], "data": 374, "databas": 880, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355], "dataorientationwarn": 105, "dataset": 880, "datasourceformat": 198, "datatyp": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 360, 373, 374], "datatypeexpr": [361, 362, 363, 364, 365, 366], "date": [71, 474, 804, 1096, 1423], "date_part": 1424, "date_rang": [805, 806], "datetim": [72, 475, 807, 1097], "datetime_rang": [808, 809], "decim": 73, "decod": [425, 715, 1042, 1319], "decor": 205, "defer": 96, "degre": [462, 1425], "delet": 1430, "delta": 880, "describ": [221, 894, 1085], "descript": [352, 983, 1398], "deseri": [222, 463, 895], "diff": [464, 573, 1086, 1203], "disable_string_cach": 97, "distinct": 1416, "div": 1422, "document": 1428, "dot": [465, 1087], "drop": [223, 896, 1430], "drop_in_plac": 224, "drop_nan": [225, 466, 897, 1088], "drop_nul": [226, 467, 574, 898, 1089, 1204], "dst_offset": [477, 1099], "dt": [468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "dtype": [182, 227, 899, 1140], "dtype_of": 367, "duplicateerror": 106, "durat": [74, 810], "element": 811, "enable_string_cach": 98, "encod": [426, 716, 1043, 1320], "ends_with": [427, 443, 717, 1044, 1060, 1321, 1423], "engine_config": 962, "entropi": [514, 1141], "enum": 75, "epoch": [478, 1100], "eq": [515, 617, 1142], "eq_miss": [516, 1143], "equal": [228, 1144], "error": 375, "escape_regex": [99, 718, 1322], "estimated_s": [229, 1145], "eval": [575, 1205], "ewm_mean": [517, 1146], "ewm_mean_bi": [518, 1147], "ewm_std": [519, 1148], "ewm_var": [520, 1149], "exampl": [1, 993, 1431], "excel": 880, "except": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 375, 1429], "exclud": [521, 812], "execut": 1409, "execute_glob": 1410, "exp": [522, 1150, 1422], "explain": [900, 1430], "explain_al": 130, "explod": [230, 403, 523, 576, 719, 901, 1021, 1151, 1206, 1323], "export": [353, 1399], "expr": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780], "express": [373, 867, 991, 1428], "extend": [1, 231, 1152], "extend_const": [524, 1153], "extract": [720, 1324, 1424], "extract_al": [721, 1325], "extract_group": [722, 1326], "extract_mani": [723, 1327], "feather": 880, "fetch": 980, "fetch_block": 981, "field": [76, 760, 1364, 1365], "field_dtyp": 365, "field_nam": 366, "fill_nan": [232, 525, 902, 1154], "fill_nul": [233, 526, 903, 1155], "filter": [234, 527, 577, 904, 1156, 1207], "find": [724, 1328], "find_mani": [725, 1329], "first": [337, 404, 528, 578, 813, 905, 966, 1022, 1157, 1208, 1417], "flag": [235, 1158], "flatten": 529, "float32": 77, "float64": 78, "floor": [530, 1159, 1422], "floordiv": 531, "fold": [236, 814], "format": 815, "forward_fil": [532, 1160], "frame": 1428, "from": 1416, "from_arrow": 131, "from_datafram": 132, "from_dict": [133, 134], "from_epoch": 816, "from_json": 533, "from_numpi": 135, "from_panda": 136, "from_record": 137, "from_repr": 138, "function": [1, 370, 866, 878, 993, 1421], "gather": [534, 579, 1161, 1209], "gather_everi": [237, 535, 580, 906, 1162, 1210], "ge": [536, 1163], "get": [405, 537, 581, 1023, 1211], "get_categori": [444, 1061], "get_chunk": 1164, "get_column": [238, 240], "get_column_index": 239, "get_index_typ": 139, "get_polars_schema": 201, "get_table_info": 191, "glimps": 241, "global": 1428, "gpuengin": [962, 984], "greatest": 1420, "group": [817, 1416], "group_bi": [242, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 907, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978], "group_by_dynam": [243, 908], "groupbi": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 985], "gt": [538, 1165], "has_multiple_output": 618, "has_nul": [539, 1166], "has_valid": 1167, "hash": [540, 1168], "hash_row": 244, "have": 1416, "head": [245, 338, 541, 582, 726, 818, 909, 967, 1169, 1212, 1330], "height": 246, "helper": 1431, "hist": [542, 1170], "hour": [479, 1101], "hstack": 247, "iceberg": 880, "ifnul": 1420, "implod": [543, 819, 1171], "import": 993, "in_process": [979, 980, 981], "index": 0, "index_of": [544, 1172], "initcap": 1423, "inner_dtyp": [361, 364], "inprocessqueri": [979, 980, 981, 986], "input": 880, "insert_column": 248, "inspect": [545, 910], "instanc": 205, "int128": 79, "int16": 80, "int32": 81, "int64": 82, "int8": 83, "int_rang": [820, 821], "interfac": 1427, "interpol": [249, 546, 911, 1173], "interpolate_bi": [547, 1174], "intersect": 1429, "introduct": 1428, "invalidoperationerror": 107, "io": [140, 141, 142, 143, 144, 145, 991], "ipc": 880, "is_between": [548, 1175], "is_business_dai": [480, 1102], "is_clos": [549, 1176], "is_column": 619, "is_column_select": 620, "is_dupl": [250, 550, 1177], "is_empti": [251, 1178], "is_finit": [551, 1179], "is_first_distinct": [552, 1180], "is_in": [553, 1181], "is_infinit": [554, 1182], "is_last_distinct": [555, 1183], "is_leap_year": [481, 1103], "is_liter": 621, "is_loc": 1062, "is_nan": [556, 1184], "is_not_nan": [557, 1185], "is_not_nul": [558, 1186], "is_nul": [559, 1187], "is_regex_project": 622, "is_sort": 1188, "is_uniqu": [252, 560, 1189], "iso_year": [482, 1104], "item": [253, 1190], "iter_column": 254, "iter_row": 255, "iter_slic": 256, "join": [257, 406, 583, 727, 912, 1024, 1213, 1331, 1416], "join_asof": [258, 913], "join_wher": [259, 914], "json": 880, "json_decod": [728, 1332], "json_encod": [761, 1366], "json_norm": 146, "json_path_match": [729, 1333], "keep": 637, "keyedpartit": 143, "keyedpartitioncontext": 144, "kurtosi": [561, 1191], "lake": 880, "last": [339, 407, 562, 584, 822, 915, 968, 1025, 1192, 1214, 1417], "lazi": [260, 916], "lazyfram": [48, 49, 50, 51, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987], "lazygroupbi": [963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978], "le": [563, 1193], "least": 1420, "left": 1423, "len": [340, 408, 564, 585, 823, 969, 1026, 1194, 1215], "len_byt": [445, 730, 1063, 1334], "len_char": [446, 731, 1064, 1335], "length": 1423, "limit": [261, 565, 917, 1195, 1416], "linear_spac": [824, 825], "list": [84, 183, 364, 371, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 868, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1401], "list_catalog": 192, "list_namespac": 193, "list_tabl": 194, "lit": 826, "ln": 1422, "load": [2, 205], "load_from_fil": 3, "load_profil": 184, "log": [607, 1237, 1422], "log10": [608, 1238, 1422], "log1p": [609, 1239, 1422], "log2": 1422, "lower": 1423, "lower_bound": [610, 1240], "lt": [611, 1241], "ltrim": 1423, "manag": 205, "manipul": [357, 871, 989, 1403], "map": 638, "map_batch": [612, 827, 918], "map_column": 262, "map_el": [613, 1242], "map_field": 639, "map_group": [341, 828, 970], "map_row": 263, "mapwithoutreturndtypewarn": 108, "match_to_schema": [264, 919], "math": 1422, "max": [265, 342, 409, 586, 614, 829, 920, 971, 1027, 1105, 1216, 1243, 1417], "max_horizont": [266, 830], "mean": [267, 343, 410, 587, 615, 831, 921, 972, 1106, 1217, 1244], "mean_horizont": [268, 832], "median": [269, 344, 411, 588, 616, 833, 922, 973, 1028, 1107, 1218, 1245, 1417], "melt": [270, 923], "merge_sort": [271, 924], "meta": [617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 869], "metadata": 990, "method": 1428, "microsecond": [483, 1108], "millennium": [484, 1109], "millisecond": [485, 1110], "min": [272, 345, 412, 589, 632, 834, 925, 974, 1029, 1111, 1219, 1246, 1417], "min_horizont": [273, 835], "minut": [486, 1112], "miscellan": [356, 870, 878, 988, 1402], "mod": [633, 1422], "mode": [634, 1247], "moduleupgraderequirederror": 109, "month": [487, 1113], "month_end": [488, 1114], "month_start": [489, 1115], "mul": 635, "multipl": [205, 878], "n_chunk": [274, 1248], "n_uniqu": [275, 346, 413, 590, 636, 836, 975, 1030, 1220, 1249], "name": [637, 638, 639, 640, 641, 642, 643, 644, 645, 864, 872, 1250, 1429], "namespaceinfo": 199, "nan_max": [646, 1251], "nan_min": [647, 1252], "nanosecond": [490, 1116], "ne": [623, 648, 1253], "ne_miss": [649, 1254], "neg": 650, "nest": 374, "new": 1, "new_from_index": 1255, "next_batch": 140, "nodataerror": 110, "normal": [732, 1336, 1423], "norowsreturnederror": 111, "not_": [651, 1256], "nth": 837, "null": 85, "null_count": [276, 652, 926, 1257], "nullif": 1420, "numer": [374, 873, 1404], "object": 86, "octet_length": 1423, "od": 880, "offset": 1416, "offset_bi": [491, 1117], "ones": 838, "oper": [873, 993, 1404, 1429, 1430], "option": [205, 880], "or_": 653, "order": 1416, "ordinal_dai": [492, 1118], "other": 374, "outofboundserror": 112, "output": 880, "output_nam": 624, "over": 654, "pad_end": [733, 1337], "pad_start": [734, 1338], "panic": 375, "panicexcept": 113, "parametercollisionerror": 114, "parametr": [178, 179, 180, 181, 182, 183, 184, 185, 186, 1431], "parquet": [141, 880], "parquetfieldoverwrit": 141, "partit": [142, 143, 144, 880], "partition_bi": 277, "partitionbykei": 52, "partitionmaxs": 53, "partitionpart": 54, "pct_chang": [655, 1258], "peak_max": [656, 1259], "peak_min": [657, 1260], "performancewarn": 115, "pi": 1422, "pipe": [278, 658, 927], "pipe_with_schema": 928, "pivot": 279, "plot": [358, 1405], "plugin": [145, 147, 991], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 360, 361, 362, 363, 364, 365, 366, 367, 368, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1431], "polarserror": 116, "polarsinefficientmapwarn": 117, "polarswarn": 118, "pop": 625, "pow": [659, 1261, 1422], "prefix": 640, "prefix_field": 641, "product": [280, 660, 1262], "profil": [929, 1431], "provid": 1, "pyarrow": 880, "python": [879, 1428], "qcut": [661, 1263], "quantil": [281, 347, 662, 839, 930, 976, 1264], "quantile_cont": 1417, "quantile_disc": 1417, "quarter": [493, 1119], "queri": [878, 1428], "queryoptflag": 961, "radian": [663, 1425], "random": 878, "rank": [664, 1265], "read_avro": 148, "read_clipboard": 149, "read_csv": 150, "read_csv_batch": 151, "read_databas": 152, "read_database_uri": 153, "read_delta": 154, "read_excel": 155, "read_ipc": 156, "read_ipc_schema": 157, "read_ipc_stream": 158, "read_json": 159, "read_ndjson": 160, "read_od": 161, "read_parquet": 162, "read_parquet_metadata": 163, "read_parquet_schema": 164, "rechunk": [282, 665, 1266], "reduc": 840, "refer": 879, "regexp_lik": 1423, "regist": 1411, "register_dataframe_namespac": 58, "register_expr_namespac": 59, "register_glob": 1412, "register_io_sourc": 145, "register_lazyframe_namespac": 60, "register_mani": 1413, "register_plugin_funct": 147, "register_series_namespac": 61, "registr": 1, "reinterpret": [428, 666, 1045, 1267], "remot": 931, "remov": [283, 932], "renam": [284, 933, 1268], "rename_field": [762, 1367], "repeat": 841, "repeat_bi": [667, 1269], "replac": [494, 668, 735, 1120, 1270, 1339, 1423], "replace_al": [736, 1340], "replace_column": 285, "replace_mani": [737, 1341], "replace_strict": [669, 1271], "replace_time_zon": [495, 1121], "reshap": [670, 1272], "restore_default": 4, "revers": [286, 414, 591, 671, 738, 934, 1031, 1221, 1273, 1342, 1423], "right": 1423, "rle": [672, 1274], "rle_id": [673, 1275], "roll": [287, 674, 935], "rolling_corr": 842, "rolling_cov": 843, "rolling_kurtosi": [675, 1276], "rolling_map": [676, 1277], "rolling_max": [677, 1278], "rolling_max_bi": [678, 1279], "rolling_mean": [679, 1280], "rolling_mean_bi": [680, 1281], "rolling_median": [681, 1282], "rolling_median_bi": [682, 1283], "rolling_min": [683, 1284], "rolling_min_bi": [684, 1285], "rolling_quantil": [685, 1286], "rolling_quantile_bi": [686, 1287], "rolling_skew": [687, 1288], "rolling_std": [688, 1289], "rolling_std_bi": [689, 1290], "rolling_sum": [690, 1291], "rolling_sum_bi": [691, 1292], "rolling_var": [692, 1293], "rolling_var_bi": [693, 1294], "root_nam": 626, "round": [496, 694, 1122, 1295, 1422], "round_sig_fig": [695, 1296], "row": [288, 289], "row_index": 844, "rows_by_kei": 290, "rowserror": 119, "rtrim": 1423, "sampl": [291, 592, 696, 1222, 1297], "save": [5, 205], "save_to_fil": 6, "scan": 880, "scan_csv": 165, "scan_delta": 166, "scan_iceberg": 167, "scan_ipc": 168, "scan_ndjson": 169, "scan_parquet": 170, "scan_pyarrow_dataset": 171, "scan_tabl": 195, "scancastopt": 55, "scatter": 1298, "schema": [292, 936, 992, 1368], "schemaerror": 122, "schemafieldnotfounderror": 123, "search_sort": [697, 1299], "second": [497, 1123], "select": [293, 357, 845, 871, 937, 989, 1403, 1416], "select_seq": [294, 938], "selector": 993, "self_dtyp": 368, "seri": [185, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1400], "serial": [295, 356, 627, 939, 988], "set": [993, 1300, 1429], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [593, 1223], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [594, 1224], "set_profil": 186, "set_random_se": 172, "set_sort": [296, 698, 940, 1301], "set_streaming_chunk_s": 15, "set_symmetric_differ": [595, 1225], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [596, 1226], "set_verbos": 30, "shape": [297, 362, 1302], "shapeerror": 124, "shift": [298, 415, 597, 699, 941, 1032, 1227, 1303], "show": 1430, "show_graph": [628, 942], "show_vers": 173, "shrink_dtyp": [700, 1304], "shrink_to_fit": [299, 1305], "shuffl": [701, 1306], "sign": [702, 1307, 1422], "sin": [703, 1308, 1425], "sind": 1425, "sinh": [704, 1309], "sink_csv": 48, "sink_ipc": 49, "sink_ndjson": 50, "sink_parquet": 51, "size": [429, 1046], "skew": [705, 1310], "slice": [300, 598, 706, 739, 943, 1228, 1311, 1343], "sort": [301, 416, 599, 707, 944, 1033, 1229, 1312], "sort_bi": 708, "split": [740, 1344], "split_exact": [741, 1345], "split_part": 1423, "splitn": [742, 1346], "sql": [302, 846, 945, 1416, 1421, 1427, 1428], "sql_expr": 847, "sqlcontext": [1409, 1410, 1411, 1412, 1413, 1414, 1415, 1428], "sqlinterfaceerror": 120, "sqlsyntaxerror": 121, "sqrt": [709, 1313, 1422], "starts_with": [430, 447, 743, 1047, 1065, 1347, 1423], "state": [31, 205], "std": [303, 417, 600, 710, 848, 946, 1034, 1230, 1314], "stddev": 1417, "str": [711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363], "strategi": 1431, "strftime": [498, 1124, 1424], "string": [87, 374, 874, 1406, 1423], "string_to_arrai": 1423, "stringcach": [56, 878], "stringcachemismatcherror": 125, "strip_char": [744, 1348], "strip_chars_end": [745, 1349], "strip_chars_start": [746, 1350], "strip_prefix": [747, 1351], "strip_suffix": [748, 1352], "strpo": 1423, "strptime": [749, 1353, 1423], "struct": [88, 365, 366, 372, 760, 761, 762, 763, 764, 849, 875, 1364, 1365, 1366, 1367, 1368, 1369, 1407], "structfieldnotfounderror": 126, "style": 359, "sub": 765, "substr": 1423, "suffix": 642, "suffix_field": 643, "sum": [304, 348, 418, 601, 766, 850, 947, 977, 1035, 1231, 1370, 1417], "sum_horizont": [305, 851], "tabl": [1414, 1430], "tableinfo": [200, 201], "tabletyp": 202, "tail": [306, 349, 602, 750, 767, 852, 948, 978, 1232, 1354, 1371], "tan": [768, 1372, 1425], "tand": 1425, "tanh": [769, 1373], "tempor": [374, 876, 1408, 1424], "test": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 1431], "thread_pool_s": 187, "threadpool_s": 188, "time": [89, 499, 853, 1125], "time_rang": [854, 855], "timestamp": [500, 1126, 1423], "to_arrai": [603, 1233], "to_arrow": [307, 1374], "to_dat": [751, 1355], "to_datetim": [752, 1356], "to_decim": [753, 1357], "to_dict": [308, 309], "to_dtype_expr": 360, "to_dummi": [310, 1375], "to_fram": 1376, "to_init_repr": [311, 1377], "to_integ": [754, 1358], "to_jax": [312, 1378], "to_list": [419, 1036, 1379], "to_loc": 1066, "to_lowercas": [644, 755, 1359], "to_numpi": [313, 1380], "to_panda": [314, 1381], "to_phys": [770, 1382], "to_seri": 315, "to_str": [501, 1127], "to_struct": [316, 420, 604, 1037, 1234], "to_tim": [756, 1360], "to_titlecas": [757, 1361], "to_torch": [317, 1383], "to_uppercas": [645, 758, 1362], "toomanyrowsreturnederror": 127, "top_k": [318, 771, 949, 1384], "top_k_bi": [772, 1385], "total_dai": [502, 1128], "total_hour": [503, 1129], "total_microsecond": [504, 1130], "total_millisecond": [505, 1131], "total_minut": [506, 1132], "total_nanosecond": [507, 1133], "total_second": [508, 1134], "transpos": 319, "tree_format": 629, "trigonometri": 1425, "truediv": 773, "truncat": [509, 1135, 1430], "try_cast": 1426, "type": [374, 1426], "uint16": 90, "uint32": 91, "uint64": 92, "uint8": 93, "undo_alias": 630, "union": 1429, "uniqu": [320, 421, 605, 774, 950, 1038, 1235, 1386], "unique_count": [775, 1387], "uniti": [196, 197, 198, 199, 200, 201, 202, 204], "unknown": 94, "unnest": [321, 763, 951, 1369, 1418, 1430], "unpivot": [322, 952], "unregist": 1415, "unstablewarn": 128, "unstack": 323, "unsuitablesqlerror": 129, "updat": [324, 953], "upper": 1423, "upper_bound": [776, 1388], "upsampl": 325, "us": 205, "uses_lexical_ord": 1067, "using_string_cach": 189, "utf8": 95, "value_count": [777, 1389], "var": [326, 422, 606, 778, 856, 954, 1039, 1236, 1390], "varianc": 1417, "vstack": 327, "warn": 375, "week": [510, 1136], "weekdai": [511, 1137], "when": 857, "where": [779, 1416], "width": [328, 363, 955], "window": 877, "with_column": [329, 956], "with_columns_seq": [330, 957], "with_context": 958, "with_field": 764, "with_row_count": [331, 959], "with_row_index": [332, 960], "with_time_unit": [512, 1138], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 631], "write_ndjson": 46, "write_parquet": 47, "xor": 780, "year": [513, 1139], "zero": 858, "zfill": [759, 1363], "zip_with": 1391}})